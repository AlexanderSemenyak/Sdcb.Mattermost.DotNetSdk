/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// EnvironmentConfigLogSettings
    /// </summary>
    [DataContract]
    public partial class EnvironmentConfigLogSettings :  IEquatable<EnvironmentConfigLogSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentConfigLogSettings" /> class.
        /// </summary>
        /// <param name="enableConsole">enableConsole.</param>
        /// <param name="consoleLevel">consoleLevel.</param>
        /// <param name="enableFile">enableFile.</param>
        /// <param name="fileLevel">fileLevel.</param>
        /// <param name="fileLocation">fileLocation.</param>
        /// <param name="enableWebhookDebugging">enableWebhookDebugging.</param>
        /// <param name="enableDiagnostics">enableDiagnostics.</param>
        public EnvironmentConfigLogSettings(bool enableConsole = default(bool), bool consoleLevel = default(bool), bool enableFile = default(bool), bool fileLevel = default(bool), bool fileLocation = default(bool), bool enableWebhookDebugging = default(bool), bool enableDiagnostics = default(bool))
        {
            this.EnableConsole = enableConsole;
            this.ConsoleLevel = consoleLevel;
            this.EnableFile = enableFile;
            this.FileLevel = fileLevel;
            this.FileLocation = fileLocation;
            this.EnableWebhookDebugging = enableWebhookDebugging;
            this.EnableDiagnostics = enableDiagnostics;
        }
        
        /// <summary>
        /// Gets or Sets EnableConsole
        /// </summary>
        [DataMember(Name="EnableConsole", EmitDefaultValue=false)]
        public bool EnableConsole { get; set; }

        /// <summary>
        /// Gets or Sets ConsoleLevel
        /// </summary>
        [DataMember(Name="ConsoleLevel", EmitDefaultValue=false)]
        public bool ConsoleLevel { get; set; }

        /// <summary>
        /// Gets or Sets EnableFile
        /// </summary>
        [DataMember(Name="EnableFile", EmitDefaultValue=false)]
        public bool EnableFile { get; set; }

        /// <summary>
        /// Gets or Sets FileLevel
        /// </summary>
        [DataMember(Name="FileLevel", EmitDefaultValue=false)]
        public bool FileLevel { get; set; }

        /// <summary>
        /// Gets or Sets FileLocation
        /// </summary>
        [DataMember(Name="FileLocation", EmitDefaultValue=false)]
        public bool FileLocation { get; set; }

        /// <summary>
        /// Gets or Sets EnableWebhookDebugging
        /// </summary>
        [DataMember(Name="EnableWebhookDebugging", EmitDefaultValue=false)]
        public bool EnableWebhookDebugging { get; set; }

        /// <summary>
        /// Gets or Sets EnableDiagnostics
        /// </summary>
        [DataMember(Name="EnableDiagnostics", EmitDefaultValue=false)]
        public bool EnableDiagnostics { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvironmentConfigLogSettings {\n");
            sb.Append("  EnableConsole: ").Append(EnableConsole).Append("\n");
            sb.Append("  ConsoleLevel: ").Append(ConsoleLevel).Append("\n");
            sb.Append("  EnableFile: ").Append(EnableFile).Append("\n");
            sb.Append("  FileLevel: ").Append(FileLevel).Append("\n");
            sb.Append("  FileLocation: ").Append(FileLocation).Append("\n");
            sb.Append("  EnableWebhookDebugging: ").Append(EnableWebhookDebugging).Append("\n");
            sb.Append("  EnableDiagnostics: ").Append(EnableDiagnostics).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnvironmentConfigLogSettings);
        }

        /// <summary>
        /// Returns true if EnvironmentConfigLogSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of EnvironmentConfigLogSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvironmentConfigLogSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EnableConsole == input.EnableConsole ||
                    this.EnableConsole.Equals(input.EnableConsole)
                ) && 
                (
                    this.ConsoleLevel == input.ConsoleLevel ||
                    this.ConsoleLevel.Equals(input.ConsoleLevel)
                ) && 
                (
                    this.EnableFile == input.EnableFile ||
                    this.EnableFile.Equals(input.EnableFile)
                ) && 
                (
                    this.FileLevel == input.FileLevel ||
                    this.FileLevel.Equals(input.FileLevel)
                ) && 
                (
                    this.FileLocation == input.FileLocation ||
                    this.FileLocation.Equals(input.FileLocation)
                ) && 
                (
                    this.EnableWebhookDebugging == input.EnableWebhookDebugging ||
                    this.EnableWebhookDebugging.Equals(input.EnableWebhookDebugging)
                ) && 
                (
                    this.EnableDiagnostics == input.EnableDiagnostics ||
                    this.EnableDiagnostics.Equals(input.EnableDiagnostics)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.EnableConsole.GetHashCode();
                hashCode = hashCode * 59 + this.ConsoleLevel.GetHashCode();
                hashCode = hashCode * 59 + this.EnableFile.GetHashCode();
                hashCode = hashCode * 59 + this.FileLevel.GetHashCode();
                hashCode = hashCode * 59 + this.FileLocation.GetHashCode();
                hashCode = hashCode * 59 + this.EnableWebhookDebugging.GetHashCode();
                hashCode = hashCode * 59 + this.EnableDiagnostics.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
