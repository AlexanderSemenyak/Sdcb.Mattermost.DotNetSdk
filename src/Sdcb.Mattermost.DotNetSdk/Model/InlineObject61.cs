/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// InlineObject61
    /// </summary>
    [DataContract]
    public partial class InlineObject61 :  IEquatable<InlineObject61>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject61" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject61() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject61" /> class.
        /// </summary>
        /// <param name="triggerId">Trigger ID provided by other action (required).</param>
        /// <param name="url">The URL to send the submitted dialog payload to (required).</param>
        /// <param name="dialog">dialog (required).</param>
        public InlineObject61(string triggerId = default(string), string url = default(string), ActionsDialogsOpenDialog dialog = default(ActionsDialogsOpenDialog))
        {
            // to ensure "triggerId" is required (not null)
            if (triggerId == null)
            {
                throw new InvalidDataException("triggerId is a required property for InlineObject61 and cannot be null");
            }
            else
            {
                this.TriggerId = triggerId;
            }

            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for InlineObject61 and cannot be null");
            }
            else
            {
                this.Url = url;
            }

            // to ensure "dialog" is required (not null)
            if (dialog == null)
            {
                throw new InvalidDataException("dialog is a required property for InlineObject61 and cannot be null");
            }
            else
            {
                this.Dialog = dialog;
            }

        }
        
        /// <summary>
        /// Trigger ID provided by other action
        /// </summary>
        /// <value>Trigger ID provided by other action</value>
        [DataMember(Name="trigger_id", EmitDefaultValue=false)]
        public string TriggerId { get; set; }

        /// <summary>
        /// The URL to send the submitted dialog payload to
        /// </summary>
        /// <value>The URL to send the submitted dialog payload to</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Dialog
        /// </summary>
        [DataMember(Name="dialog", EmitDefaultValue=false)]
        public ActionsDialogsOpenDialog Dialog { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject61 {\n");
            sb.Append("  TriggerId: ").Append(TriggerId).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Dialog: ").Append(Dialog).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject61);
        }

        /// <summary>
        /// Returns true if InlineObject61 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject61 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject61 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TriggerId == input.TriggerId ||
                    (this.TriggerId != null &&
                    this.TriggerId.Equals(input.TriggerId))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Dialog == input.Dialog ||
                    (this.Dialog != null &&
                    this.Dialog.Equals(input.Dialog))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TriggerId != null)
                    hashCode = hashCode * 59 + this.TriggerId.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Dialog != null)
                    hashCode = hashCode * 59 + this.Dialog.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
