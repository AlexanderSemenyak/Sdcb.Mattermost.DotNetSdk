/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// InlineObject43
    /// </summary>
    [DataContract]
    public partial class InlineObject43 :  IEquatable<InlineObject43>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject43" /> class.
        /// </summary>
        [JsonConstructor]
        protected InlineObject43() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject43" /> class.
        /// </summary>
        /// <param name="id">ID of the post to update (required).</param>
        /// <param name="isPinned">Set to &#x60;true&#x60; to pin the post to the channel it is in.</param>
        /// <param name="message">The message text of the post.</param>
        /// <param name="hasReactions">Set to &#x60;true&#x60; if the post has reactions to it.</param>
        /// <param name="props">A general JSON property bag to attach to the post.</param>
        public InlineObject43(string id = default(string), bool isPinned = default(bool), string message = default(string), bool hasReactions = default(bool), string props = default(string))
        {
            // to ensure "id" is required (not null)
            if (id == null)
            {
                throw new InvalidDataException("id is a required property for InlineObject43 and cannot be null");
            }
            else
            {
                this.Id = id;
            }

            this.IsPinned = isPinned;
            this.Message = message;
            this.HasReactions = hasReactions;
            this.Props = props;
        }
        
        /// <summary>
        /// ID of the post to update
        /// </summary>
        /// <value>ID of the post to update</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Set to &#x60;true&#x60; to pin the post to the channel it is in
        /// </summary>
        /// <value>Set to &#x60;true&#x60; to pin the post to the channel it is in</value>
        [DataMember(Name="is_pinned", EmitDefaultValue=false)]
        public bool IsPinned { get; set; }

        /// <summary>
        /// The message text of the post
        /// </summary>
        /// <value>The message text of the post</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Set to &#x60;true&#x60; if the post has reactions to it
        /// </summary>
        /// <value>Set to &#x60;true&#x60; if the post has reactions to it</value>
        [DataMember(Name="has_reactions", EmitDefaultValue=false)]
        public bool HasReactions { get; set; }

        /// <summary>
        /// A general JSON property bag to attach to the post
        /// </summary>
        /// <value>A general JSON property bag to attach to the post</value>
        [DataMember(Name="props", EmitDefaultValue=false)]
        public string Props { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject43 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsPinned: ").Append(IsPinned).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  HasReactions: ").Append(HasReactions).Append("\n");
            sb.Append("  Props: ").Append(Props).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject43);
        }

        /// <summary>
        /// Returns true if InlineObject43 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject43 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject43 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.IsPinned == input.IsPinned ||
                    this.IsPinned.Equals(input.IsPinned)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.HasReactions == input.HasReactions ||
                    this.HasReactions.Equals(input.HasReactions)
                ) && 
                (
                    this.Props == input.Props ||
                    (this.Props != null &&
                    this.Props.Equals(input.Props))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.IsPinned.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                hashCode = hashCode * 59 + this.HasReactions.GetHashCode();
                if (this.Props != null)
                    hashCode = hashCode * 59 + this.Props.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
