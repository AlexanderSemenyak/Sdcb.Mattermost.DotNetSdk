/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// InlineObject41
    /// </summary>
    [DataContract]
    public partial class InlineObject41 :  IEquatable<InlineObject41>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject41" /> class.
        /// </summary>
        [JsonConstructor]
        protected InlineObject41() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject41" /> class.
        /// </summary>
        /// <param name="channelId">The channel ID to post in (required).</param>
        /// <param name="message">The message contents, can be formatted with Markdown (required).</param>
        /// <param name="rootId">The post ID to comment on.</param>
        /// <param name="fileIds">A list of file IDs to associate with the post. Note that posts are limited to 5 files maximum. Please use additional posts for more files..</param>
        /// <param name="props">A general JSON property bag to attach to the post.</param>
        public InlineObject41(string channelId = default(string), string message = default(string), string rootId = default(string), List<string> fileIds = default(List<string>), object props = default(object))
        {
            // to ensure "channelId" is required (not null)
            if (channelId == null)
            {
                throw new InvalidDataException("channelId is a required property for InlineObject41 and cannot be null");
            }
            else
            {
                this.ChannelId = channelId;
            }

            // to ensure "message" is required (not null)
            if (message == null)
            {
                throw new InvalidDataException("message is a required property for InlineObject41 and cannot be null");
            }
            else
            {
                this.Message = message;
            }

            this.RootId = rootId;
            this.FileIds = fileIds;
            this.Props = props;
        }
        
        /// <summary>
        /// The channel ID to post in
        /// </summary>
        /// <value>The channel ID to post in</value>
        [DataMember(Name="channel_id", EmitDefaultValue=false)]
        public string ChannelId { get; set; }

        /// <summary>
        /// The message contents, can be formatted with Markdown
        /// </summary>
        /// <value>The message contents, can be formatted with Markdown</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// The post ID to comment on
        /// </summary>
        /// <value>The post ID to comment on</value>
        [DataMember(Name="root_id", EmitDefaultValue=false)]
        public string RootId { get; set; }

        /// <summary>
        /// A list of file IDs to associate with the post. Note that posts are limited to 5 files maximum. Please use additional posts for more files.
        /// </summary>
        /// <value>A list of file IDs to associate with the post. Note that posts are limited to 5 files maximum. Please use additional posts for more files.</value>
        [DataMember(Name="file_ids", EmitDefaultValue=false)]
        public List<string> FileIds { get; set; }

        /// <summary>
        /// A general JSON property bag to attach to the post
        /// </summary>
        /// <value>A general JSON property bag to attach to the post</value>
        [DataMember(Name="props", EmitDefaultValue=false)]
        public object Props { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject41 {\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  RootId: ").Append(RootId).Append("\n");
            sb.Append("  FileIds: ").Append(FileIds).Append("\n");
            sb.Append("  Props: ").Append(Props).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject41);
        }

        /// <summary>
        /// Returns true if InlineObject41 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject41 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject41 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.RootId == input.RootId ||
                    (this.RootId != null &&
                    this.RootId.Equals(input.RootId))
                ) && 
                (
                    this.FileIds == input.FileIds ||
                    this.FileIds != null &&
                    input.FileIds != null &&
                    this.FileIds.SequenceEqual(input.FileIds)
                ) && 
                (
                    this.Props == input.Props ||
                    (this.Props != null &&
                    this.Props.Equals(input.Props))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelId != null)
                    hashCode = hashCode * 59 + this.ChannelId.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.RootId != null)
                    hashCode = hashCode * 59 + this.RootId.GetHashCode();
                if (this.FileIds != null)
                    hashCode = hashCode * 59 + this.FileIds.GetHashCode();
                if (this.Props != null)
                    hashCode = hashCode * 59 + this.Props.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
