/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// InlineObject15
    /// </summary>
    [DataContract]
    public partial class InlineObject15 :  IEquatable<InlineObject15>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject15" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject15() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject15" /> class.
        /// </summary>
        /// <param name="currentService">The service the user currently uses to login (required).</param>
        /// <param name="newService">The service the user will use to login (required).</param>
        /// <param name="email">The email of the user.</param>
        /// <param name="password">The password used with the current service.</param>
        /// <param name="mfaCode">The MFA code of the current service.</param>
        /// <param name="ldapId">The LDAP/AD id of the user.</param>
        public InlineObject15(string currentService = default(string), string newService = default(string), string email = default(string), string password = default(string), string mfaCode = default(string), string ldapId = default(string))
        {
            // to ensure "currentService" is required (not null)
            if (currentService == null)
            {
                throw new InvalidDataException("currentService is a required property for InlineObject15 and cannot be null");
            }
            else
            {
                this.CurrentService = currentService;
            }

            // to ensure "newService" is required (not null)
            if (newService == null)
            {
                throw new InvalidDataException("newService is a required property for InlineObject15 and cannot be null");
            }
            else
            {
                this.NewService = newService;
            }

            this.Email = email;
            this.Password = password;
            this.MfaCode = mfaCode;
            this.LdapId = ldapId;
        }
        
        /// <summary>
        /// The service the user currently uses to login
        /// </summary>
        /// <value>The service the user currently uses to login</value>
        [DataMember(Name="current_service", EmitDefaultValue=false)]
        public string CurrentService { get; set; }

        /// <summary>
        /// The service the user will use to login
        /// </summary>
        /// <value>The service the user will use to login</value>
        [DataMember(Name="new_service", EmitDefaultValue=false)]
        public string NewService { get; set; }

        /// <summary>
        /// The email of the user
        /// </summary>
        /// <value>The email of the user</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// The password used with the current service
        /// </summary>
        /// <value>The password used with the current service</value>
        [DataMember(Name="password", EmitDefaultValue=false)]
        public string Password { get; set; }

        /// <summary>
        /// The MFA code of the current service
        /// </summary>
        /// <value>The MFA code of the current service</value>
        [DataMember(Name="mfa_code", EmitDefaultValue=false)]
        public string MfaCode { get; set; }

        /// <summary>
        /// The LDAP/AD id of the user
        /// </summary>
        /// <value>The LDAP/AD id of the user</value>
        [DataMember(Name="ldap_id", EmitDefaultValue=false)]
        public string LdapId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject15 {\n");
            sb.Append("  CurrentService: ").Append(CurrentService).Append("\n");
            sb.Append("  NewService: ").Append(NewService).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  MfaCode: ").Append(MfaCode).Append("\n");
            sb.Append("  LdapId: ").Append(LdapId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject15);
        }

        /// <summary>
        /// Returns true if InlineObject15 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject15 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject15 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CurrentService == input.CurrentService ||
                    (this.CurrentService != null &&
                    this.CurrentService.Equals(input.CurrentService))
                ) && 
                (
                    this.NewService == input.NewService ||
                    (this.NewService != null &&
                    this.NewService.Equals(input.NewService))
                ) && 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Password == input.Password ||
                    (this.Password != null &&
                    this.Password.Equals(input.Password))
                ) && 
                (
                    this.MfaCode == input.MfaCode ||
                    (this.MfaCode != null &&
                    this.MfaCode.Equals(input.MfaCode))
                ) && 
                (
                    this.LdapId == input.LdapId ||
                    (this.LdapId != null &&
                    this.LdapId.Equals(input.LdapId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CurrentService != null)
                    hashCode = hashCode * 59 + this.CurrentService.GetHashCode();
                if (this.NewService != null)
                    hashCode = hashCode * 59 + this.NewService.GetHashCode();
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Password != null)
                    hashCode = hashCode * 59 + this.Password.GetHashCode();
                if (this.MfaCode != null)
                    hashCode = hashCode * 59 + this.MfaCode.GetHashCode();
                if (this.LdapId != null)
                    hashCode = hashCode * 59 + this.LdapId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
