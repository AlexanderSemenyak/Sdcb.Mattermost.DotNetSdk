/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// EnvironmentConfigTeamSettings
    /// </summary>
    [DataContract]
    public partial class EnvironmentConfigTeamSettings :  IEquatable<EnvironmentConfigTeamSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentConfigTeamSettings" /> class.
        /// </summary>
        /// <param name="siteName">siteName.</param>
        /// <param name="maxUsersPerTeam">maxUsersPerTeam.</param>
        /// <param name="enableTeamCreation">enableTeamCreation.</param>
        /// <param name="enableUserCreation">enableUserCreation.</param>
        /// <param name="enableOpenServer">enableOpenServer.</param>
        /// <param name="restrictCreationToDomains">restrictCreationToDomains.</param>
        /// <param name="enableCustomBrand">enableCustomBrand.</param>
        /// <param name="customBrandText">customBrandText.</param>
        /// <param name="customDescriptionText">customDescriptionText.</param>
        /// <param name="restrictDirectMessage">restrictDirectMessage.</param>
        /// <param name="restrictTeamInvite">restrictTeamInvite.</param>
        /// <param name="restrictPublicChannelManagement">restrictPublicChannelManagement.</param>
        /// <param name="restrictPrivateChannelManagement">restrictPrivateChannelManagement.</param>
        /// <param name="restrictPublicChannelCreation">restrictPublicChannelCreation.</param>
        /// <param name="restrictPrivateChannelCreation">restrictPrivateChannelCreation.</param>
        /// <param name="restrictPublicChannelDeletion">restrictPublicChannelDeletion.</param>
        /// <param name="restrictPrivateChannelDeletion">restrictPrivateChannelDeletion.</param>
        /// <param name="userStatusAwayTimeout">userStatusAwayTimeout.</param>
        /// <param name="maxChannelsPerTeam">maxChannelsPerTeam.</param>
        /// <param name="maxNotificationsPerChannel">maxNotificationsPerChannel.</param>
        public EnvironmentConfigTeamSettings(bool siteName = default(bool), bool maxUsersPerTeam = default(bool), bool enableTeamCreation = default(bool), bool enableUserCreation = default(bool), bool enableOpenServer = default(bool), bool restrictCreationToDomains = default(bool), bool enableCustomBrand = default(bool), bool customBrandText = default(bool), bool customDescriptionText = default(bool), bool restrictDirectMessage = default(bool), bool restrictTeamInvite = default(bool), bool restrictPublicChannelManagement = default(bool), bool restrictPrivateChannelManagement = default(bool), bool restrictPublicChannelCreation = default(bool), bool restrictPrivateChannelCreation = default(bool), bool restrictPublicChannelDeletion = default(bool), bool restrictPrivateChannelDeletion = default(bool), bool userStatusAwayTimeout = default(bool), bool maxChannelsPerTeam = default(bool), bool maxNotificationsPerChannel = default(bool))
        {
            this.SiteName = siteName;
            this.MaxUsersPerTeam = maxUsersPerTeam;
            this.EnableTeamCreation = enableTeamCreation;
            this.EnableUserCreation = enableUserCreation;
            this.EnableOpenServer = enableOpenServer;
            this.RestrictCreationToDomains = restrictCreationToDomains;
            this.EnableCustomBrand = enableCustomBrand;
            this.CustomBrandText = customBrandText;
            this.CustomDescriptionText = customDescriptionText;
            this.RestrictDirectMessage = restrictDirectMessage;
            this.RestrictTeamInvite = restrictTeamInvite;
            this.RestrictPublicChannelManagement = restrictPublicChannelManagement;
            this.RestrictPrivateChannelManagement = restrictPrivateChannelManagement;
            this.RestrictPublicChannelCreation = restrictPublicChannelCreation;
            this.RestrictPrivateChannelCreation = restrictPrivateChannelCreation;
            this.RestrictPublicChannelDeletion = restrictPublicChannelDeletion;
            this.RestrictPrivateChannelDeletion = restrictPrivateChannelDeletion;
            this.UserStatusAwayTimeout = userStatusAwayTimeout;
            this.MaxChannelsPerTeam = maxChannelsPerTeam;
            this.MaxNotificationsPerChannel = maxNotificationsPerChannel;
        }
        
        /// <summary>
        /// Gets or Sets SiteName
        /// </summary>
        [DataMember(Name="SiteName", EmitDefaultValue=false)]
        public bool SiteName { get; set; }

        /// <summary>
        /// Gets or Sets MaxUsersPerTeam
        /// </summary>
        [DataMember(Name="MaxUsersPerTeam", EmitDefaultValue=false)]
        public bool MaxUsersPerTeam { get; set; }

        /// <summary>
        /// Gets or Sets EnableTeamCreation
        /// </summary>
        [DataMember(Name="EnableTeamCreation", EmitDefaultValue=false)]
        public bool EnableTeamCreation { get; set; }

        /// <summary>
        /// Gets or Sets EnableUserCreation
        /// </summary>
        [DataMember(Name="EnableUserCreation", EmitDefaultValue=false)]
        public bool EnableUserCreation { get; set; }

        /// <summary>
        /// Gets or Sets EnableOpenServer
        /// </summary>
        [DataMember(Name="EnableOpenServer", EmitDefaultValue=false)]
        public bool EnableOpenServer { get; set; }

        /// <summary>
        /// Gets or Sets RestrictCreationToDomains
        /// </summary>
        [DataMember(Name="RestrictCreationToDomains", EmitDefaultValue=false)]
        public bool RestrictCreationToDomains { get; set; }

        /// <summary>
        /// Gets or Sets EnableCustomBrand
        /// </summary>
        [DataMember(Name="EnableCustomBrand", EmitDefaultValue=false)]
        public bool EnableCustomBrand { get; set; }

        /// <summary>
        /// Gets or Sets CustomBrandText
        /// </summary>
        [DataMember(Name="CustomBrandText", EmitDefaultValue=false)]
        public bool CustomBrandText { get; set; }

        /// <summary>
        /// Gets or Sets CustomDescriptionText
        /// </summary>
        [DataMember(Name="CustomDescriptionText", EmitDefaultValue=false)]
        public bool CustomDescriptionText { get; set; }

        /// <summary>
        /// Gets or Sets RestrictDirectMessage
        /// </summary>
        [DataMember(Name="RestrictDirectMessage", EmitDefaultValue=false)]
        public bool RestrictDirectMessage { get; set; }

        /// <summary>
        /// Gets or Sets RestrictTeamInvite
        /// </summary>
        [DataMember(Name="RestrictTeamInvite", EmitDefaultValue=false)]
        public bool RestrictTeamInvite { get; set; }

        /// <summary>
        /// Gets or Sets RestrictPublicChannelManagement
        /// </summary>
        [DataMember(Name="RestrictPublicChannelManagement", EmitDefaultValue=false)]
        public bool RestrictPublicChannelManagement { get; set; }

        /// <summary>
        /// Gets or Sets RestrictPrivateChannelManagement
        /// </summary>
        [DataMember(Name="RestrictPrivateChannelManagement", EmitDefaultValue=false)]
        public bool RestrictPrivateChannelManagement { get; set; }

        /// <summary>
        /// Gets or Sets RestrictPublicChannelCreation
        /// </summary>
        [DataMember(Name="RestrictPublicChannelCreation", EmitDefaultValue=false)]
        public bool RestrictPublicChannelCreation { get; set; }

        /// <summary>
        /// Gets or Sets RestrictPrivateChannelCreation
        /// </summary>
        [DataMember(Name="RestrictPrivateChannelCreation", EmitDefaultValue=false)]
        public bool RestrictPrivateChannelCreation { get; set; }

        /// <summary>
        /// Gets or Sets RestrictPublicChannelDeletion
        /// </summary>
        [DataMember(Name="RestrictPublicChannelDeletion", EmitDefaultValue=false)]
        public bool RestrictPublicChannelDeletion { get; set; }

        /// <summary>
        /// Gets or Sets RestrictPrivateChannelDeletion
        /// </summary>
        [DataMember(Name="RestrictPrivateChannelDeletion", EmitDefaultValue=false)]
        public bool RestrictPrivateChannelDeletion { get; set; }

        /// <summary>
        /// Gets or Sets UserStatusAwayTimeout
        /// </summary>
        [DataMember(Name="UserStatusAwayTimeout", EmitDefaultValue=false)]
        public bool UserStatusAwayTimeout { get; set; }

        /// <summary>
        /// Gets or Sets MaxChannelsPerTeam
        /// </summary>
        [DataMember(Name="MaxChannelsPerTeam", EmitDefaultValue=false)]
        public bool MaxChannelsPerTeam { get; set; }

        /// <summary>
        /// Gets or Sets MaxNotificationsPerChannel
        /// </summary>
        [DataMember(Name="MaxNotificationsPerChannel", EmitDefaultValue=false)]
        public bool MaxNotificationsPerChannel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvironmentConfigTeamSettings {\n");
            sb.Append("  SiteName: ").Append(SiteName).Append("\n");
            sb.Append("  MaxUsersPerTeam: ").Append(MaxUsersPerTeam).Append("\n");
            sb.Append("  EnableTeamCreation: ").Append(EnableTeamCreation).Append("\n");
            sb.Append("  EnableUserCreation: ").Append(EnableUserCreation).Append("\n");
            sb.Append("  EnableOpenServer: ").Append(EnableOpenServer).Append("\n");
            sb.Append("  RestrictCreationToDomains: ").Append(RestrictCreationToDomains).Append("\n");
            sb.Append("  EnableCustomBrand: ").Append(EnableCustomBrand).Append("\n");
            sb.Append("  CustomBrandText: ").Append(CustomBrandText).Append("\n");
            sb.Append("  CustomDescriptionText: ").Append(CustomDescriptionText).Append("\n");
            sb.Append("  RestrictDirectMessage: ").Append(RestrictDirectMessage).Append("\n");
            sb.Append("  RestrictTeamInvite: ").Append(RestrictTeamInvite).Append("\n");
            sb.Append("  RestrictPublicChannelManagement: ").Append(RestrictPublicChannelManagement).Append("\n");
            sb.Append("  RestrictPrivateChannelManagement: ").Append(RestrictPrivateChannelManagement).Append("\n");
            sb.Append("  RestrictPublicChannelCreation: ").Append(RestrictPublicChannelCreation).Append("\n");
            sb.Append("  RestrictPrivateChannelCreation: ").Append(RestrictPrivateChannelCreation).Append("\n");
            sb.Append("  RestrictPublicChannelDeletion: ").Append(RestrictPublicChannelDeletion).Append("\n");
            sb.Append("  RestrictPrivateChannelDeletion: ").Append(RestrictPrivateChannelDeletion).Append("\n");
            sb.Append("  UserStatusAwayTimeout: ").Append(UserStatusAwayTimeout).Append("\n");
            sb.Append("  MaxChannelsPerTeam: ").Append(MaxChannelsPerTeam).Append("\n");
            sb.Append("  MaxNotificationsPerChannel: ").Append(MaxNotificationsPerChannel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnvironmentConfigTeamSettings);
        }

        /// <summary>
        /// Returns true if EnvironmentConfigTeamSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of EnvironmentConfigTeamSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvironmentConfigTeamSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SiteName == input.SiteName ||
                    this.SiteName.Equals(input.SiteName)
                ) && 
                (
                    this.MaxUsersPerTeam == input.MaxUsersPerTeam ||
                    this.MaxUsersPerTeam.Equals(input.MaxUsersPerTeam)
                ) && 
                (
                    this.EnableTeamCreation == input.EnableTeamCreation ||
                    this.EnableTeamCreation.Equals(input.EnableTeamCreation)
                ) && 
                (
                    this.EnableUserCreation == input.EnableUserCreation ||
                    this.EnableUserCreation.Equals(input.EnableUserCreation)
                ) && 
                (
                    this.EnableOpenServer == input.EnableOpenServer ||
                    this.EnableOpenServer.Equals(input.EnableOpenServer)
                ) && 
                (
                    this.RestrictCreationToDomains == input.RestrictCreationToDomains ||
                    this.RestrictCreationToDomains.Equals(input.RestrictCreationToDomains)
                ) && 
                (
                    this.EnableCustomBrand == input.EnableCustomBrand ||
                    this.EnableCustomBrand.Equals(input.EnableCustomBrand)
                ) && 
                (
                    this.CustomBrandText == input.CustomBrandText ||
                    this.CustomBrandText.Equals(input.CustomBrandText)
                ) && 
                (
                    this.CustomDescriptionText == input.CustomDescriptionText ||
                    this.CustomDescriptionText.Equals(input.CustomDescriptionText)
                ) && 
                (
                    this.RestrictDirectMessage == input.RestrictDirectMessage ||
                    this.RestrictDirectMessage.Equals(input.RestrictDirectMessage)
                ) && 
                (
                    this.RestrictTeamInvite == input.RestrictTeamInvite ||
                    this.RestrictTeamInvite.Equals(input.RestrictTeamInvite)
                ) && 
                (
                    this.RestrictPublicChannelManagement == input.RestrictPublicChannelManagement ||
                    this.RestrictPublicChannelManagement.Equals(input.RestrictPublicChannelManagement)
                ) && 
                (
                    this.RestrictPrivateChannelManagement == input.RestrictPrivateChannelManagement ||
                    this.RestrictPrivateChannelManagement.Equals(input.RestrictPrivateChannelManagement)
                ) && 
                (
                    this.RestrictPublicChannelCreation == input.RestrictPublicChannelCreation ||
                    this.RestrictPublicChannelCreation.Equals(input.RestrictPublicChannelCreation)
                ) && 
                (
                    this.RestrictPrivateChannelCreation == input.RestrictPrivateChannelCreation ||
                    this.RestrictPrivateChannelCreation.Equals(input.RestrictPrivateChannelCreation)
                ) && 
                (
                    this.RestrictPublicChannelDeletion == input.RestrictPublicChannelDeletion ||
                    this.RestrictPublicChannelDeletion.Equals(input.RestrictPublicChannelDeletion)
                ) && 
                (
                    this.RestrictPrivateChannelDeletion == input.RestrictPrivateChannelDeletion ||
                    this.RestrictPrivateChannelDeletion.Equals(input.RestrictPrivateChannelDeletion)
                ) && 
                (
                    this.UserStatusAwayTimeout == input.UserStatusAwayTimeout ||
                    this.UserStatusAwayTimeout.Equals(input.UserStatusAwayTimeout)
                ) && 
                (
                    this.MaxChannelsPerTeam == input.MaxChannelsPerTeam ||
                    this.MaxChannelsPerTeam.Equals(input.MaxChannelsPerTeam)
                ) && 
                (
                    this.MaxNotificationsPerChannel == input.MaxNotificationsPerChannel ||
                    this.MaxNotificationsPerChannel.Equals(input.MaxNotificationsPerChannel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.SiteName.GetHashCode();
                hashCode = hashCode * 59 + this.MaxUsersPerTeam.GetHashCode();
                hashCode = hashCode * 59 + this.EnableTeamCreation.GetHashCode();
                hashCode = hashCode * 59 + this.EnableUserCreation.GetHashCode();
                hashCode = hashCode * 59 + this.EnableOpenServer.GetHashCode();
                hashCode = hashCode * 59 + this.RestrictCreationToDomains.GetHashCode();
                hashCode = hashCode * 59 + this.EnableCustomBrand.GetHashCode();
                hashCode = hashCode * 59 + this.CustomBrandText.GetHashCode();
                hashCode = hashCode * 59 + this.CustomDescriptionText.GetHashCode();
                hashCode = hashCode * 59 + this.RestrictDirectMessage.GetHashCode();
                hashCode = hashCode * 59 + this.RestrictTeamInvite.GetHashCode();
                hashCode = hashCode * 59 + this.RestrictPublicChannelManagement.GetHashCode();
                hashCode = hashCode * 59 + this.RestrictPrivateChannelManagement.GetHashCode();
                hashCode = hashCode * 59 + this.RestrictPublicChannelCreation.GetHashCode();
                hashCode = hashCode * 59 + this.RestrictPrivateChannelCreation.GetHashCode();
                hashCode = hashCode * 59 + this.RestrictPublicChannelDeletion.GetHashCode();
                hashCode = hashCode * 59 + this.RestrictPrivateChannelDeletion.GetHashCode();
                hashCode = hashCode * 59 + this.UserStatusAwayTimeout.GetHashCode();
                hashCode = hashCode * 59 + this.MaxChannelsPerTeam.GetHashCode();
                hashCode = hashCode * 59 + this.MaxNotificationsPerChannel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
