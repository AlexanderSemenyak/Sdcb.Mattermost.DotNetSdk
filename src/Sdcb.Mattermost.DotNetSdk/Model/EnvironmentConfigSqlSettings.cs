/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// EnvironmentConfigSqlSettings
    /// </summary>
    [DataContract]
    public partial class EnvironmentConfigSqlSettings :  IEquatable<EnvironmentConfigSqlSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentConfigSqlSettings" /> class.
        /// </summary>
        /// <param name="driverName">driverName.</param>
        /// <param name="dataSource">dataSource.</param>
        /// <param name="dataSourceReplicas">dataSourceReplicas.</param>
        /// <param name="maxIdleConns">maxIdleConns.</param>
        /// <param name="maxOpenConns">maxOpenConns.</param>
        /// <param name="trace">trace.</param>
        /// <param name="atRestEncryptKey">atRestEncryptKey.</param>
        public EnvironmentConfigSqlSettings(bool driverName = default(bool), bool dataSource = default(bool), bool dataSourceReplicas = default(bool), bool maxIdleConns = default(bool), bool maxOpenConns = default(bool), bool trace = default(bool), bool atRestEncryptKey = default(bool))
        {
            this.DriverName = driverName;
            this.DataSource = dataSource;
            this.DataSourceReplicas = dataSourceReplicas;
            this.MaxIdleConns = maxIdleConns;
            this.MaxOpenConns = maxOpenConns;
            this.Trace = trace;
            this.AtRestEncryptKey = atRestEncryptKey;
        }
        
        /// <summary>
        /// Gets or Sets DriverName
        /// </summary>
        [DataMember(Name="DriverName", EmitDefaultValue=false)]
        public bool DriverName { get; set; }

        /// <summary>
        /// Gets or Sets DataSource
        /// </summary>
        [DataMember(Name="DataSource", EmitDefaultValue=false)]
        public bool DataSource { get; set; }

        /// <summary>
        /// Gets or Sets DataSourceReplicas
        /// </summary>
        [DataMember(Name="DataSourceReplicas", EmitDefaultValue=false)]
        public bool DataSourceReplicas { get; set; }

        /// <summary>
        /// Gets or Sets MaxIdleConns
        /// </summary>
        [DataMember(Name="MaxIdleConns", EmitDefaultValue=false)]
        public bool MaxIdleConns { get; set; }

        /// <summary>
        /// Gets or Sets MaxOpenConns
        /// </summary>
        [DataMember(Name="MaxOpenConns", EmitDefaultValue=false)]
        public bool MaxOpenConns { get; set; }

        /// <summary>
        /// Gets or Sets Trace
        /// </summary>
        [DataMember(Name="Trace", EmitDefaultValue=false)]
        public bool Trace { get; set; }

        /// <summary>
        /// Gets or Sets AtRestEncryptKey
        /// </summary>
        [DataMember(Name="AtRestEncryptKey", EmitDefaultValue=false)]
        public bool AtRestEncryptKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvironmentConfigSqlSettings {\n");
            sb.Append("  DriverName: ").Append(DriverName).Append("\n");
            sb.Append("  DataSource: ").Append(DataSource).Append("\n");
            sb.Append("  DataSourceReplicas: ").Append(DataSourceReplicas).Append("\n");
            sb.Append("  MaxIdleConns: ").Append(MaxIdleConns).Append("\n");
            sb.Append("  MaxOpenConns: ").Append(MaxOpenConns).Append("\n");
            sb.Append("  Trace: ").Append(Trace).Append("\n");
            sb.Append("  AtRestEncryptKey: ").Append(AtRestEncryptKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnvironmentConfigSqlSettings);
        }

        /// <summary>
        /// Returns true if EnvironmentConfigSqlSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of EnvironmentConfigSqlSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvironmentConfigSqlSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DriverName == input.DriverName ||
                    this.DriverName.Equals(input.DriverName)
                ) && 
                (
                    this.DataSource == input.DataSource ||
                    this.DataSource.Equals(input.DataSource)
                ) && 
                (
                    this.DataSourceReplicas == input.DataSourceReplicas ||
                    this.DataSourceReplicas.Equals(input.DataSourceReplicas)
                ) && 
                (
                    this.MaxIdleConns == input.MaxIdleConns ||
                    this.MaxIdleConns.Equals(input.MaxIdleConns)
                ) && 
                (
                    this.MaxOpenConns == input.MaxOpenConns ||
                    this.MaxOpenConns.Equals(input.MaxOpenConns)
                ) && 
                (
                    this.Trace == input.Trace ||
                    this.Trace.Equals(input.Trace)
                ) && 
                (
                    this.AtRestEncryptKey == input.AtRestEncryptKey ||
                    this.AtRestEncryptKey.Equals(input.AtRestEncryptKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.DriverName.GetHashCode();
                hashCode = hashCode * 59 + this.DataSource.GetHashCode();
                hashCode = hashCode * 59 + this.DataSourceReplicas.GetHashCode();
                hashCode = hashCode * 59 + this.MaxIdleConns.GetHashCode();
                hashCode = hashCode * 59 + this.MaxOpenConns.GetHashCode();
                hashCode = hashCode * 59 + this.Trace.GetHashCode();
                hashCode = hashCode * 59 + this.AtRestEncryptKey.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
