/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// EnvironmentConfigComplianceSettings
    /// </summary>
    [DataContract]
    public partial class EnvironmentConfigComplianceSettings :  IEquatable<EnvironmentConfigComplianceSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentConfigComplianceSettings" /> class.
        /// </summary>
        /// <param name="enable">enable.</param>
        /// <param name="directory">directory.</param>
        /// <param name="enableDaily">enableDaily.</param>
        public EnvironmentConfigComplianceSettings(bool enable = default(bool), bool directory = default(bool), bool enableDaily = default(bool))
        {
            this.Enable = enable;
            this.Directory = directory;
            this.EnableDaily = enableDaily;
        }
        
        /// <summary>
        /// Gets or Sets Enable
        /// </summary>
        [DataMember(Name="Enable", EmitDefaultValue=false)]
        public bool Enable { get; set; }

        /// <summary>
        /// Gets or Sets Directory
        /// </summary>
        [DataMember(Name="Directory", EmitDefaultValue=false)]
        public bool Directory { get; set; }

        /// <summary>
        /// Gets or Sets EnableDaily
        /// </summary>
        [DataMember(Name="EnableDaily", EmitDefaultValue=false)]
        public bool EnableDaily { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvironmentConfigComplianceSettings {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("  EnableDaily: ").Append(EnableDaily).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnvironmentConfigComplianceSettings);
        }

        /// <summary>
        /// Returns true if EnvironmentConfigComplianceSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of EnvironmentConfigComplianceSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvironmentConfigComplianceSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Directory == input.Directory ||
                    this.Directory.Equals(input.Directory)
                ) && 
                (
                    this.EnableDaily == input.EnableDaily ||
                    this.EnableDaily.Equals(input.EnableDaily)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Enable.GetHashCode();
                hashCode = hashCode * 59 + this.Directory.GetHashCode();
                hashCode = hashCode * 59 + this.EnableDaily.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
