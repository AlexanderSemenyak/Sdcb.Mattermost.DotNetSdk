/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// EnvironmentConfigLocalizationSettings
    /// </summary>
    [DataContract]
    public partial class EnvironmentConfigLocalizationSettings :  IEquatable<EnvironmentConfigLocalizationSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentConfigLocalizationSettings" /> class.
        /// </summary>
        /// <param name="defaultServerLocale">defaultServerLocale.</param>
        /// <param name="defaultClientLocale">defaultClientLocale.</param>
        /// <param name="availableLocales">availableLocales.</param>
        public EnvironmentConfigLocalizationSettings(bool defaultServerLocale = default(bool), bool defaultClientLocale = default(bool), bool availableLocales = default(bool))
        {
            this.DefaultServerLocale = defaultServerLocale;
            this.DefaultClientLocale = defaultClientLocale;
            this.AvailableLocales = availableLocales;
        }
        
        /// <summary>
        /// Gets or Sets DefaultServerLocale
        /// </summary>
        [DataMember(Name="DefaultServerLocale", EmitDefaultValue=false)]
        public bool DefaultServerLocale { get; set; }

        /// <summary>
        /// Gets or Sets DefaultClientLocale
        /// </summary>
        [DataMember(Name="DefaultClientLocale", EmitDefaultValue=false)]
        public bool DefaultClientLocale { get; set; }

        /// <summary>
        /// Gets or Sets AvailableLocales
        /// </summary>
        [DataMember(Name="AvailableLocales", EmitDefaultValue=false)]
        public bool AvailableLocales { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvironmentConfigLocalizationSettings {\n");
            sb.Append("  DefaultServerLocale: ").Append(DefaultServerLocale).Append("\n");
            sb.Append("  DefaultClientLocale: ").Append(DefaultClientLocale).Append("\n");
            sb.Append("  AvailableLocales: ").Append(AvailableLocales).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnvironmentConfigLocalizationSettings);
        }

        /// <summary>
        /// Returns true if EnvironmentConfigLocalizationSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of EnvironmentConfigLocalizationSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvironmentConfigLocalizationSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DefaultServerLocale == input.DefaultServerLocale ||
                    this.DefaultServerLocale.Equals(input.DefaultServerLocale)
                ) && 
                (
                    this.DefaultClientLocale == input.DefaultClientLocale ||
                    this.DefaultClientLocale.Equals(input.DefaultClientLocale)
                ) && 
                (
                    this.AvailableLocales == input.AvailableLocales ||
                    this.AvailableLocales.Equals(input.AvailableLocales)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.DefaultServerLocale.GetHashCode();
                hashCode = hashCode * 59 + this.DefaultClientLocale.GetHashCode();
                hashCode = hashCode * 59 + this.AvailableLocales.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
