/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// PostListWithSearchMatches
    /// </summary>
    [DataContract]
    public partial class PostListWithSearchMatches :  IEquatable<PostListWithSearchMatches>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostListWithSearchMatches" /> class.
        /// </summary>
        /// <param name="order">order.</param>
        /// <param name="posts">posts.</param>
        /// <param name="matches">A mapping of post IDs to a list of matched terms within the post. This field will only be populated on servers running version 5.1 or greater with Elasticsearch enabled..</param>
        public PostListWithSearchMatches(List<string> order = default(List<string>), Dictionary<string, Post> posts = default(Dictionary<string, Post>), Dictionary<string, List<string>> matches = default(Dictionary<string, List<string>>))
        {
            this.Order = order;
            this.Posts = posts;
            this.Matches = matches;
        }
        
        /// <summary>
        /// Gets or Sets Order
        /// </summary>
        [DataMember(Name="order", EmitDefaultValue=false)]
        public List<string> Order { get; set; }

        /// <summary>
        /// Gets or Sets Posts
        /// </summary>
        [DataMember(Name="posts", EmitDefaultValue=false)]
        public Dictionary<string, Post> Posts { get; set; }

        /// <summary>
        /// A mapping of post IDs to a list of matched terms within the post. This field will only be populated on servers running version 5.1 or greater with Elasticsearch enabled.
        /// </summary>
        /// <value>A mapping of post IDs to a list of matched terms within the post. This field will only be populated on servers running version 5.1 or greater with Elasticsearch enabled.</value>
        [DataMember(Name="matches", EmitDefaultValue=false)]
        public Dictionary<string, List<string>> Matches { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostListWithSearchMatches {\n");
            sb.Append("  Order: ").Append(Order).Append("\n");
            sb.Append("  Posts: ").Append(Posts).Append("\n");
            sb.Append("  Matches: ").Append(Matches).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PostListWithSearchMatches);
        }

        /// <summary>
        /// Returns true if PostListWithSearchMatches instances are equal
        /// </summary>
        /// <param name="input">Instance of PostListWithSearchMatches to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostListWithSearchMatches input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Order == input.Order ||
                    this.Order != null &&
                    input.Order != null &&
                    this.Order.SequenceEqual(input.Order)
                ) && 
                (
                    this.Posts == input.Posts ||
                    this.Posts != null &&
                    input.Posts != null &&
                    this.Posts.SequenceEqual(input.Posts)
                ) && 
                (
                    this.Matches == input.Matches ||
                    this.Matches != null &&
                    input.Matches != null &&
                    this.Matches.SequenceEqual(input.Matches)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Order != null)
                    hashCode = hashCode * 59 + this.Order.GetHashCode();
                if (this.Posts != null)
                    hashCode = hashCode * 59 + this.Posts.GetHashCode();
                if (this.Matches != null)
                    hashCode = hashCode * 59 + this.Matches.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
