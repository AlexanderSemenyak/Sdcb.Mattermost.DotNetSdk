/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// Timezone
    /// </summary>
    [DataContract]
    public partial class Timezone :  IEquatable<Timezone>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Timezone" /> class.
        /// </summary>
        /// <param name="useAutomaticTimezone">Set to \&quot;true\&quot; to use the browser/system timezone, \&quot;false\&quot; to set manually. Defaults to \&quot;true\&quot;..</param>
        /// <param name="manualTimezone">Value when setting manually the timezone, i.e. \&quot;Europe/Berlin\&quot;..</param>
        /// <param name="automaticTimezone">This value is set automatically when the \&quot;useAutomaticTimezone\&quot; is set to \&quot;true\&quot;..</param>
        public Timezone(string useAutomaticTimezone = default(string), string manualTimezone = default(string), string automaticTimezone = default(string))
        {
            this.UseAutomaticTimezone = useAutomaticTimezone;
            this.ManualTimezone = manualTimezone;
            this.AutomaticTimezone = automaticTimezone;
        }
        
        /// <summary>
        /// Set to \&quot;true\&quot; to use the browser/system timezone, \&quot;false\&quot; to set manually. Defaults to \&quot;true\&quot;.
        /// </summary>
        /// <value>Set to \&quot;true\&quot; to use the browser/system timezone, \&quot;false\&quot; to set manually. Defaults to \&quot;true\&quot;.</value>
        [DataMember(Name="useAutomaticTimezone", EmitDefaultValue=false)]
        public string UseAutomaticTimezone { get; set; }

        /// <summary>
        /// Value when setting manually the timezone, i.e. \&quot;Europe/Berlin\&quot;.
        /// </summary>
        /// <value>Value when setting manually the timezone, i.e. \&quot;Europe/Berlin\&quot;.</value>
        [DataMember(Name="manualTimezone", EmitDefaultValue=false)]
        public string ManualTimezone { get; set; }

        /// <summary>
        /// This value is set automatically when the \&quot;useAutomaticTimezone\&quot; is set to \&quot;true\&quot;.
        /// </summary>
        /// <value>This value is set automatically when the \&quot;useAutomaticTimezone\&quot; is set to \&quot;true\&quot;.</value>
        [DataMember(Name="automaticTimezone", EmitDefaultValue=false)]
        public string AutomaticTimezone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Timezone {\n");
            sb.Append("  UseAutomaticTimezone: ").Append(UseAutomaticTimezone).Append("\n");
            sb.Append("  ManualTimezone: ").Append(ManualTimezone).Append("\n");
            sb.Append("  AutomaticTimezone: ").Append(AutomaticTimezone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Timezone);
        }

        /// <summary>
        /// Returns true if Timezone instances are equal
        /// </summary>
        /// <param name="input">Instance of Timezone to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Timezone input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.UseAutomaticTimezone == input.UseAutomaticTimezone ||
                    (this.UseAutomaticTimezone != null &&
                    this.UseAutomaticTimezone.Equals(input.UseAutomaticTimezone))
                ) && 
                (
                    this.ManualTimezone == input.ManualTimezone ||
                    (this.ManualTimezone != null &&
                    this.ManualTimezone.Equals(input.ManualTimezone))
                ) && 
                (
                    this.AutomaticTimezone == input.AutomaticTimezone ||
                    (this.AutomaticTimezone != null &&
                    this.AutomaticTimezone.Equals(input.AutomaticTimezone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.UseAutomaticTimezone != null)
                    hashCode = hashCode * 59 + this.UseAutomaticTimezone.GetHashCode();
                if (this.ManualTimezone != null)
                    hashCode = hashCode * 59 + this.ManualTimezone.GetHashCode();
                if (this.AutomaticTimezone != null)
                    hashCode = hashCode * 59 + this.AutomaticTimezone.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
