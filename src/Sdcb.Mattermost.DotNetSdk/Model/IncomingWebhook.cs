/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// IncomingWebhook
    /// </summary>
    [DataContract]
    public partial class IncomingWebhook :  IEquatable<IncomingWebhook>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncomingWebhook" /> class.
        /// </summary>
        /// <param name="id">The unique identifier for this incoming webhook.</param>
        /// <param name="createAt">The time in milliseconds a incoming webhook was created.</param>
        /// <param name="updateAt">The time in milliseconds a incoming webhook was last updated.</param>
        /// <param name="deleteAt">The time in milliseconds a incoming webhook was deleted.</param>
        /// <param name="channelId">The ID of a public channel or private group that receives the webhook payloads.</param>
        /// <param name="description">The description for this incoming webhook.</param>
        /// <param name="displayName">The display name for this incoming webhook.</param>
        public IncomingWebhook(string id = default(string), long createAt = default(long), long updateAt = default(long), long deleteAt = default(long), string channelId = default(string), string description = default(string), string displayName = default(string))
        {
            this.Id = id;
            this.CreateAt = createAt;
            this.UpdateAt = updateAt;
            this.DeleteAt = deleteAt;
            this.ChannelId = channelId;
            this.Description = description;
            this.DisplayName = displayName;
        }
        
        /// <summary>
        /// The unique identifier for this incoming webhook
        /// </summary>
        /// <value>The unique identifier for this incoming webhook</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The time in milliseconds a incoming webhook was created
        /// </summary>
        /// <value>The time in milliseconds a incoming webhook was created</value>
        [DataMember(Name="create_at", EmitDefaultValue=false)]
        public long CreateAt { get; set; }

        /// <summary>
        /// The time in milliseconds a incoming webhook was last updated
        /// </summary>
        /// <value>The time in milliseconds a incoming webhook was last updated</value>
        [DataMember(Name="update_at", EmitDefaultValue=false)]
        public long UpdateAt { get; set; }

        /// <summary>
        /// The time in milliseconds a incoming webhook was deleted
        /// </summary>
        /// <value>The time in milliseconds a incoming webhook was deleted</value>
        [DataMember(Name="delete_at", EmitDefaultValue=false)]
        public long DeleteAt { get; set; }

        /// <summary>
        /// The ID of a public channel or private group that receives the webhook payloads
        /// </summary>
        /// <value>The ID of a public channel or private group that receives the webhook payloads</value>
        [DataMember(Name="channel_id", EmitDefaultValue=false)]
        public string ChannelId { get; set; }

        /// <summary>
        /// The description for this incoming webhook
        /// </summary>
        /// <value>The description for this incoming webhook</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The display name for this incoming webhook
        /// </summary>
        /// <value>The display name for this incoming webhook</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IncomingWebhook {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreateAt: ").Append(CreateAt).Append("\n");
            sb.Append("  UpdateAt: ").Append(UpdateAt).Append("\n");
            sb.Append("  DeleteAt: ").Append(DeleteAt).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IncomingWebhook);
        }

        /// <summary>
        /// Returns true if IncomingWebhook instances are equal
        /// </summary>
        /// <param name="input">Instance of IncomingWebhook to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncomingWebhook input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreateAt == input.CreateAt ||
                    this.CreateAt.Equals(input.CreateAt)
                ) && 
                (
                    this.UpdateAt == input.UpdateAt ||
                    this.UpdateAt.Equals(input.UpdateAt)
                ) && 
                (
                    this.DeleteAt == input.DeleteAt ||
                    this.DeleteAt.Equals(input.DeleteAt)
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.CreateAt.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateAt.GetHashCode();
                hashCode = hashCode * 59 + this.DeleteAt.GetHashCode();
                if (this.ChannelId != null)
                    hashCode = hashCode * 59 + this.ChannelId.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
