/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// Emoji
    /// </summary>
    [DataContract]
    public partial class Emoji :  IEquatable<Emoji>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Emoji" /> class.
        /// </summary>
        /// <param name="id">The ID of the emoji.</param>
        /// <param name="creatorId">The ID of the user that made the emoji.</param>
        /// <param name="name">The name of the emoji.</param>
        /// <param name="createAt">The time in milliseconds the emoji was made.</param>
        /// <param name="updateAt">The time in milliseconds the emoji was last updated.</param>
        /// <param name="deleteAt">The time in milliseconds the emoji was deleted.</param>
        public Emoji(string id = default(string), string creatorId = default(string), string name = default(string), long createAt = default(long), long updateAt = default(long), long deleteAt = default(long))
        {
            this.Id = id;
            this.CreatorId = creatorId;
            this.Name = name;
            this.CreateAt = createAt;
            this.UpdateAt = updateAt;
            this.DeleteAt = deleteAt;
        }
        
        /// <summary>
        /// The ID of the emoji
        /// </summary>
        /// <value>The ID of the emoji</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The ID of the user that made the emoji
        /// </summary>
        /// <value>The ID of the user that made the emoji</value>
        [DataMember(Name="creator_id", EmitDefaultValue=false)]
        public string CreatorId { get; set; }

        /// <summary>
        /// The name of the emoji
        /// </summary>
        /// <value>The name of the emoji</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The time in milliseconds the emoji was made
        /// </summary>
        /// <value>The time in milliseconds the emoji was made</value>
        [DataMember(Name="create_at", EmitDefaultValue=false)]
        public long CreateAt { get; set; }

        /// <summary>
        /// The time in milliseconds the emoji was last updated
        /// </summary>
        /// <value>The time in milliseconds the emoji was last updated</value>
        [DataMember(Name="update_at", EmitDefaultValue=false)]
        public long UpdateAt { get; set; }

        /// <summary>
        /// The time in milliseconds the emoji was deleted
        /// </summary>
        /// <value>The time in milliseconds the emoji was deleted</value>
        [DataMember(Name="delete_at", EmitDefaultValue=false)]
        public long DeleteAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Emoji {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreateAt: ").Append(CreateAt).Append("\n");
            sb.Append("  UpdateAt: ").Append(UpdateAt).Append("\n");
            sb.Append("  DeleteAt: ").Append(DeleteAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Emoji);
        }

        /// <summary>
        /// Returns true if Emoji instances are equal
        /// </summary>
        /// <param name="input">Instance of Emoji to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Emoji input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreatorId == input.CreatorId ||
                    (this.CreatorId != null &&
                    this.CreatorId.Equals(input.CreatorId))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreateAt == input.CreateAt ||
                    this.CreateAt.Equals(input.CreateAt)
                ) && 
                (
                    this.UpdateAt == input.UpdateAt ||
                    this.UpdateAt.Equals(input.UpdateAt)
                ) && 
                (
                    this.DeleteAt == input.DeleteAt ||
                    this.DeleteAt.Equals(input.DeleteAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.CreatorId != null)
                    hashCode = hashCode * 59 + this.CreatorId.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                hashCode = hashCode * 59 + this.CreateAt.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateAt.GetHashCode();
                hashCode = hashCode * 59 + this.DeleteAt.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
