/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// TeamMember
    /// </summary>
    [DataContract]
    public partial class TeamMember :  IEquatable<TeamMember>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TeamMember" /> class.
        /// </summary>
        /// <param name="teamId">The ID of the team this member belongs to..</param>
        /// <param name="userId">The ID of the user this member relates to..</param>
        /// <param name="roles">The complete list of roles assigned to this team member, as a space-separated list of role names, including any roles granted implicitly through permissions schemes..</param>
        /// <param name="deleteAt">The time in milliseconds that this team member was deleted..</param>
        /// <param name="schemeUser">Whether this team member holds the default user role defined by the team&#39;s permissions scheme..</param>
        /// <param name="schemeAdmin">Whether this team member holds the default admin role defined by the team&#39;s permissions scheme..</param>
        /// <param name="explicitRoles">The list of roles explicitly assigned to this team member, as a space separated list of role names. This list does *not* include any roles granted implicitly through permissions schemes..</param>
        public TeamMember(string teamId = default(string), string userId = default(string), string roles = default(string), int deleteAt = default(int), bool schemeUser = default(bool), bool schemeAdmin = default(bool), string explicitRoles = default(string))
        {
            this.TeamId = teamId;
            this.UserId = userId;
            this.Roles = roles;
            this.DeleteAt = deleteAt;
            this.SchemeUser = schemeUser;
            this.SchemeAdmin = schemeAdmin;
            this.ExplicitRoles = explicitRoles;
        }
        
        /// <summary>
        /// The ID of the team this member belongs to.
        /// </summary>
        /// <value>The ID of the team this member belongs to.</value>
        [DataMember(Name="team_id", EmitDefaultValue=false)]
        public string TeamId { get; set; }

        /// <summary>
        /// The ID of the user this member relates to.
        /// </summary>
        /// <value>The ID of the user this member relates to.</value>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// The complete list of roles assigned to this team member, as a space-separated list of role names, including any roles granted implicitly through permissions schemes.
        /// </summary>
        /// <value>The complete list of roles assigned to this team member, as a space-separated list of role names, including any roles granted implicitly through permissions schemes.</value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public string Roles { get; set; }

        /// <summary>
        /// The time in milliseconds that this team member was deleted.
        /// </summary>
        /// <value>The time in milliseconds that this team member was deleted.</value>
        [DataMember(Name="delete_at", EmitDefaultValue=false)]
        public int DeleteAt { get; set; }

        /// <summary>
        /// Whether this team member holds the default user role defined by the team&#39;s permissions scheme.
        /// </summary>
        /// <value>Whether this team member holds the default user role defined by the team&#39;s permissions scheme.</value>
        [DataMember(Name="scheme_user", EmitDefaultValue=false)]
        public bool SchemeUser { get; set; }

        /// <summary>
        /// Whether this team member holds the default admin role defined by the team&#39;s permissions scheme.
        /// </summary>
        /// <value>Whether this team member holds the default admin role defined by the team&#39;s permissions scheme.</value>
        [DataMember(Name="scheme_admin", EmitDefaultValue=false)]
        public bool SchemeAdmin { get; set; }

        /// <summary>
        /// The list of roles explicitly assigned to this team member, as a space separated list of role names. This list does *not* include any roles granted implicitly through permissions schemes.
        /// </summary>
        /// <value>The list of roles explicitly assigned to this team member, as a space separated list of role names. This list does *not* include any roles granted implicitly through permissions schemes.</value>
        [DataMember(Name="explicit_roles", EmitDefaultValue=false)]
        public string ExplicitRoles { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeamMember {\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  DeleteAt: ").Append(DeleteAt).Append("\n");
            sb.Append("  SchemeUser: ").Append(SchemeUser).Append("\n");
            sb.Append("  SchemeAdmin: ").Append(SchemeAdmin).Append("\n");
            sb.Append("  ExplicitRoles: ").Append(ExplicitRoles).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TeamMember);
        }

        /// <summary>
        /// Returns true if TeamMember instances are equal
        /// </summary>
        /// <param name="input">Instance of TeamMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamMember input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TeamId == input.TeamId ||
                    (this.TeamId != null &&
                    this.TeamId.Equals(input.TeamId))
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.Roles == input.Roles ||
                    (this.Roles != null &&
                    this.Roles.Equals(input.Roles))
                ) && 
                (
                    this.DeleteAt == input.DeleteAt ||
                    this.DeleteAt.Equals(input.DeleteAt)
                ) && 
                (
                    this.SchemeUser == input.SchemeUser ||
                    this.SchemeUser.Equals(input.SchemeUser)
                ) && 
                (
                    this.SchemeAdmin == input.SchemeAdmin ||
                    this.SchemeAdmin.Equals(input.SchemeAdmin)
                ) && 
                (
                    this.ExplicitRoles == input.ExplicitRoles ||
                    (this.ExplicitRoles != null &&
                    this.ExplicitRoles.Equals(input.ExplicitRoles))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TeamId != null)
                    hashCode = hashCode * 59 + this.TeamId.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.Roles != null)
                    hashCode = hashCode * 59 + this.Roles.GetHashCode();
                hashCode = hashCode * 59 + this.DeleteAt.GetHashCode();
                hashCode = hashCode * 59 + this.SchemeUser.GetHashCode();
                hashCode = hashCode * 59 + this.SchemeAdmin.GetHashCode();
                if (this.ExplicitRoles != null)
                    hashCode = hashCode * 59 + this.ExplicitRoles.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
