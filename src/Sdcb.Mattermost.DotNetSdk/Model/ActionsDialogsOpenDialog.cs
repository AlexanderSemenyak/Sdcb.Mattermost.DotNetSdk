/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// Post object to create
    /// </summary>
    [DataContract]
    public partial class ActionsDialogsOpenDialog :  IEquatable<ActionsDialogsOpenDialog>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionsDialogsOpenDialog" /> class.
        /// </summary>
        [JsonConstructor]
        protected ActionsDialogsOpenDialog() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionsDialogsOpenDialog" /> class.
        /// </summary>
        /// <param name="callbackId">Set an ID that will be included when the dialog is submitted.</param>
        /// <param name="title">Title of the dialog (required).</param>
        /// <param name="elements">Input elements, see https://docs.mattermost.com/developer/interactive-dialogs.html#elements (required).</param>
        /// <param name="submitLabel">Label on the submit button.</param>
        /// <param name="notifyOnCancel">Set true to receive payloads when user cancels a dialog.</param>
        /// <param name="state">Set some state to be echoed back with the dialog submission.</param>
        public ActionsDialogsOpenDialog(string callbackId = default(string), string title = default(string), List<object> elements = default(List<object>), string submitLabel = default(string), bool notifyOnCancel = default(bool), string state = default(string))
        {
            // to ensure "title" is required (not null)
            if (title == null)
            {
                throw new InvalidDataException("title is a required property for ActionsDialogsOpenDialog and cannot be null");
            }
            else
            {
                this.Title = title;
            }

            // to ensure "elements" is required (not null)
            if (elements == null)
            {
                throw new InvalidDataException("elements is a required property for ActionsDialogsOpenDialog and cannot be null");
            }
            else
            {
                this.Elements = elements;
            }

            this.CallbackId = callbackId;
            this.SubmitLabel = submitLabel;
            this.NotifyOnCancel = notifyOnCancel;
            this.State = state;
        }
        
        /// <summary>
        /// Set an ID that will be included when the dialog is submitted
        /// </summary>
        /// <value>Set an ID that will be included when the dialog is submitted</value>
        [DataMember(Name="callback_id", EmitDefaultValue=false)]
        public string CallbackId { get; set; }

        /// <summary>
        /// Title of the dialog
        /// </summary>
        /// <value>Title of the dialog</value>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Input elements, see https://docs.mattermost.com/developer/interactive-dialogs.html#elements
        /// </summary>
        /// <value>Input elements, see https://docs.mattermost.com/developer/interactive-dialogs.html#elements</value>
        [DataMember(Name="elements", EmitDefaultValue=false)]
        public List<object> Elements { get; set; }

        /// <summary>
        /// Label on the submit button
        /// </summary>
        /// <value>Label on the submit button</value>
        [DataMember(Name="submit_label", EmitDefaultValue=false)]
        public string SubmitLabel { get; set; }

        /// <summary>
        /// Set true to receive payloads when user cancels a dialog
        /// </summary>
        /// <value>Set true to receive payloads when user cancels a dialog</value>
        [DataMember(Name="notify_on_cancel", EmitDefaultValue=false)]
        public bool NotifyOnCancel { get; set; }

        /// <summary>
        /// Set some state to be echoed back with the dialog submission
        /// </summary>
        /// <value>Set some state to be echoed back with the dialog submission</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ActionsDialogsOpenDialog {\n");
            sb.Append("  CallbackId: ").Append(CallbackId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Elements: ").Append(Elements).Append("\n");
            sb.Append("  SubmitLabel: ").Append(SubmitLabel).Append("\n");
            sb.Append("  NotifyOnCancel: ").Append(NotifyOnCancel).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActionsDialogsOpenDialog);
        }

        /// <summary>
        /// Returns true if ActionsDialogsOpenDialog instances are equal
        /// </summary>
        /// <param name="input">Instance of ActionsDialogsOpenDialog to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionsDialogsOpenDialog input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.CallbackId == input.CallbackId ||
                    (this.CallbackId != null &&
                    this.CallbackId.Equals(input.CallbackId))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Elements == input.Elements ||
                    this.Elements != null &&
                    input.Elements != null &&
                    this.Elements.SequenceEqual(input.Elements)
                ) && 
                (
                    this.SubmitLabel == input.SubmitLabel ||
                    (this.SubmitLabel != null &&
                    this.SubmitLabel.Equals(input.SubmitLabel))
                ) && 
                (
                    this.NotifyOnCancel == input.NotifyOnCancel ||
                    this.NotifyOnCancel.Equals(input.NotifyOnCancel)
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.CallbackId != null)
                    hashCode = hashCode * 59 + this.CallbackId.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Elements != null)
                    hashCode = hashCode * 59 + this.Elements.GetHashCode();
                if (this.SubmitLabel != null)
                    hashCode = hashCode * 59 + this.SubmitLabel.GetHashCode();
                hashCode = hashCode * 59 + this.NotifyOnCancel.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
