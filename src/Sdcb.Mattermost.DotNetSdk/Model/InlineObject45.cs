/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// InlineObject45
    /// </summary>
    [DataContract]
    public partial class InlineObject45 :  IEquatable<InlineObject45>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject45" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InlineObject45() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject45" /> class.
        /// </summary>
        /// <param name="terms">The search terms as inputed by the user. To search for posts from a user include &#x60;from:someusername&#x60;, using a user&#39;s username. To search in a specific channel include &#x60;in:somechannel&#x60;, using the channel name (not the display name). (required).</param>
        /// <param name="isOrSearch">Set to true if an Or search should be performed vs an And search. (required).</param>
        /// <param name="timeZoneOffset">Offset from UTC of user timezone for date searches..</param>
        /// <param name="includeDeletedChannels">Set to true if deleted channels should be included in the search. (archived channels).</param>
        /// <param name="page">The page to select. (Only works with Elasticsearch).</param>
        /// <param name="perPage">The number of posts per page. (Only works with Elasticsearch).</param>
        public InlineObject45(string terms = default(string), bool isOrSearch = default(bool), int timeZoneOffset = default(int), bool includeDeletedChannels = default(bool), int page = default(int), int perPage = default(int))
        {
            // to ensure "terms" is required (not null)
            if (terms == null)
            {
                throw new InvalidDataException("terms is a required property for InlineObject45 and cannot be null");
            }
            else
            {
                this.Terms = terms;
            }

            // to ensure "isOrSearch" is required (not null)
            if (isOrSearch == null)
            {
                throw new InvalidDataException("isOrSearch is a required property for InlineObject45 and cannot be null");
            }
            else
            {
                this.IsOrSearch = isOrSearch;
            }

            this.TimeZoneOffset = timeZoneOffset;
            this.IncludeDeletedChannels = includeDeletedChannels;
            this.Page = page;
            this.PerPage = perPage;
        }
        
        /// <summary>
        /// The search terms as inputed by the user. To search for posts from a user include &#x60;from:someusername&#x60;, using a user&#39;s username. To search in a specific channel include &#x60;in:somechannel&#x60;, using the channel name (not the display name).
        /// </summary>
        /// <value>The search terms as inputed by the user. To search for posts from a user include &#x60;from:someusername&#x60;, using a user&#39;s username. To search in a specific channel include &#x60;in:somechannel&#x60;, using the channel name (not the display name).</value>
        [DataMember(Name="terms", EmitDefaultValue=false)]
        public string Terms { get; set; }

        /// <summary>
        /// Set to true if an Or search should be performed vs an And search.
        /// </summary>
        /// <value>Set to true if an Or search should be performed vs an And search.</value>
        [DataMember(Name="is_or_search", EmitDefaultValue=false)]
        public bool IsOrSearch { get; set; }

        /// <summary>
        /// Offset from UTC of user timezone for date searches.
        /// </summary>
        /// <value>Offset from UTC of user timezone for date searches.</value>
        [DataMember(Name="time_zone_offset", EmitDefaultValue=false)]
        public int TimeZoneOffset { get; set; }

        /// <summary>
        /// Set to true if deleted channels should be included in the search. (archived channels)
        /// </summary>
        /// <value>Set to true if deleted channels should be included in the search. (archived channels)</value>
        [DataMember(Name="include_deleted_channels", EmitDefaultValue=false)]
        public bool IncludeDeletedChannels { get; set; }

        /// <summary>
        /// The page to select. (Only works with Elasticsearch)
        /// </summary>
        /// <value>The page to select. (Only works with Elasticsearch)</value>
        [DataMember(Name="page", EmitDefaultValue=false)]
        public int Page { get; set; }

        /// <summary>
        /// The number of posts per page. (Only works with Elasticsearch)
        /// </summary>
        /// <value>The number of posts per page. (Only works with Elasticsearch)</value>
        [DataMember(Name="per_page", EmitDefaultValue=false)]
        public int PerPage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject45 {\n");
            sb.Append("  Terms: ").Append(Terms).Append("\n");
            sb.Append("  IsOrSearch: ").Append(IsOrSearch).Append("\n");
            sb.Append("  TimeZoneOffset: ").Append(TimeZoneOffset).Append("\n");
            sb.Append("  IncludeDeletedChannels: ").Append(IncludeDeletedChannels).Append("\n");
            sb.Append("  Page: ").Append(Page).Append("\n");
            sb.Append("  PerPage: ").Append(PerPage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject45);
        }

        /// <summary>
        /// Returns true if InlineObject45 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject45 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject45 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Terms == input.Terms ||
                    (this.Terms != null &&
                    this.Terms.Equals(input.Terms))
                ) && 
                (
                    this.IsOrSearch == input.IsOrSearch ||
                    this.IsOrSearch.Equals(input.IsOrSearch)
                ) && 
                (
                    this.TimeZoneOffset == input.TimeZoneOffset ||
                    this.TimeZoneOffset.Equals(input.TimeZoneOffset)
                ) && 
                (
                    this.IncludeDeletedChannels == input.IncludeDeletedChannels ||
                    this.IncludeDeletedChannels.Equals(input.IncludeDeletedChannels)
                ) && 
                (
                    this.Page == input.Page ||
                    this.Page.Equals(input.Page)
                ) && 
                (
                    this.PerPage == input.PerPage ||
                    this.PerPage.Equals(input.PerPage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Terms != null)
                    hashCode = hashCode * 59 + this.Terms.GetHashCode();
                hashCode = hashCode * 59 + this.IsOrSearch.GetHashCode();
                hashCode = hashCode * 59 + this.TimeZoneOffset.GetHashCode();
                hashCode = hashCode * 59 + this.IncludeDeletedChannels.GetHashCode();
                hashCode = hashCode * 59 + this.Page.GetHashCode();
                hashCode = hashCode * 59 + this.PerPage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
