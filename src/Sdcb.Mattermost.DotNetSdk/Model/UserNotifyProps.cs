/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// UserNotifyProps
    /// </summary>
    [DataContract]
    public partial class UserNotifyProps :  IEquatable<UserNotifyProps>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserNotifyProps" /> class.
        /// </summary>
        /// <param name="email">Set to \&quot;true\&quot; to enable email notifications, \&quot;false\&quot; to disable. Defaults to \&quot;true\&quot;..</param>
        /// <param name="push">Set to \&quot;all\&quot; to receive push notifications for all activity, \&quot;mention\&quot; for mentions and direct messages only, and \&quot;none\&quot; to disable. Defaults to \&quot;mention\&quot;..</param>
        /// <param name="desktop">Set to \&quot;all\&quot; to receive desktop notifications for all activity, \&quot;mention\&quot; for mentions and direct messages only, and \&quot;none\&quot; to disable. Defaults to \&quot;all\&quot;..</param>
        /// <param name="desktopSound">Set to \&quot;true\&quot; to enable sound on desktop notifications, \&quot;false\&quot; to disable. Defaults to \&quot;true\&quot;..</param>
        /// <param name="mentionKeys">A comma-separated list of words to count as mentions. Defaults to username and @username..</param>
        /// <param name="channel">Set to \&quot;true\&quot; to enable channel-wide notifications (@channel, @all, etc.), \&quot;false\&quot; to disable. Defaults to \&quot;true\&quot;..</param>
        /// <param name="firstName">Set to \&quot;true\&quot; to enable mentions for first name. Defaults to \&quot;true\&quot; if a first name is set, \&quot;false\&quot; otherwise..</param>
        public UserNotifyProps(string email = default(string), string push = default(string), string desktop = default(string), string desktopSound = default(string), string mentionKeys = default(string), string channel = default(string), string firstName = default(string))
        {
            this.Email = email;
            this.Push = push;
            this.Desktop = desktop;
            this.DesktopSound = desktopSound;
            this.MentionKeys = mentionKeys;
            this.Channel = channel;
            this.FirstName = firstName;
        }
        
        /// <summary>
        /// Set to \&quot;true\&quot; to enable email notifications, \&quot;false\&quot; to disable. Defaults to \&quot;true\&quot;.
        /// </summary>
        /// <value>Set to \&quot;true\&quot; to enable email notifications, \&quot;false\&quot; to disable. Defaults to \&quot;true\&quot;.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Set to \&quot;all\&quot; to receive push notifications for all activity, \&quot;mention\&quot; for mentions and direct messages only, and \&quot;none\&quot; to disable. Defaults to \&quot;mention\&quot;.
        /// </summary>
        /// <value>Set to \&quot;all\&quot; to receive push notifications for all activity, \&quot;mention\&quot; for mentions and direct messages only, and \&quot;none\&quot; to disable. Defaults to \&quot;mention\&quot;.</value>
        [DataMember(Name="push", EmitDefaultValue=false)]
        public string Push { get; set; }

        /// <summary>
        /// Set to \&quot;all\&quot; to receive desktop notifications for all activity, \&quot;mention\&quot; for mentions and direct messages only, and \&quot;none\&quot; to disable. Defaults to \&quot;all\&quot;.
        /// </summary>
        /// <value>Set to \&quot;all\&quot; to receive desktop notifications for all activity, \&quot;mention\&quot; for mentions and direct messages only, and \&quot;none\&quot; to disable. Defaults to \&quot;all\&quot;.</value>
        [DataMember(Name="desktop", EmitDefaultValue=false)]
        public string Desktop { get; set; }

        /// <summary>
        /// Set to \&quot;true\&quot; to enable sound on desktop notifications, \&quot;false\&quot; to disable. Defaults to \&quot;true\&quot;.
        /// </summary>
        /// <value>Set to \&quot;true\&quot; to enable sound on desktop notifications, \&quot;false\&quot; to disable. Defaults to \&quot;true\&quot;.</value>
        [DataMember(Name="desktop_sound", EmitDefaultValue=false)]
        public string DesktopSound { get; set; }

        /// <summary>
        /// A comma-separated list of words to count as mentions. Defaults to username and @username.
        /// </summary>
        /// <value>A comma-separated list of words to count as mentions. Defaults to username and @username.</value>
        [DataMember(Name="mention_keys", EmitDefaultValue=false)]
        public string MentionKeys { get; set; }

        /// <summary>
        /// Set to \&quot;true\&quot; to enable channel-wide notifications (@channel, @all, etc.), \&quot;false\&quot; to disable. Defaults to \&quot;true\&quot;.
        /// </summary>
        /// <value>Set to \&quot;true\&quot; to enable channel-wide notifications (@channel, @all, etc.), \&quot;false\&quot; to disable. Defaults to \&quot;true\&quot;.</value>
        [DataMember(Name="channel", EmitDefaultValue=false)]
        public string Channel { get; set; }

        /// <summary>
        /// Set to \&quot;true\&quot; to enable mentions for first name. Defaults to \&quot;true\&quot; if a first name is set, \&quot;false\&quot; otherwise.
        /// </summary>
        /// <value>Set to \&quot;true\&quot; to enable mentions for first name. Defaults to \&quot;true\&quot; if a first name is set, \&quot;false\&quot; otherwise.</value>
        [DataMember(Name="first_name", EmitDefaultValue=false)]
        public string FirstName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserNotifyProps {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Push: ").Append(Push).Append("\n");
            sb.Append("  Desktop: ").Append(Desktop).Append("\n");
            sb.Append("  DesktopSound: ").Append(DesktopSound).Append("\n");
            sb.Append("  MentionKeys: ").Append(MentionKeys).Append("\n");
            sb.Append("  Channel: ").Append(Channel).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as UserNotifyProps);
        }

        /// <summary>
        /// Returns true if UserNotifyProps instances are equal
        /// </summary>
        /// <param name="input">Instance of UserNotifyProps to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserNotifyProps input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Email == input.Email ||
                    (this.Email != null &&
                    this.Email.Equals(input.Email))
                ) && 
                (
                    this.Push == input.Push ||
                    (this.Push != null &&
                    this.Push.Equals(input.Push))
                ) && 
                (
                    this.Desktop == input.Desktop ||
                    (this.Desktop != null &&
                    this.Desktop.Equals(input.Desktop))
                ) && 
                (
                    this.DesktopSound == input.DesktopSound ||
                    (this.DesktopSound != null &&
                    this.DesktopSound.Equals(input.DesktopSound))
                ) && 
                (
                    this.MentionKeys == input.MentionKeys ||
                    (this.MentionKeys != null &&
                    this.MentionKeys.Equals(input.MentionKeys))
                ) && 
                (
                    this.Channel == input.Channel ||
                    (this.Channel != null &&
                    this.Channel.Equals(input.Channel))
                ) && 
                (
                    this.FirstName == input.FirstName ||
                    (this.FirstName != null &&
                    this.FirstName.Equals(input.FirstName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Email != null)
                    hashCode = hashCode * 59 + this.Email.GetHashCode();
                if (this.Push != null)
                    hashCode = hashCode * 59 + this.Push.GetHashCode();
                if (this.Desktop != null)
                    hashCode = hashCode * 59 + this.Desktop.GetHashCode();
                if (this.DesktopSound != null)
                    hashCode = hashCode * 59 + this.DesktopSound.GetHashCode();
                if (this.MentionKeys != null)
                    hashCode = hashCode * 59 + this.MentionKeys.GetHashCode();
                if (this.Channel != null)
                    hashCode = hashCode * 59 + this.Channel.GetHashCode();
                if (this.FirstName != null)
                    hashCode = hashCode * 59 + this.FirstName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
