/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// InlineObject23
    /// </summary>
    [DataContract]
    public partial class InlineObject23 :  IEquatable<InlineObject23>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject23" /> class.
        /// </summary>
        [JsonConstructor]
        protected InlineObject23() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject23" /> class.
        /// </summary>
        /// <param name="name">Unique handler for a team, will be present in the team URL (required).</param>
        /// <param name="displayName">Non-unique UI name for the team (required).</param>
        /// <param name="type">&#x60;&#39;O&#39;&#x60; for open, &#x60;&#39;I&#39;&#x60; for invite only (required).</param>
        public InlineObject23(string name = default(string), string displayName = default(string), string type = default(string))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for InlineObject23 and cannot be null");
            }
            else
            {
                this.Name = name;
            }

            // to ensure "displayName" is required (not null)
            if (displayName == null)
            {
                throw new InvalidDataException("displayName is a required property for InlineObject23 and cannot be null");
            }
            else
            {
                this.DisplayName = displayName;
            }

            // to ensure "type" is required (not null)
            if (type == null)
            {
                throw new InvalidDataException("type is a required property for InlineObject23 and cannot be null");
            }
            else
            {
                this.Type = type;
            }

        }
        
        /// <summary>
        /// Unique handler for a team, will be present in the team URL
        /// </summary>
        /// <value>Unique handler for a team, will be present in the team URL</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Non-unique UI name for the team
        /// </summary>
        /// <value>Non-unique UI name for the team</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// &#x60;&#39;O&#39;&#x60; for open, &#x60;&#39;I&#39;&#x60; for invite only
        /// </summary>
        /// <value>&#x60;&#39;O&#39;&#x60; for open, &#x60;&#39;I&#39;&#x60; for invite only</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject23 {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject23);
        }

        /// <summary>
        /// Returns true if InlineObject23 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject23 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject23 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
