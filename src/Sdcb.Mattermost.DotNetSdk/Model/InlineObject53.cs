/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// InlineObject53
    /// </summary>
    [DataContract]
    public partial class InlineObject53 :  IEquatable<InlineObject53>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject53" /> class.
        /// </summary>
        [JsonConstructor]
        protected InlineObject53() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject53" /> class.
        /// </summary>
        /// <param name="teamId">Team ID to where the command should be created (required).</param>
        /// <param name="method">&#x60;&#39;P&#39;&#x60; for post request, &#x60;&#39;G&#39;&#x60; for get request (required).</param>
        /// <param name="trigger">Activation word to trigger the command (required).</param>
        /// <param name="url">The URL that the command will make the request (required).</param>
        public InlineObject53(string teamId = default(string), string method = default(string), string trigger = default(string), string url = default(string))
        {
            // to ensure "teamId" is required (not null)
            if (teamId == null)
            {
                throw new InvalidDataException("teamId is a required property for InlineObject53 and cannot be null");
            }
            else
            {
                this.TeamId = teamId;
            }

            // to ensure "method" is required (not null)
            if (method == null)
            {
                throw new InvalidDataException("method is a required property for InlineObject53 and cannot be null");
            }
            else
            {
                this.Method = method;
            }

            // to ensure "trigger" is required (not null)
            if (trigger == null)
            {
                throw new InvalidDataException("trigger is a required property for InlineObject53 and cannot be null");
            }
            else
            {
                this.Trigger = trigger;
            }

            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for InlineObject53 and cannot be null");
            }
            else
            {
                this.Url = url;
            }

        }
        
        /// <summary>
        /// Team ID to where the command should be created
        /// </summary>
        /// <value>Team ID to where the command should be created</value>
        [DataMember(Name="team_id", EmitDefaultValue=false)]
        public string TeamId { get; set; }

        /// <summary>
        /// &#x60;&#39;P&#39;&#x60; for post request, &#x60;&#39;G&#39;&#x60; for get request
        /// </summary>
        /// <value>&#x60;&#39;P&#39;&#x60; for post request, &#x60;&#39;G&#39;&#x60; for get request</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public string Method { get; set; }

        /// <summary>
        /// Activation word to trigger the command
        /// </summary>
        /// <value>Activation word to trigger the command</value>
        [DataMember(Name="trigger", EmitDefaultValue=false)]
        public string Trigger { get; set; }

        /// <summary>
        /// The URL that the command will make the request
        /// </summary>
        /// <value>The URL that the command will make the request</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject53 {\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject53);
        }

        /// <summary>
        /// Returns true if InlineObject53 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject53 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject53 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TeamId == input.TeamId ||
                    (this.TeamId != null &&
                    this.TeamId.Equals(input.TeamId))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Trigger == input.Trigger ||
                    (this.Trigger != null &&
                    this.Trigger.Equals(input.Trigger))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TeamId != null)
                    hashCode = hashCode * 59 + this.TeamId.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Trigger != null)
                    hashCode = hashCode * 59 + this.Trigger.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
