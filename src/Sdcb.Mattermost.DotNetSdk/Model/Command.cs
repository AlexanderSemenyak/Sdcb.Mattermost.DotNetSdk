/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// Command
    /// </summary>
    [DataContract]
    public partial class Command :  IEquatable<Command>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Command" /> class.
        /// </summary>
        /// <param name="id">The ID of the slash command.</param>
        /// <param name="token">The token which is used to verify the source of the payload.</param>
        /// <param name="createAt">The time in milliseconds the command was created.</param>
        /// <param name="updateAt">The time in milliseconds the command was last updated.</param>
        /// <param name="deletedAt">The time in milliseconds the command was deleted, 0 if never deleted.</param>
        /// <param name="creatorId">The user id for the commands creator.</param>
        /// <param name="teamId">The team id for which this command is configured.</param>
        /// <param name="trigger">The string that triggers this command.</param>
        /// <param name="method">Is the trigger done with HTTP Get (&#39;G&#39;) or HTTP Post (&#39;P&#39;).</param>
        /// <param name="username">What is the username for the response post.</param>
        /// <param name="iconUrl">The url to find the icon for this users avatar.</param>
        /// <param name="autoComplete">Use auto complete for this command.</param>
        /// <param name="autoCompleteDesc">The description for this command shown when selecting the command.</param>
        /// <param name="autoCompleteHint">The hint for this command.</param>
        /// <param name="displayName">Display name for the command.</param>
        /// <param name="description">Description for this command.</param>
        /// <param name="url">The URL that is triggered.</param>
        public Command(string id = default(string), string token = default(string), int createAt = default(int), long updateAt = default(long), long deletedAt = default(long), string creatorId = default(string), string teamId = default(string), string trigger = default(string), string method = default(string), string username = default(string), string iconUrl = default(string), bool autoComplete = default(bool), string autoCompleteDesc = default(string), string autoCompleteHint = default(string), string displayName = default(string), string description = default(string), string url = default(string))
        {
            this.Id = id;
            this.Token = token;
            this.CreateAt = createAt;
            this.UpdateAt = updateAt;
            this.DeletedAt = deletedAt;
            this.CreatorId = creatorId;
            this.TeamId = teamId;
            this.Trigger = trigger;
            this.Method = method;
            this.Username = username;
            this.IconUrl = iconUrl;
            this.AutoComplete = autoComplete;
            this.AutoCompleteDesc = autoCompleteDesc;
            this.AutoCompleteHint = autoCompleteHint;
            this.DisplayName = displayName;
            this.Description = description;
            this.Url = url;
        }
        
        /// <summary>
        /// The ID of the slash command
        /// </summary>
        /// <value>The ID of the slash command</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The token which is used to verify the source of the payload
        /// </summary>
        /// <value>The token which is used to verify the source of the payload</value>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// The time in milliseconds the command was created
        /// </summary>
        /// <value>The time in milliseconds the command was created</value>
        [DataMember(Name="create_at", EmitDefaultValue=false)]
        public int CreateAt { get; set; }

        /// <summary>
        /// The time in milliseconds the command was last updated
        /// </summary>
        /// <value>The time in milliseconds the command was last updated</value>
        [DataMember(Name="update_at", EmitDefaultValue=false)]
        public long UpdateAt { get; set; }

        /// <summary>
        /// The time in milliseconds the command was deleted, 0 if never deleted
        /// </summary>
        /// <value>The time in milliseconds the command was deleted, 0 if never deleted</value>
        [DataMember(Name="deleted_at", EmitDefaultValue=false)]
        public long DeletedAt { get; set; }

        /// <summary>
        /// The user id for the commands creator
        /// </summary>
        /// <value>The user id for the commands creator</value>
        [DataMember(Name="creator_id", EmitDefaultValue=false)]
        public string CreatorId { get; set; }

        /// <summary>
        /// The team id for which this command is configured
        /// </summary>
        /// <value>The team id for which this command is configured</value>
        [DataMember(Name="team_id", EmitDefaultValue=false)]
        public string TeamId { get; set; }

        /// <summary>
        /// The string that triggers this command
        /// </summary>
        /// <value>The string that triggers this command</value>
        [DataMember(Name="trigger", EmitDefaultValue=false)]
        public string Trigger { get; set; }

        /// <summary>
        /// Is the trigger done with HTTP Get (&#39;G&#39;) or HTTP Post (&#39;P&#39;)
        /// </summary>
        /// <value>Is the trigger done with HTTP Get (&#39;G&#39;) or HTTP Post (&#39;P&#39;)</value>
        [DataMember(Name="method", EmitDefaultValue=false)]
        public string Method { get; set; }

        /// <summary>
        /// What is the username for the response post
        /// </summary>
        /// <value>What is the username for the response post</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// The url to find the icon for this users avatar
        /// </summary>
        /// <value>The url to find the icon for this users avatar</value>
        [DataMember(Name="icon_url", EmitDefaultValue=false)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Use auto complete for this command
        /// </summary>
        /// <value>Use auto complete for this command</value>
        [DataMember(Name="auto_complete", EmitDefaultValue=false)]
        public bool AutoComplete { get; set; }

        /// <summary>
        /// The description for this command shown when selecting the command
        /// </summary>
        /// <value>The description for this command shown when selecting the command</value>
        [DataMember(Name="auto_complete_desc", EmitDefaultValue=false)]
        public string AutoCompleteDesc { get; set; }

        /// <summary>
        /// The hint for this command
        /// </summary>
        /// <value>The hint for this command</value>
        [DataMember(Name="auto_complete_hint", EmitDefaultValue=false)]
        public string AutoCompleteHint { get; set; }

        /// <summary>
        /// Display name for the command
        /// </summary>
        /// <value>Display name for the command</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Description for this command
        /// </summary>
        /// <value>Description for this command</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The URL that is triggered
        /// </summary>
        /// <value>The URL that is triggered</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Command {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  CreateAt: ").Append(CreateAt).Append("\n");
            sb.Append("  UpdateAt: ").Append(UpdateAt).Append("\n");
            sb.Append("  DeletedAt: ").Append(DeletedAt).Append("\n");
            sb.Append("  CreatorId: ").Append(CreatorId).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Trigger: ").Append(Trigger).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  AutoComplete: ").Append(AutoComplete).Append("\n");
            sb.Append("  AutoCompleteDesc: ").Append(AutoCompleteDesc).Append("\n");
            sb.Append("  AutoCompleteHint: ").Append(AutoCompleteHint).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Command);
        }

        /// <summary>
        /// Returns true if Command instances are equal
        /// </summary>
        /// <param name="input">Instance of Command to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Command input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && 
                (
                    this.CreateAt == input.CreateAt ||
                    this.CreateAt.Equals(input.CreateAt)
                ) && 
                (
                    this.UpdateAt == input.UpdateAt ||
                    this.UpdateAt.Equals(input.UpdateAt)
                ) && 
                (
                    this.DeletedAt == input.DeletedAt ||
                    this.DeletedAt.Equals(input.DeletedAt)
                ) && 
                (
                    this.CreatorId == input.CreatorId ||
                    (this.CreatorId != null &&
                    this.CreatorId.Equals(input.CreatorId))
                ) && 
                (
                    this.TeamId == input.TeamId ||
                    (this.TeamId != null &&
                    this.TeamId.Equals(input.TeamId))
                ) && 
                (
                    this.Trigger == input.Trigger ||
                    (this.Trigger != null &&
                    this.Trigger.Equals(input.Trigger))
                ) && 
                (
                    this.Method == input.Method ||
                    (this.Method != null &&
                    this.Method.Equals(input.Method))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.IconUrl == input.IconUrl ||
                    (this.IconUrl != null &&
                    this.IconUrl.Equals(input.IconUrl))
                ) && 
                (
                    this.AutoComplete == input.AutoComplete ||
                    this.AutoComplete.Equals(input.AutoComplete)
                ) && 
                (
                    this.AutoCompleteDesc == input.AutoCompleteDesc ||
                    (this.AutoCompleteDesc != null &&
                    this.AutoCompleteDesc.Equals(input.AutoCompleteDesc))
                ) && 
                (
                    this.AutoCompleteHint == input.AutoCompleteHint ||
                    (this.AutoCompleteHint != null &&
                    this.AutoCompleteHint.Equals(input.AutoCompleteHint))
                ) && 
                (
                    this.DisplayName == input.DisplayName ||
                    (this.DisplayName != null &&
                    this.DisplayName.Equals(input.DisplayName))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                hashCode = hashCode * 59 + this.CreateAt.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateAt.GetHashCode();
                hashCode = hashCode * 59 + this.DeletedAt.GetHashCode();
                if (this.CreatorId != null)
                    hashCode = hashCode * 59 + this.CreatorId.GetHashCode();
                if (this.TeamId != null)
                    hashCode = hashCode * 59 + this.TeamId.GetHashCode();
                if (this.Trigger != null)
                    hashCode = hashCode * 59 + this.Trigger.GetHashCode();
                if (this.Method != null)
                    hashCode = hashCode * 59 + this.Method.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.IconUrl != null)
                    hashCode = hashCode * 59 + this.IconUrl.GetHashCode();
                hashCode = hashCode * 59 + this.AutoComplete.GetHashCode();
                if (this.AutoCompleteDesc != null)
                    hashCode = hashCode * 59 + this.AutoCompleteDesc.GetHashCode();
                if (this.AutoCompleteHint != null)
                    hashCode = hashCode * 59 + this.AutoCompleteHint.GetHashCode();
                if (this.DisplayName != null)
                    hashCode = hashCode * 59 + this.DisplayName.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
