/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// ConfigMetricsSettings
    /// </summary>
    [DataContract]
    public partial class ConfigMetricsSettings :  IEquatable<ConfigMetricsSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigMetricsSettings" /> class.
        /// </summary>
        /// <param name="enable">enable.</param>
        /// <param name="blockProfileRate">blockProfileRate.</param>
        /// <param name="listenAddress">listenAddress.</param>
        public ConfigMetricsSettings(bool enable = default(bool), int blockProfileRate = default(int), string listenAddress = default(string))
        {
            this.Enable = enable;
            this.BlockProfileRate = blockProfileRate;
            this.ListenAddress = listenAddress;
        }
        
        /// <summary>
        /// Gets or Sets Enable
        /// </summary>
        [DataMember(Name="Enable", EmitDefaultValue=false)]
        public bool Enable { get; set; }

        /// <summary>
        /// Gets or Sets BlockProfileRate
        /// </summary>
        [DataMember(Name="BlockProfileRate", EmitDefaultValue=false)]
        public int BlockProfileRate { get; set; }

        /// <summary>
        /// Gets or Sets ListenAddress
        /// </summary>
        [DataMember(Name="ListenAddress", EmitDefaultValue=false)]
        public string ListenAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigMetricsSettings {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  BlockProfileRate: ").Append(BlockProfileRate).Append("\n");
            sb.Append("  ListenAddress: ").Append(ListenAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigMetricsSettings);
        }

        /// <summary>
        /// Returns true if ConfigMetricsSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigMetricsSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigMetricsSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.BlockProfileRate == input.BlockProfileRate ||
                    this.BlockProfileRate.Equals(input.BlockProfileRate)
                ) && 
                (
                    this.ListenAddress == input.ListenAddress ||
                    (this.ListenAddress != null &&
                    this.ListenAddress.Equals(input.ListenAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Enable.GetHashCode();
                hashCode = hashCode * 59 + this.BlockProfileRate.GetHashCode();
                if (this.ListenAddress != null)
                    hashCode = hashCode * 59 + this.ListenAddress.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
