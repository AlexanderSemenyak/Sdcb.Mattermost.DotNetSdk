/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// EnvironmentConfigFileSettings
    /// </summary>
    [DataContract]
    public partial class EnvironmentConfigFileSettings :  IEquatable<EnvironmentConfigFileSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentConfigFileSettings" /> class.
        /// </summary>
        /// <param name="maxFileSize">maxFileSize.</param>
        /// <param name="driverName">driverName.</param>
        /// <param name="directory">directory.</param>
        /// <param name="enablePublicLink">enablePublicLink.</param>
        /// <param name="publicLinkSalt">publicLinkSalt.</param>
        /// <param name="thumbnailWidth">thumbnailWidth.</param>
        /// <param name="thumbnailHeight">thumbnailHeight.</param>
        /// <param name="previewWidth">previewWidth.</param>
        /// <param name="previewHeight">previewHeight.</param>
        /// <param name="profileWidth">profileWidth.</param>
        /// <param name="profileHeight">profileHeight.</param>
        /// <param name="initialFont">initialFont.</param>
        /// <param name="amazonS3AccessKeyId">amazonS3AccessKeyId.</param>
        /// <param name="amazonS3SecretAccessKey">amazonS3SecretAccessKey.</param>
        /// <param name="amazonS3Bucket">amazonS3Bucket.</param>
        /// <param name="amazonS3Region">amazonS3Region.</param>
        /// <param name="amazonS3Endpoint">amazonS3Endpoint.</param>
        /// <param name="amazonS3SSL">amazonS3SSL.</param>
        public EnvironmentConfigFileSettings(bool maxFileSize = default(bool), bool driverName = default(bool), bool directory = default(bool), bool enablePublicLink = default(bool), bool publicLinkSalt = default(bool), bool thumbnailWidth = default(bool), bool thumbnailHeight = default(bool), bool previewWidth = default(bool), bool previewHeight = default(bool), bool profileWidth = default(bool), bool profileHeight = default(bool), bool initialFont = default(bool), bool amazonS3AccessKeyId = default(bool), bool amazonS3SecretAccessKey = default(bool), bool amazonS3Bucket = default(bool), bool amazonS3Region = default(bool), bool amazonS3Endpoint = default(bool), bool amazonS3SSL = default(bool))
        {
            this.MaxFileSize = maxFileSize;
            this.DriverName = driverName;
            this.Directory = directory;
            this.EnablePublicLink = enablePublicLink;
            this.PublicLinkSalt = publicLinkSalt;
            this.ThumbnailWidth = thumbnailWidth;
            this.ThumbnailHeight = thumbnailHeight;
            this.PreviewWidth = previewWidth;
            this.PreviewHeight = previewHeight;
            this.ProfileWidth = profileWidth;
            this.ProfileHeight = profileHeight;
            this.InitialFont = initialFont;
            this.AmazonS3AccessKeyId = amazonS3AccessKeyId;
            this.AmazonS3SecretAccessKey = amazonS3SecretAccessKey;
            this.AmazonS3Bucket = amazonS3Bucket;
            this.AmazonS3Region = amazonS3Region;
            this.AmazonS3Endpoint = amazonS3Endpoint;
            this.AmazonS3SSL = amazonS3SSL;
        }
        
        /// <summary>
        /// Gets or Sets MaxFileSize
        /// </summary>
        [DataMember(Name="MaxFileSize", EmitDefaultValue=false)]
        public bool MaxFileSize { get; set; }

        /// <summary>
        /// Gets or Sets DriverName
        /// </summary>
        [DataMember(Name="DriverName", EmitDefaultValue=false)]
        public bool DriverName { get; set; }

        /// <summary>
        /// Gets or Sets Directory
        /// </summary>
        [DataMember(Name="Directory", EmitDefaultValue=false)]
        public bool Directory { get; set; }

        /// <summary>
        /// Gets or Sets EnablePublicLink
        /// </summary>
        [DataMember(Name="EnablePublicLink", EmitDefaultValue=false)]
        public bool EnablePublicLink { get; set; }

        /// <summary>
        /// Gets or Sets PublicLinkSalt
        /// </summary>
        [DataMember(Name="PublicLinkSalt", EmitDefaultValue=false)]
        public bool PublicLinkSalt { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailWidth
        /// </summary>
        [DataMember(Name="ThumbnailWidth", EmitDefaultValue=false)]
        public bool ThumbnailWidth { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailHeight
        /// </summary>
        [DataMember(Name="ThumbnailHeight", EmitDefaultValue=false)]
        public bool ThumbnailHeight { get; set; }

        /// <summary>
        /// Gets or Sets PreviewWidth
        /// </summary>
        [DataMember(Name="PreviewWidth", EmitDefaultValue=false)]
        public bool PreviewWidth { get; set; }

        /// <summary>
        /// Gets or Sets PreviewHeight
        /// </summary>
        [DataMember(Name="PreviewHeight", EmitDefaultValue=false)]
        public bool PreviewHeight { get; set; }

        /// <summary>
        /// Gets or Sets ProfileWidth
        /// </summary>
        [DataMember(Name="ProfileWidth", EmitDefaultValue=false)]
        public bool ProfileWidth { get; set; }

        /// <summary>
        /// Gets or Sets ProfileHeight
        /// </summary>
        [DataMember(Name="ProfileHeight", EmitDefaultValue=false)]
        public bool ProfileHeight { get; set; }

        /// <summary>
        /// Gets or Sets InitialFont
        /// </summary>
        [DataMember(Name="InitialFont", EmitDefaultValue=false)]
        public bool InitialFont { get; set; }

        /// <summary>
        /// Gets or Sets AmazonS3AccessKeyId
        /// </summary>
        [DataMember(Name="AmazonS3AccessKeyId", EmitDefaultValue=false)]
        public bool AmazonS3AccessKeyId { get; set; }

        /// <summary>
        /// Gets or Sets AmazonS3SecretAccessKey
        /// </summary>
        [DataMember(Name="AmazonS3SecretAccessKey", EmitDefaultValue=false)]
        public bool AmazonS3SecretAccessKey { get; set; }

        /// <summary>
        /// Gets or Sets AmazonS3Bucket
        /// </summary>
        [DataMember(Name="AmazonS3Bucket", EmitDefaultValue=false)]
        public bool AmazonS3Bucket { get; set; }

        /// <summary>
        /// Gets or Sets AmazonS3Region
        /// </summary>
        [DataMember(Name="AmazonS3Region", EmitDefaultValue=false)]
        public bool AmazonS3Region { get; set; }

        /// <summary>
        /// Gets or Sets AmazonS3Endpoint
        /// </summary>
        [DataMember(Name="AmazonS3Endpoint", EmitDefaultValue=false)]
        public bool AmazonS3Endpoint { get; set; }

        /// <summary>
        /// Gets or Sets AmazonS3SSL
        /// </summary>
        [DataMember(Name="AmazonS3SSL", EmitDefaultValue=false)]
        public bool AmazonS3SSL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvironmentConfigFileSettings {\n");
            sb.Append("  MaxFileSize: ").Append(MaxFileSize).Append("\n");
            sb.Append("  DriverName: ").Append(DriverName).Append("\n");
            sb.Append("  Directory: ").Append(Directory).Append("\n");
            sb.Append("  EnablePublicLink: ").Append(EnablePublicLink).Append("\n");
            sb.Append("  PublicLinkSalt: ").Append(PublicLinkSalt).Append("\n");
            sb.Append("  ThumbnailWidth: ").Append(ThumbnailWidth).Append("\n");
            sb.Append("  ThumbnailHeight: ").Append(ThumbnailHeight).Append("\n");
            sb.Append("  PreviewWidth: ").Append(PreviewWidth).Append("\n");
            sb.Append("  PreviewHeight: ").Append(PreviewHeight).Append("\n");
            sb.Append("  ProfileWidth: ").Append(ProfileWidth).Append("\n");
            sb.Append("  ProfileHeight: ").Append(ProfileHeight).Append("\n");
            sb.Append("  InitialFont: ").Append(InitialFont).Append("\n");
            sb.Append("  AmazonS3AccessKeyId: ").Append(AmazonS3AccessKeyId).Append("\n");
            sb.Append("  AmazonS3SecretAccessKey: ").Append(AmazonS3SecretAccessKey).Append("\n");
            sb.Append("  AmazonS3Bucket: ").Append(AmazonS3Bucket).Append("\n");
            sb.Append("  AmazonS3Region: ").Append(AmazonS3Region).Append("\n");
            sb.Append("  AmazonS3Endpoint: ").Append(AmazonS3Endpoint).Append("\n");
            sb.Append("  AmazonS3SSL: ").Append(AmazonS3SSL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnvironmentConfigFileSettings);
        }

        /// <summary>
        /// Returns true if EnvironmentConfigFileSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of EnvironmentConfigFileSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvironmentConfigFileSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.MaxFileSize == input.MaxFileSize ||
                    this.MaxFileSize.Equals(input.MaxFileSize)
                ) && 
                (
                    this.DriverName == input.DriverName ||
                    this.DriverName.Equals(input.DriverName)
                ) && 
                (
                    this.Directory == input.Directory ||
                    this.Directory.Equals(input.Directory)
                ) && 
                (
                    this.EnablePublicLink == input.EnablePublicLink ||
                    this.EnablePublicLink.Equals(input.EnablePublicLink)
                ) && 
                (
                    this.PublicLinkSalt == input.PublicLinkSalt ||
                    this.PublicLinkSalt.Equals(input.PublicLinkSalt)
                ) && 
                (
                    this.ThumbnailWidth == input.ThumbnailWidth ||
                    this.ThumbnailWidth.Equals(input.ThumbnailWidth)
                ) && 
                (
                    this.ThumbnailHeight == input.ThumbnailHeight ||
                    this.ThumbnailHeight.Equals(input.ThumbnailHeight)
                ) && 
                (
                    this.PreviewWidth == input.PreviewWidth ||
                    this.PreviewWidth.Equals(input.PreviewWidth)
                ) && 
                (
                    this.PreviewHeight == input.PreviewHeight ||
                    this.PreviewHeight.Equals(input.PreviewHeight)
                ) && 
                (
                    this.ProfileWidth == input.ProfileWidth ||
                    this.ProfileWidth.Equals(input.ProfileWidth)
                ) && 
                (
                    this.ProfileHeight == input.ProfileHeight ||
                    this.ProfileHeight.Equals(input.ProfileHeight)
                ) && 
                (
                    this.InitialFont == input.InitialFont ||
                    this.InitialFont.Equals(input.InitialFont)
                ) && 
                (
                    this.AmazonS3AccessKeyId == input.AmazonS3AccessKeyId ||
                    this.AmazonS3AccessKeyId.Equals(input.AmazonS3AccessKeyId)
                ) && 
                (
                    this.AmazonS3SecretAccessKey == input.AmazonS3SecretAccessKey ||
                    this.AmazonS3SecretAccessKey.Equals(input.AmazonS3SecretAccessKey)
                ) && 
                (
                    this.AmazonS3Bucket == input.AmazonS3Bucket ||
                    this.AmazonS3Bucket.Equals(input.AmazonS3Bucket)
                ) && 
                (
                    this.AmazonS3Region == input.AmazonS3Region ||
                    this.AmazonS3Region.Equals(input.AmazonS3Region)
                ) && 
                (
                    this.AmazonS3Endpoint == input.AmazonS3Endpoint ||
                    this.AmazonS3Endpoint.Equals(input.AmazonS3Endpoint)
                ) && 
                (
                    this.AmazonS3SSL == input.AmazonS3SSL ||
                    this.AmazonS3SSL.Equals(input.AmazonS3SSL)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.MaxFileSize.GetHashCode();
                hashCode = hashCode * 59 + this.DriverName.GetHashCode();
                hashCode = hashCode * 59 + this.Directory.GetHashCode();
                hashCode = hashCode * 59 + this.EnablePublicLink.GetHashCode();
                hashCode = hashCode * 59 + this.PublicLinkSalt.GetHashCode();
                hashCode = hashCode * 59 + this.ThumbnailWidth.GetHashCode();
                hashCode = hashCode * 59 + this.ThumbnailHeight.GetHashCode();
                hashCode = hashCode * 59 + this.PreviewWidth.GetHashCode();
                hashCode = hashCode * 59 + this.PreviewHeight.GetHashCode();
                hashCode = hashCode * 59 + this.ProfileWidth.GetHashCode();
                hashCode = hashCode * 59 + this.ProfileHeight.GetHashCode();
                hashCode = hashCode * 59 + this.InitialFont.GetHashCode();
                hashCode = hashCode * 59 + this.AmazonS3AccessKeyId.GetHashCode();
                hashCode = hashCode * 59 + this.AmazonS3SecretAccessKey.GetHashCode();
                hashCode = hashCode * 59 + this.AmazonS3Bucket.GetHashCode();
                hashCode = hashCode * 59 + this.AmazonS3Region.GetHashCode();
                hashCode = hashCode * 59 + this.AmazonS3Endpoint.GetHashCode();
                hashCode = hashCode * 59 + this.AmazonS3SSL.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
