/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// EnvironmentConfigGitLabSettings
    /// </summary>
    [DataContract]
    public partial class EnvironmentConfigGitLabSettings :  IEquatable<EnvironmentConfigGitLabSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentConfigGitLabSettings" /> class.
        /// </summary>
        /// <param name="enable">enable.</param>
        /// <param name="secret">secret.</param>
        /// <param name="id">id.</param>
        /// <param name="scope">scope.</param>
        /// <param name="authEndpoint">authEndpoint.</param>
        /// <param name="tokenEndpoint">tokenEndpoint.</param>
        /// <param name="userApiEndpoint">userApiEndpoint.</param>
        public EnvironmentConfigGitLabSettings(bool enable = default(bool), bool secret = default(bool), bool id = default(bool), bool scope = default(bool), bool authEndpoint = default(bool), bool tokenEndpoint = default(bool), bool userApiEndpoint = default(bool))
        {
            this.Enable = enable;
            this.Secret = secret;
            this.Id = id;
            this.Scope = scope;
            this.AuthEndpoint = authEndpoint;
            this.TokenEndpoint = tokenEndpoint;
            this.UserApiEndpoint = userApiEndpoint;
        }
        
        /// <summary>
        /// Gets or Sets Enable
        /// </summary>
        [DataMember(Name="Enable", EmitDefaultValue=false)]
        public bool Enable { get; set; }

        /// <summary>
        /// Gets or Sets Secret
        /// </summary>
        [DataMember(Name="Secret", EmitDefaultValue=false)]
        public bool Secret { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public bool Id { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="Scope", EmitDefaultValue=false)]
        public bool Scope { get; set; }

        /// <summary>
        /// Gets or Sets AuthEndpoint
        /// </summary>
        [DataMember(Name="AuthEndpoint", EmitDefaultValue=false)]
        public bool AuthEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets TokenEndpoint
        /// </summary>
        [DataMember(Name="TokenEndpoint", EmitDefaultValue=false)]
        public bool TokenEndpoint { get; set; }

        /// <summary>
        /// Gets or Sets UserApiEndpoint
        /// </summary>
        [DataMember(Name="UserApiEndpoint", EmitDefaultValue=false)]
        public bool UserApiEndpoint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvironmentConfigGitLabSettings {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  AuthEndpoint: ").Append(AuthEndpoint).Append("\n");
            sb.Append("  TokenEndpoint: ").Append(TokenEndpoint).Append("\n");
            sb.Append("  UserApiEndpoint: ").Append(UserApiEndpoint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnvironmentConfigGitLabSettings);
        }

        /// <summary>
        /// Returns true if EnvironmentConfigGitLabSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of EnvironmentConfigGitLabSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvironmentConfigGitLabSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.Secret == input.Secret ||
                    this.Secret.Equals(input.Secret)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Scope == input.Scope ||
                    this.Scope.Equals(input.Scope)
                ) && 
                (
                    this.AuthEndpoint == input.AuthEndpoint ||
                    this.AuthEndpoint.Equals(input.AuthEndpoint)
                ) && 
                (
                    this.TokenEndpoint == input.TokenEndpoint ||
                    this.TokenEndpoint.Equals(input.TokenEndpoint)
                ) && 
                (
                    this.UserApiEndpoint == input.UserApiEndpoint ||
                    this.UserApiEndpoint.Equals(input.UserApiEndpoint)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Enable.GetHashCode();
                hashCode = hashCode * 59 + this.Secret.GetHashCode();
                hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.Scope.GetHashCode();
                hashCode = hashCode * 59 + this.AuthEndpoint.GetHashCode();
                hashCode = hashCode * 59 + this.TokenEndpoint.GetHashCode();
                hashCode = hashCode * 59 + this.UserApiEndpoint.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
