/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// EnvironmentConfigServiceSettings
    /// </summary>
    [DataContract]
    public partial class EnvironmentConfigServiceSettings :  IEquatable<EnvironmentConfigServiceSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EnvironmentConfigServiceSettings" /> class.
        /// </summary>
        /// <param name="siteURL">siteURL.</param>
        /// <param name="listenAddress">listenAddress.</param>
        /// <param name="connectionSecurity">connectionSecurity.</param>
        /// <param name="tLSCertFile">tLSCertFile.</param>
        /// <param name="tLSKeyFile">tLSKeyFile.</param>
        /// <param name="useLetsEncrypt">useLetsEncrypt.</param>
        /// <param name="letsEncryptCertificateCacheFile">letsEncryptCertificateCacheFile.</param>
        /// <param name="forward80To443">forward80To443.</param>
        /// <param name="readTimeout">readTimeout.</param>
        /// <param name="writeTimeout">writeTimeout.</param>
        /// <param name="maximumLoginAttempts">maximumLoginAttempts.</param>
        /// <param name="segmentDeveloperKey">segmentDeveloperKey.</param>
        /// <param name="googleDeveloperKey">googleDeveloperKey.</param>
        /// <param name="enableOAuthServiceProvider">enableOAuthServiceProvider.</param>
        /// <param name="enableIncomingWebhooks">enableIncomingWebhooks.</param>
        /// <param name="enableOutgoingWebhooks">enableOutgoingWebhooks.</param>
        /// <param name="enableCommands">enableCommands.</param>
        /// <param name="enableOnlyAdminIntegrations">enableOnlyAdminIntegrations.</param>
        /// <param name="enablePostUsernameOverride">enablePostUsernameOverride.</param>
        /// <param name="enablePostIconOverride">enablePostIconOverride.</param>
        /// <param name="enableTesting">enableTesting.</param>
        /// <param name="enableDeveloper">enableDeveloper.</param>
        /// <param name="enableSecurityFixAlert">enableSecurityFixAlert.</param>
        /// <param name="enableInsecureOutgoingConnections">enableInsecureOutgoingConnections.</param>
        /// <param name="enableMultifactorAuthentication">enableMultifactorAuthentication.</param>
        /// <param name="enforceMultifactorAuthentication">enforceMultifactorAuthentication.</param>
        /// <param name="allowCorsFrom">allowCorsFrom.</param>
        /// <param name="sessionLengthWebInDays">sessionLengthWebInDays.</param>
        /// <param name="sessionLengthMobileInDays">sessionLengthMobileInDays.</param>
        /// <param name="sessionLengthSSOInDays">sessionLengthSSOInDays.</param>
        /// <param name="sessionCacheInMinutes">sessionCacheInMinutes.</param>
        /// <param name="websocketSecurePort">websocketSecurePort.</param>
        /// <param name="websocketPort">websocketPort.</param>
        /// <param name="webserverMode">webserverMode.</param>
        /// <param name="enableCustomEmoji">enableCustomEmoji.</param>
        /// <param name="restrictCustomEmojiCreation">restrictCustomEmojiCreation.</param>
        public EnvironmentConfigServiceSettings(bool siteURL = default(bool), bool listenAddress = default(bool), bool connectionSecurity = default(bool), bool tLSCertFile = default(bool), bool tLSKeyFile = default(bool), bool useLetsEncrypt = default(bool), bool letsEncryptCertificateCacheFile = default(bool), bool forward80To443 = default(bool), bool readTimeout = default(bool), bool writeTimeout = default(bool), bool maximumLoginAttempts = default(bool), bool segmentDeveloperKey = default(bool), bool googleDeveloperKey = default(bool), bool enableOAuthServiceProvider = default(bool), bool enableIncomingWebhooks = default(bool), bool enableOutgoingWebhooks = default(bool), bool enableCommands = default(bool), bool enableOnlyAdminIntegrations = default(bool), bool enablePostUsernameOverride = default(bool), bool enablePostIconOverride = default(bool), bool enableTesting = default(bool), bool enableDeveloper = default(bool), bool enableSecurityFixAlert = default(bool), bool enableInsecureOutgoingConnections = default(bool), bool enableMultifactorAuthentication = default(bool), bool enforceMultifactorAuthentication = default(bool), bool allowCorsFrom = default(bool), bool sessionLengthWebInDays = default(bool), bool sessionLengthMobileInDays = default(bool), bool sessionLengthSSOInDays = default(bool), bool sessionCacheInMinutes = default(bool), bool websocketSecurePort = default(bool), bool websocketPort = default(bool), bool webserverMode = default(bool), bool enableCustomEmoji = default(bool), bool restrictCustomEmojiCreation = default(bool))
        {
            this.SiteURL = siteURL;
            this.ListenAddress = listenAddress;
            this.ConnectionSecurity = connectionSecurity;
            this.TLSCertFile = tLSCertFile;
            this.TLSKeyFile = tLSKeyFile;
            this.UseLetsEncrypt = useLetsEncrypt;
            this.LetsEncryptCertificateCacheFile = letsEncryptCertificateCacheFile;
            this.Forward80To443 = forward80To443;
            this.ReadTimeout = readTimeout;
            this.WriteTimeout = writeTimeout;
            this.MaximumLoginAttempts = maximumLoginAttempts;
            this.SegmentDeveloperKey = segmentDeveloperKey;
            this.GoogleDeveloperKey = googleDeveloperKey;
            this.EnableOAuthServiceProvider = enableOAuthServiceProvider;
            this.EnableIncomingWebhooks = enableIncomingWebhooks;
            this.EnableOutgoingWebhooks = enableOutgoingWebhooks;
            this.EnableCommands = enableCommands;
            this.EnableOnlyAdminIntegrations = enableOnlyAdminIntegrations;
            this.EnablePostUsernameOverride = enablePostUsernameOverride;
            this.EnablePostIconOverride = enablePostIconOverride;
            this.EnableTesting = enableTesting;
            this.EnableDeveloper = enableDeveloper;
            this.EnableSecurityFixAlert = enableSecurityFixAlert;
            this.EnableInsecureOutgoingConnections = enableInsecureOutgoingConnections;
            this.EnableMultifactorAuthentication = enableMultifactorAuthentication;
            this.EnforceMultifactorAuthentication = enforceMultifactorAuthentication;
            this.AllowCorsFrom = allowCorsFrom;
            this.SessionLengthWebInDays = sessionLengthWebInDays;
            this.SessionLengthMobileInDays = sessionLengthMobileInDays;
            this.SessionLengthSSOInDays = sessionLengthSSOInDays;
            this.SessionCacheInMinutes = sessionCacheInMinutes;
            this.WebsocketSecurePort = websocketSecurePort;
            this.WebsocketPort = websocketPort;
            this.WebserverMode = webserverMode;
            this.EnableCustomEmoji = enableCustomEmoji;
            this.RestrictCustomEmojiCreation = restrictCustomEmojiCreation;
        }
        
        /// <summary>
        /// Gets or Sets SiteURL
        /// </summary>
        [DataMember(Name="SiteURL", EmitDefaultValue=false)]
        public bool SiteURL { get; set; }

        /// <summary>
        /// Gets or Sets ListenAddress
        /// </summary>
        [DataMember(Name="ListenAddress", EmitDefaultValue=false)]
        public bool ListenAddress { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionSecurity
        /// </summary>
        [DataMember(Name="ConnectionSecurity", EmitDefaultValue=false)]
        public bool ConnectionSecurity { get; set; }

        /// <summary>
        /// Gets or Sets TLSCertFile
        /// </summary>
        [DataMember(Name="TLSCertFile", EmitDefaultValue=false)]
        public bool TLSCertFile { get; set; }

        /// <summary>
        /// Gets or Sets TLSKeyFile
        /// </summary>
        [DataMember(Name="TLSKeyFile", EmitDefaultValue=false)]
        public bool TLSKeyFile { get; set; }

        /// <summary>
        /// Gets or Sets UseLetsEncrypt
        /// </summary>
        [DataMember(Name="UseLetsEncrypt", EmitDefaultValue=false)]
        public bool UseLetsEncrypt { get; set; }

        /// <summary>
        /// Gets or Sets LetsEncryptCertificateCacheFile
        /// </summary>
        [DataMember(Name="LetsEncryptCertificateCacheFile", EmitDefaultValue=false)]
        public bool LetsEncryptCertificateCacheFile { get; set; }

        /// <summary>
        /// Gets or Sets Forward80To443
        /// </summary>
        [DataMember(Name="Forward80To443", EmitDefaultValue=false)]
        public bool Forward80To443 { get; set; }

        /// <summary>
        /// Gets or Sets ReadTimeout
        /// </summary>
        [DataMember(Name="ReadTimeout", EmitDefaultValue=false)]
        public bool ReadTimeout { get; set; }

        /// <summary>
        /// Gets or Sets WriteTimeout
        /// </summary>
        [DataMember(Name="WriteTimeout", EmitDefaultValue=false)]
        public bool WriteTimeout { get; set; }

        /// <summary>
        /// Gets or Sets MaximumLoginAttempts
        /// </summary>
        [DataMember(Name="MaximumLoginAttempts", EmitDefaultValue=false)]
        public bool MaximumLoginAttempts { get; set; }

        /// <summary>
        /// Gets or Sets SegmentDeveloperKey
        /// </summary>
        [DataMember(Name="SegmentDeveloperKey", EmitDefaultValue=false)]
        public bool SegmentDeveloperKey { get; set; }

        /// <summary>
        /// Gets or Sets GoogleDeveloperKey
        /// </summary>
        [DataMember(Name="GoogleDeveloperKey", EmitDefaultValue=false)]
        public bool GoogleDeveloperKey { get; set; }

        /// <summary>
        /// Gets or Sets EnableOAuthServiceProvider
        /// </summary>
        [DataMember(Name="EnableOAuthServiceProvider", EmitDefaultValue=false)]
        public bool EnableOAuthServiceProvider { get; set; }

        /// <summary>
        /// Gets or Sets EnableIncomingWebhooks
        /// </summary>
        [DataMember(Name="EnableIncomingWebhooks", EmitDefaultValue=false)]
        public bool EnableIncomingWebhooks { get; set; }

        /// <summary>
        /// Gets or Sets EnableOutgoingWebhooks
        /// </summary>
        [DataMember(Name="EnableOutgoingWebhooks", EmitDefaultValue=false)]
        public bool EnableOutgoingWebhooks { get; set; }

        /// <summary>
        /// Gets or Sets EnableCommands
        /// </summary>
        [DataMember(Name="EnableCommands", EmitDefaultValue=false)]
        public bool EnableCommands { get; set; }

        /// <summary>
        /// Gets or Sets EnableOnlyAdminIntegrations
        /// </summary>
        [DataMember(Name="EnableOnlyAdminIntegrations", EmitDefaultValue=false)]
        public bool EnableOnlyAdminIntegrations { get; set; }

        /// <summary>
        /// Gets or Sets EnablePostUsernameOverride
        /// </summary>
        [DataMember(Name="EnablePostUsernameOverride", EmitDefaultValue=false)]
        public bool EnablePostUsernameOverride { get; set; }

        /// <summary>
        /// Gets or Sets EnablePostIconOverride
        /// </summary>
        [DataMember(Name="EnablePostIconOverride", EmitDefaultValue=false)]
        public bool EnablePostIconOverride { get; set; }

        /// <summary>
        /// Gets or Sets EnableTesting
        /// </summary>
        [DataMember(Name="EnableTesting", EmitDefaultValue=false)]
        public bool EnableTesting { get; set; }

        /// <summary>
        /// Gets or Sets EnableDeveloper
        /// </summary>
        [DataMember(Name="EnableDeveloper", EmitDefaultValue=false)]
        public bool EnableDeveloper { get; set; }

        /// <summary>
        /// Gets or Sets EnableSecurityFixAlert
        /// </summary>
        [DataMember(Name="EnableSecurityFixAlert", EmitDefaultValue=false)]
        public bool EnableSecurityFixAlert { get; set; }

        /// <summary>
        /// Gets or Sets EnableInsecureOutgoingConnections
        /// </summary>
        [DataMember(Name="EnableInsecureOutgoingConnections", EmitDefaultValue=false)]
        public bool EnableInsecureOutgoingConnections { get; set; }

        /// <summary>
        /// Gets or Sets EnableMultifactorAuthentication
        /// </summary>
        [DataMember(Name="EnableMultifactorAuthentication", EmitDefaultValue=false)]
        public bool EnableMultifactorAuthentication { get; set; }

        /// <summary>
        /// Gets or Sets EnforceMultifactorAuthentication
        /// </summary>
        [DataMember(Name="EnforceMultifactorAuthentication", EmitDefaultValue=false)]
        public bool EnforceMultifactorAuthentication { get; set; }

        /// <summary>
        /// Gets or Sets AllowCorsFrom
        /// </summary>
        [DataMember(Name="AllowCorsFrom", EmitDefaultValue=false)]
        public bool AllowCorsFrom { get; set; }

        /// <summary>
        /// Gets or Sets SessionLengthWebInDays
        /// </summary>
        [DataMember(Name="SessionLengthWebInDays", EmitDefaultValue=false)]
        public bool SessionLengthWebInDays { get; set; }

        /// <summary>
        /// Gets or Sets SessionLengthMobileInDays
        /// </summary>
        [DataMember(Name="SessionLengthMobileInDays", EmitDefaultValue=false)]
        public bool SessionLengthMobileInDays { get; set; }

        /// <summary>
        /// Gets or Sets SessionLengthSSOInDays
        /// </summary>
        [DataMember(Name="SessionLengthSSOInDays", EmitDefaultValue=false)]
        public bool SessionLengthSSOInDays { get; set; }

        /// <summary>
        /// Gets or Sets SessionCacheInMinutes
        /// </summary>
        [DataMember(Name="SessionCacheInMinutes", EmitDefaultValue=false)]
        public bool SessionCacheInMinutes { get; set; }

        /// <summary>
        /// Gets or Sets WebsocketSecurePort
        /// </summary>
        [DataMember(Name="WebsocketSecurePort", EmitDefaultValue=false)]
        public bool WebsocketSecurePort { get; set; }

        /// <summary>
        /// Gets or Sets WebsocketPort
        /// </summary>
        [DataMember(Name="WebsocketPort", EmitDefaultValue=false)]
        public bool WebsocketPort { get; set; }

        /// <summary>
        /// Gets or Sets WebserverMode
        /// </summary>
        [DataMember(Name="WebserverMode", EmitDefaultValue=false)]
        public bool WebserverMode { get; set; }

        /// <summary>
        /// Gets or Sets EnableCustomEmoji
        /// </summary>
        [DataMember(Name="EnableCustomEmoji", EmitDefaultValue=false)]
        public bool EnableCustomEmoji { get; set; }

        /// <summary>
        /// Gets or Sets RestrictCustomEmojiCreation
        /// </summary>
        [DataMember(Name="RestrictCustomEmojiCreation", EmitDefaultValue=false)]
        public bool RestrictCustomEmojiCreation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvironmentConfigServiceSettings {\n");
            sb.Append("  SiteURL: ").Append(SiteURL).Append("\n");
            sb.Append("  ListenAddress: ").Append(ListenAddress).Append("\n");
            sb.Append("  ConnectionSecurity: ").Append(ConnectionSecurity).Append("\n");
            sb.Append("  TLSCertFile: ").Append(TLSCertFile).Append("\n");
            sb.Append("  TLSKeyFile: ").Append(TLSKeyFile).Append("\n");
            sb.Append("  UseLetsEncrypt: ").Append(UseLetsEncrypt).Append("\n");
            sb.Append("  LetsEncryptCertificateCacheFile: ").Append(LetsEncryptCertificateCacheFile).Append("\n");
            sb.Append("  Forward80To443: ").Append(Forward80To443).Append("\n");
            sb.Append("  ReadTimeout: ").Append(ReadTimeout).Append("\n");
            sb.Append("  WriteTimeout: ").Append(WriteTimeout).Append("\n");
            sb.Append("  MaximumLoginAttempts: ").Append(MaximumLoginAttempts).Append("\n");
            sb.Append("  SegmentDeveloperKey: ").Append(SegmentDeveloperKey).Append("\n");
            sb.Append("  GoogleDeveloperKey: ").Append(GoogleDeveloperKey).Append("\n");
            sb.Append("  EnableOAuthServiceProvider: ").Append(EnableOAuthServiceProvider).Append("\n");
            sb.Append("  EnableIncomingWebhooks: ").Append(EnableIncomingWebhooks).Append("\n");
            sb.Append("  EnableOutgoingWebhooks: ").Append(EnableOutgoingWebhooks).Append("\n");
            sb.Append("  EnableCommands: ").Append(EnableCommands).Append("\n");
            sb.Append("  EnableOnlyAdminIntegrations: ").Append(EnableOnlyAdminIntegrations).Append("\n");
            sb.Append("  EnablePostUsernameOverride: ").Append(EnablePostUsernameOverride).Append("\n");
            sb.Append("  EnablePostIconOverride: ").Append(EnablePostIconOverride).Append("\n");
            sb.Append("  EnableTesting: ").Append(EnableTesting).Append("\n");
            sb.Append("  EnableDeveloper: ").Append(EnableDeveloper).Append("\n");
            sb.Append("  EnableSecurityFixAlert: ").Append(EnableSecurityFixAlert).Append("\n");
            sb.Append("  EnableInsecureOutgoingConnections: ").Append(EnableInsecureOutgoingConnections).Append("\n");
            sb.Append("  EnableMultifactorAuthentication: ").Append(EnableMultifactorAuthentication).Append("\n");
            sb.Append("  EnforceMultifactorAuthentication: ").Append(EnforceMultifactorAuthentication).Append("\n");
            sb.Append("  AllowCorsFrom: ").Append(AllowCorsFrom).Append("\n");
            sb.Append("  SessionLengthWebInDays: ").Append(SessionLengthWebInDays).Append("\n");
            sb.Append("  SessionLengthMobileInDays: ").Append(SessionLengthMobileInDays).Append("\n");
            sb.Append("  SessionLengthSSOInDays: ").Append(SessionLengthSSOInDays).Append("\n");
            sb.Append("  SessionCacheInMinutes: ").Append(SessionCacheInMinutes).Append("\n");
            sb.Append("  WebsocketSecurePort: ").Append(WebsocketSecurePort).Append("\n");
            sb.Append("  WebsocketPort: ").Append(WebsocketPort).Append("\n");
            sb.Append("  WebserverMode: ").Append(WebserverMode).Append("\n");
            sb.Append("  EnableCustomEmoji: ").Append(EnableCustomEmoji).Append("\n");
            sb.Append("  RestrictCustomEmojiCreation: ").Append(RestrictCustomEmojiCreation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EnvironmentConfigServiceSettings);
        }

        /// <summary>
        /// Returns true if EnvironmentConfigServiceSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of EnvironmentConfigServiceSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvironmentConfigServiceSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.SiteURL == input.SiteURL ||
                    this.SiteURL.Equals(input.SiteURL)
                ) && 
                (
                    this.ListenAddress == input.ListenAddress ||
                    this.ListenAddress.Equals(input.ListenAddress)
                ) && 
                (
                    this.ConnectionSecurity == input.ConnectionSecurity ||
                    this.ConnectionSecurity.Equals(input.ConnectionSecurity)
                ) && 
                (
                    this.TLSCertFile == input.TLSCertFile ||
                    this.TLSCertFile.Equals(input.TLSCertFile)
                ) && 
                (
                    this.TLSKeyFile == input.TLSKeyFile ||
                    this.TLSKeyFile.Equals(input.TLSKeyFile)
                ) && 
                (
                    this.UseLetsEncrypt == input.UseLetsEncrypt ||
                    this.UseLetsEncrypt.Equals(input.UseLetsEncrypt)
                ) && 
                (
                    this.LetsEncryptCertificateCacheFile == input.LetsEncryptCertificateCacheFile ||
                    this.LetsEncryptCertificateCacheFile.Equals(input.LetsEncryptCertificateCacheFile)
                ) && 
                (
                    this.Forward80To443 == input.Forward80To443 ||
                    this.Forward80To443.Equals(input.Forward80To443)
                ) && 
                (
                    this.ReadTimeout == input.ReadTimeout ||
                    this.ReadTimeout.Equals(input.ReadTimeout)
                ) && 
                (
                    this.WriteTimeout == input.WriteTimeout ||
                    this.WriteTimeout.Equals(input.WriteTimeout)
                ) && 
                (
                    this.MaximumLoginAttempts == input.MaximumLoginAttempts ||
                    this.MaximumLoginAttempts.Equals(input.MaximumLoginAttempts)
                ) && 
                (
                    this.SegmentDeveloperKey == input.SegmentDeveloperKey ||
                    this.SegmentDeveloperKey.Equals(input.SegmentDeveloperKey)
                ) && 
                (
                    this.GoogleDeveloperKey == input.GoogleDeveloperKey ||
                    this.GoogleDeveloperKey.Equals(input.GoogleDeveloperKey)
                ) && 
                (
                    this.EnableOAuthServiceProvider == input.EnableOAuthServiceProvider ||
                    this.EnableOAuthServiceProvider.Equals(input.EnableOAuthServiceProvider)
                ) && 
                (
                    this.EnableIncomingWebhooks == input.EnableIncomingWebhooks ||
                    this.EnableIncomingWebhooks.Equals(input.EnableIncomingWebhooks)
                ) && 
                (
                    this.EnableOutgoingWebhooks == input.EnableOutgoingWebhooks ||
                    this.EnableOutgoingWebhooks.Equals(input.EnableOutgoingWebhooks)
                ) && 
                (
                    this.EnableCommands == input.EnableCommands ||
                    this.EnableCommands.Equals(input.EnableCommands)
                ) && 
                (
                    this.EnableOnlyAdminIntegrations == input.EnableOnlyAdminIntegrations ||
                    this.EnableOnlyAdminIntegrations.Equals(input.EnableOnlyAdminIntegrations)
                ) && 
                (
                    this.EnablePostUsernameOverride == input.EnablePostUsernameOverride ||
                    this.EnablePostUsernameOverride.Equals(input.EnablePostUsernameOverride)
                ) && 
                (
                    this.EnablePostIconOverride == input.EnablePostIconOverride ||
                    this.EnablePostIconOverride.Equals(input.EnablePostIconOverride)
                ) && 
                (
                    this.EnableTesting == input.EnableTesting ||
                    this.EnableTesting.Equals(input.EnableTesting)
                ) && 
                (
                    this.EnableDeveloper == input.EnableDeveloper ||
                    this.EnableDeveloper.Equals(input.EnableDeveloper)
                ) && 
                (
                    this.EnableSecurityFixAlert == input.EnableSecurityFixAlert ||
                    this.EnableSecurityFixAlert.Equals(input.EnableSecurityFixAlert)
                ) && 
                (
                    this.EnableInsecureOutgoingConnections == input.EnableInsecureOutgoingConnections ||
                    this.EnableInsecureOutgoingConnections.Equals(input.EnableInsecureOutgoingConnections)
                ) && 
                (
                    this.EnableMultifactorAuthentication == input.EnableMultifactorAuthentication ||
                    this.EnableMultifactorAuthentication.Equals(input.EnableMultifactorAuthentication)
                ) && 
                (
                    this.EnforceMultifactorAuthentication == input.EnforceMultifactorAuthentication ||
                    this.EnforceMultifactorAuthentication.Equals(input.EnforceMultifactorAuthentication)
                ) && 
                (
                    this.AllowCorsFrom == input.AllowCorsFrom ||
                    this.AllowCorsFrom.Equals(input.AllowCorsFrom)
                ) && 
                (
                    this.SessionLengthWebInDays == input.SessionLengthWebInDays ||
                    this.SessionLengthWebInDays.Equals(input.SessionLengthWebInDays)
                ) && 
                (
                    this.SessionLengthMobileInDays == input.SessionLengthMobileInDays ||
                    this.SessionLengthMobileInDays.Equals(input.SessionLengthMobileInDays)
                ) && 
                (
                    this.SessionLengthSSOInDays == input.SessionLengthSSOInDays ||
                    this.SessionLengthSSOInDays.Equals(input.SessionLengthSSOInDays)
                ) && 
                (
                    this.SessionCacheInMinutes == input.SessionCacheInMinutes ||
                    this.SessionCacheInMinutes.Equals(input.SessionCacheInMinutes)
                ) && 
                (
                    this.WebsocketSecurePort == input.WebsocketSecurePort ||
                    this.WebsocketSecurePort.Equals(input.WebsocketSecurePort)
                ) && 
                (
                    this.WebsocketPort == input.WebsocketPort ||
                    this.WebsocketPort.Equals(input.WebsocketPort)
                ) && 
                (
                    this.WebserverMode == input.WebserverMode ||
                    this.WebserverMode.Equals(input.WebserverMode)
                ) && 
                (
                    this.EnableCustomEmoji == input.EnableCustomEmoji ||
                    this.EnableCustomEmoji.Equals(input.EnableCustomEmoji)
                ) && 
                (
                    this.RestrictCustomEmojiCreation == input.RestrictCustomEmojiCreation ||
                    this.RestrictCustomEmojiCreation.Equals(input.RestrictCustomEmojiCreation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.SiteURL.GetHashCode();
                hashCode = hashCode * 59 + this.ListenAddress.GetHashCode();
                hashCode = hashCode * 59 + this.ConnectionSecurity.GetHashCode();
                hashCode = hashCode * 59 + this.TLSCertFile.GetHashCode();
                hashCode = hashCode * 59 + this.TLSKeyFile.GetHashCode();
                hashCode = hashCode * 59 + this.UseLetsEncrypt.GetHashCode();
                hashCode = hashCode * 59 + this.LetsEncryptCertificateCacheFile.GetHashCode();
                hashCode = hashCode * 59 + this.Forward80To443.GetHashCode();
                hashCode = hashCode * 59 + this.ReadTimeout.GetHashCode();
                hashCode = hashCode * 59 + this.WriteTimeout.GetHashCode();
                hashCode = hashCode * 59 + this.MaximumLoginAttempts.GetHashCode();
                hashCode = hashCode * 59 + this.SegmentDeveloperKey.GetHashCode();
                hashCode = hashCode * 59 + this.GoogleDeveloperKey.GetHashCode();
                hashCode = hashCode * 59 + this.EnableOAuthServiceProvider.GetHashCode();
                hashCode = hashCode * 59 + this.EnableIncomingWebhooks.GetHashCode();
                hashCode = hashCode * 59 + this.EnableOutgoingWebhooks.GetHashCode();
                hashCode = hashCode * 59 + this.EnableCommands.GetHashCode();
                hashCode = hashCode * 59 + this.EnableOnlyAdminIntegrations.GetHashCode();
                hashCode = hashCode * 59 + this.EnablePostUsernameOverride.GetHashCode();
                hashCode = hashCode * 59 + this.EnablePostIconOverride.GetHashCode();
                hashCode = hashCode * 59 + this.EnableTesting.GetHashCode();
                hashCode = hashCode * 59 + this.EnableDeveloper.GetHashCode();
                hashCode = hashCode * 59 + this.EnableSecurityFixAlert.GetHashCode();
                hashCode = hashCode * 59 + this.EnableInsecureOutgoingConnections.GetHashCode();
                hashCode = hashCode * 59 + this.EnableMultifactorAuthentication.GetHashCode();
                hashCode = hashCode * 59 + this.EnforceMultifactorAuthentication.GetHashCode();
                hashCode = hashCode * 59 + this.AllowCorsFrom.GetHashCode();
                hashCode = hashCode * 59 + this.SessionLengthWebInDays.GetHashCode();
                hashCode = hashCode * 59 + this.SessionLengthMobileInDays.GetHashCode();
                hashCode = hashCode * 59 + this.SessionLengthSSOInDays.GetHashCode();
                hashCode = hashCode * 59 + this.SessionCacheInMinutes.GetHashCode();
                hashCode = hashCode * 59 + this.WebsocketSecurePort.GetHashCode();
                hashCode = hashCode * 59 + this.WebsocketPort.GetHashCode();
                hashCode = hashCode * 59 + this.WebserverMode.GetHashCode();
                hashCode = hashCode * 59 + this.EnableCustomEmoji.GetHashCode();
                hashCode = hashCode * 59 + this.RestrictCustomEmojiCreation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
