/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// PluginManifest
    /// </summary>
    [DataContract]
    public partial class PluginManifest :  IEquatable<PluginManifest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginManifest" /> class.
        /// </summary>
        /// <param name="id">Globally unique identifier that represents the plugin..</param>
        /// <param name="name">Name of the plugin..</param>
        /// <param name="description">Description of what the plugin is and does..</param>
        /// <param name="version">Version number of the plugin..</param>
        /// <param name="minServerVersion">The minimum Mattermost server version required for the plugin.  Available as server version 5.6. .</param>
        /// <param name="backend">backend.</param>
        /// <param name="server">server.</param>
        /// <param name="webapp">webapp.</param>
        /// <param name="settingsSchema">Settings schema used to define the System Console UI for the plugin..</param>
        public PluginManifest(string id = default(string), string name = default(string), string description = default(string), string version = default(string), string minServerVersion = default(string), PluginManifestBackend backend = default(PluginManifestBackend), PluginManifestServer server = default(PluginManifestServer), PluginManifestWebapp webapp = default(PluginManifestWebapp), Object settingsSchema = default(Object))
        {
            this.Id = id;
            this.Name = name;
            this.Description = description;
            this.Version = version;
            this.MinServerVersion = minServerVersion;
            this.Backend = backend;
            this.Server = server;
            this.Webapp = webapp;
            this.SettingsSchema = settingsSchema;
        }
        
        /// <summary>
        /// Globally unique identifier that represents the plugin.
        /// </summary>
        /// <value>Globally unique identifier that represents the plugin.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Name of the plugin.
        /// </summary>
        /// <value>Name of the plugin.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Description of what the plugin is and does.
        /// </summary>
        /// <value>Description of what the plugin is and does.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Version number of the plugin.
        /// </summary>
        /// <value>Version number of the plugin.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// The minimum Mattermost server version required for the plugin.  Available as server version 5.6. 
        /// </summary>
        /// <value>The minimum Mattermost server version required for the plugin.  Available as server version 5.6. </value>
        [DataMember(Name="min_server_version", EmitDefaultValue=false)]
        public string MinServerVersion { get; set; }

        /// <summary>
        /// Gets or Sets Backend
        /// </summary>
        [DataMember(Name="backend", EmitDefaultValue=false)]
        public PluginManifestBackend Backend { get; set; }

        /// <summary>
        /// Gets or Sets Server
        /// </summary>
        [DataMember(Name="server", EmitDefaultValue=false)]
        public PluginManifestServer Server { get; set; }

        /// <summary>
        /// Gets or Sets Webapp
        /// </summary>
        [DataMember(Name="webapp", EmitDefaultValue=false)]
        public PluginManifestWebapp Webapp { get; set; }

        /// <summary>
        /// Settings schema used to define the System Console UI for the plugin.
        /// </summary>
        /// <value>Settings schema used to define the System Console UI for the plugin.</value>
        [DataMember(Name="settings_schema", EmitDefaultValue=false)]
        public Object SettingsSchema { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PluginManifest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  MinServerVersion: ").Append(MinServerVersion).Append("\n");
            sb.Append("  Backend: ").Append(Backend).Append("\n");
            sb.Append("  Server: ").Append(Server).Append("\n");
            sb.Append("  Webapp: ").Append(Webapp).Append("\n");
            sb.Append("  SettingsSchema: ").Append(SettingsSchema).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PluginManifest);
        }

        /// <summary>
        /// Returns true if PluginManifest instances are equal
        /// </summary>
        /// <param name="input">Instance of PluginManifest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PluginManifest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Version == input.Version ||
                    (this.Version != null &&
                    this.Version.Equals(input.Version))
                ) && 
                (
                    this.MinServerVersion == input.MinServerVersion ||
                    (this.MinServerVersion != null &&
                    this.MinServerVersion.Equals(input.MinServerVersion))
                ) && 
                (
                    this.Backend == input.Backend ||
                    (this.Backend != null &&
                    this.Backend.Equals(input.Backend))
                ) && 
                (
                    this.Server == input.Server ||
                    (this.Server != null &&
                    this.Server.Equals(input.Server))
                ) && 
                (
                    this.Webapp == input.Webapp ||
                    (this.Webapp != null &&
                    this.Webapp.Equals(input.Webapp))
                ) && 
                (
                    this.SettingsSchema == input.SettingsSchema ||
                    (this.SettingsSchema != null &&
                    this.SettingsSchema.Equals(input.SettingsSchema))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Version != null)
                    hashCode = hashCode * 59 + this.Version.GetHashCode();
                if (this.MinServerVersion != null)
                    hashCode = hashCode * 59 + this.MinServerVersion.GetHashCode();
                if (this.Backend != null)
                    hashCode = hashCode * 59 + this.Backend.GetHashCode();
                if (this.Server != null)
                    hashCode = hashCode * 59 + this.Server.GetHashCode();
                if (this.Webapp != null)
                    hashCode = hashCode * 59 + this.Webapp.GetHashCode();
                if (this.SettingsSchema != null)
                    hashCode = hashCode * 59 + this.SettingsSchema.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
