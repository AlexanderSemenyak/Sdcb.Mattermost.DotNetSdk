/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// Post
    /// </summary>
    [DataContract]
    public partial class Post :  IEquatable<Post>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Post" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="createAt">The time in milliseconds a post was created.</param>
        /// <param name="updateAt">The time in milliseconds a post was last updated.</param>
        /// <param name="deleteAt">The time in milliseconds a post was deleted.</param>
        /// <param name="editAt">editAt.</param>
        /// <param name="userId">userId.</param>
        /// <param name="channelId">channelId.</param>
        /// <param name="rootId">rootId.</param>
        /// <param name="parentId">parentId.</param>
        /// <param name="originalId">originalId.</param>
        /// <param name="message">message.</param>
        /// <param name="type">type.</param>
        /// <param name="props">props.</param>
        /// <param name="hashtag">hashtag.</param>
        /// <param name="filenames">This field will only appear on some posts created before Mattermost 3.5 and has since been deprecated..</param>
        /// <param name="fileIds">fileIds.</param>
        /// <param name="pendingPostId">pendingPostId.</param>
        /// <param name="metadata">metadata.</param>
        public Post(string id = default(string), long createAt = default(long), long updateAt = default(long), long deleteAt = default(long), long editAt = default(long), string userId = default(string), string channelId = default(string), string rootId = default(string), string parentId = default(string), string originalId = default(string), string message = default(string), string type = default(string), Object props = default(Object), string hashtag = default(string), List<string> filenames = default(List<string>), List<string> fileIds = default(List<string>), string pendingPostId = default(string), PostMetadata metadata = default(PostMetadata))
        {
            this.Id = id;
            this.CreateAt = createAt;
            this.UpdateAt = updateAt;
            this.DeleteAt = deleteAt;
            this.EditAt = editAt;
            this.UserId = userId;
            this.ChannelId = channelId;
            this.RootId = rootId;
            this.ParentId = parentId;
            this.OriginalId = originalId;
            this.Message = message;
            this.Type = type;
            this.Props = props;
            this.Hashtag = hashtag;
            this.Filenames = filenames;
            this.FileIds = fileIds;
            this.PendingPostId = pendingPostId;
            this.Metadata = metadata;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The time in milliseconds a post was created
        /// </summary>
        /// <value>The time in milliseconds a post was created</value>
        [DataMember(Name="create_at", EmitDefaultValue=false)]
        public long CreateAt { get; set; }

        /// <summary>
        /// The time in milliseconds a post was last updated
        /// </summary>
        /// <value>The time in milliseconds a post was last updated</value>
        [DataMember(Name="update_at", EmitDefaultValue=false)]
        public long UpdateAt { get; set; }

        /// <summary>
        /// The time in milliseconds a post was deleted
        /// </summary>
        /// <value>The time in milliseconds a post was deleted</value>
        [DataMember(Name="delete_at", EmitDefaultValue=false)]
        public long DeleteAt { get; set; }

        /// <summary>
        /// Gets or Sets EditAt
        /// </summary>
        [DataMember(Name="edit_at", EmitDefaultValue=false)]
        public long EditAt { get; set; }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name="user_id", EmitDefaultValue=false)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets ChannelId
        /// </summary>
        [DataMember(Name="channel_id", EmitDefaultValue=false)]
        public string ChannelId { get; set; }

        /// <summary>
        /// Gets or Sets RootId
        /// </summary>
        [DataMember(Name="root_id", EmitDefaultValue=false)]
        public string RootId { get; set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [DataMember(Name="parent_id", EmitDefaultValue=false)]
        public string ParentId { get; set; }

        /// <summary>
        /// Gets or Sets OriginalId
        /// </summary>
        [DataMember(Name="original_id", EmitDefaultValue=false)]
        public string OriginalId { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Props
        /// </summary>
        [DataMember(Name="props", EmitDefaultValue=false)]
        public Object Props { get; set; }

        /// <summary>
        /// Gets or Sets Hashtag
        /// </summary>
        [DataMember(Name="hashtag", EmitDefaultValue=false)]
        public string Hashtag { get; set; }

        /// <summary>
        /// This field will only appear on some posts created before Mattermost 3.5 and has since been deprecated.
        /// </summary>
        /// <value>This field will only appear on some posts created before Mattermost 3.5 and has since been deprecated.</value>
        [DataMember(Name="filenames", EmitDefaultValue=false)]
        public List<string> Filenames { get; set; }

        /// <summary>
        /// Gets or Sets FileIds
        /// </summary>
        [DataMember(Name="file_ids", EmitDefaultValue=false)]
        public List<string> FileIds { get; set; }

        /// <summary>
        /// Gets or Sets PendingPostId
        /// </summary>
        [DataMember(Name="pending_post_id", EmitDefaultValue=false)]
        public string PendingPostId { get; set; }

        /// <summary>
        /// Gets or Sets Metadata
        /// </summary>
        [DataMember(Name="metadata", EmitDefaultValue=false)]
        public PostMetadata Metadata { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Post {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  CreateAt: ").Append(CreateAt).Append("\n");
            sb.Append("  UpdateAt: ").Append(UpdateAt).Append("\n");
            sb.Append("  DeleteAt: ").Append(DeleteAt).Append("\n");
            sb.Append("  EditAt: ").Append(EditAt).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  RootId: ").Append(RootId).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  OriginalId: ").Append(OriginalId).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Props: ").Append(Props).Append("\n");
            sb.Append("  Hashtag: ").Append(Hashtag).Append("\n");
            sb.Append("  Filenames: ").Append(Filenames).Append("\n");
            sb.Append("  FileIds: ").Append(FileIds).Append("\n");
            sb.Append("  PendingPostId: ").Append(PendingPostId).Append("\n");
            sb.Append("  Metadata: ").Append(Metadata).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Post);
        }

        /// <summary>
        /// Returns true if Post instances are equal
        /// </summary>
        /// <param name="input">Instance of Post to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Post input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.CreateAt == input.CreateAt ||
                    this.CreateAt.Equals(input.CreateAt)
                ) && 
                (
                    this.UpdateAt == input.UpdateAt ||
                    this.UpdateAt.Equals(input.UpdateAt)
                ) && 
                (
                    this.DeleteAt == input.DeleteAt ||
                    this.DeleteAt.Equals(input.DeleteAt)
                ) && 
                (
                    this.EditAt == input.EditAt ||
                    this.EditAt.Equals(input.EditAt)
                ) && 
                (
                    this.UserId == input.UserId ||
                    (this.UserId != null &&
                    this.UserId.Equals(input.UserId))
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.RootId == input.RootId ||
                    (this.RootId != null &&
                    this.RootId.Equals(input.RootId))
                ) && 
                (
                    this.ParentId == input.ParentId ||
                    (this.ParentId != null &&
                    this.ParentId.Equals(input.ParentId))
                ) && 
                (
                    this.OriginalId == input.OriginalId ||
                    (this.OriginalId != null &&
                    this.OriginalId.Equals(input.OriginalId))
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Props == input.Props ||
                    (this.Props != null &&
                    this.Props.Equals(input.Props))
                ) && 
                (
                    this.Hashtag == input.Hashtag ||
                    (this.Hashtag != null &&
                    this.Hashtag.Equals(input.Hashtag))
                ) && 
                (
                    this.Filenames == input.Filenames ||
                    this.Filenames != null &&
                    input.Filenames != null &&
                    this.Filenames.SequenceEqual(input.Filenames)
                ) && 
                (
                    this.FileIds == input.FileIds ||
                    this.FileIds != null &&
                    input.FileIds != null &&
                    this.FileIds.SequenceEqual(input.FileIds)
                ) && 
                (
                    this.PendingPostId == input.PendingPostId ||
                    (this.PendingPostId != null &&
                    this.PendingPostId.Equals(input.PendingPostId))
                ) && 
                (
                    this.Metadata == input.Metadata ||
                    (this.Metadata != null &&
                    this.Metadata.Equals(input.Metadata))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                hashCode = hashCode * 59 + this.CreateAt.GetHashCode();
                hashCode = hashCode * 59 + this.UpdateAt.GetHashCode();
                hashCode = hashCode * 59 + this.DeleteAt.GetHashCode();
                hashCode = hashCode * 59 + this.EditAt.GetHashCode();
                if (this.UserId != null)
                    hashCode = hashCode * 59 + this.UserId.GetHashCode();
                if (this.ChannelId != null)
                    hashCode = hashCode * 59 + this.ChannelId.GetHashCode();
                if (this.RootId != null)
                    hashCode = hashCode * 59 + this.RootId.GetHashCode();
                if (this.ParentId != null)
                    hashCode = hashCode * 59 + this.ParentId.GetHashCode();
                if (this.OriginalId != null)
                    hashCode = hashCode * 59 + this.OriginalId.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Props != null)
                    hashCode = hashCode * 59 + this.Props.GetHashCode();
                if (this.Hashtag != null)
                    hashCode = hashCode * 59 + this.Hashtag.GetHashCode();
                if (this.Filenames != null)
                    hashCode = hashCode * 59 + this.Filenames.GetHashCode();
                if (this.FileIds != null)
                    hashCode = hashCode * 59 + this.FileIds.GetHashCode();
                if (this.PendingPostId != null)
                    hashCode = hashCode * 59 + this.PendingPostId.GetHashCode();
                if (this.Metadata != null)
                    hashCode = hashCode * 59 + this.Metadata.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
