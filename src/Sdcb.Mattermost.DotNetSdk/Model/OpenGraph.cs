/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// OpenGraph metadata of a webpage
    /// </summary>
    [DataContract]
    public partial class OpenGraph :  IEquatable<OpenGraph>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenGraph" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="url">url.</param>
        /// <param name="title">title.</param>
        /// <param name="description">description.</param>
        /// <param name="determiner">determiner.</param>
        /// <param name="siteName">siteName.</param>
        /// <param name="locale">locale.</param>
        /// <param name="localesAlternate">localesAlternate.</param>
        /// <param name="images">images.</param>
        /// <param name="videos">videos.</param>
        /// <param name="audios">audios.</param>
        /// <param name="article">article.</param>
        /// <param name="book">book.</param>
        /// <param name="profile">profile.</param>
        public OpenGraph(string type = default(string), string url = default(string), string title = default(string), string description = default(string), string determiner = default(string), string siteName = default(string), string locale = default(string), List<string> localesAlternate = default(List<string>), List<OpenGraphImages> images = default(List<OpenGraphImages>), List<OpenGraphVideos> videos = default(List<OpenGraphVideos>), List<OpenGraphAudios> audios = default(List<OpenGraphAudios>), OpenGraphArticle article = default(OpenGraphArticle), OpenGraphBook book = default(OpenGraphBook), OpenGraphArticleAuthors profile = default(OpenGraphArticleAuthors))
        {
            this.Type = type;
            this.Url = url;
            this.Title = title;
            this.Description = description;
            this.Determiner = determiner;
            this.SiteName = siteName;
            this.Locale = locale;
            this.LocalesAlternate = localesAlternate;
            this.Images = images;
            this.Videos = videos;
            this.Audios = audios;
            this.Article = article;
            this.Book = book;
            this.Profile = profile;
        }
        
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Determiner
        /// </summary>
        [DataMember(Name="determiner", EmitDefaultValue=false)]
        public string Determiner { get; set; }

        /// <summary>
        /// Gets or Sets SiteName
        /// </summary>
        [DataMember(Name="site_name", EmitDefaultValue=false)]
        public string SiteName { get; set; }

        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="locale", EmitDefaultValue=false)]
        public string Locale { get; set; }

        /// <summary>
        /// Gets or Sets LocalesAlternate
        /// </summary>
        [DataMember(Name="locales_alternate", EmitDefaultValue=false)]
        public List<string> LocalesAlternate { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [DataMember(Name="images", EmitDefaultValue=false)]
        public List<OpenGraphImages> Images { get; set; }

        /// <summary>
        /// Gets or Sets Videos
        /// </summary>
        [DataMember(Name="videos", EmitDefaultValue=false)]
        public List<OpenGraphVideos> Videos { get; set; }

        /// <summary>
        /// Gets or Sets Audios
        /// </summary>
        [DataMember(Name="audios", EmitDefaultValue=false)]
        public List<OpenGraphAudios> Audios { get; set; }

        /// <summary>
        /// Gets or Sets Article
        /// </summary>
        [DataMember(Name="article", EmitDefaultValue=false)]
        public OpenGraphArticle Article { get; set; }

        /// <summary>
        /// Gets or Sets Book
        /// </summary>
        [DataMember(Name="book", EmitDefaultValue=false)]
        public OpenGraphBook Book { get; set; }

        /// <summary>
        /// Gets or Sets Profile
        /// </summary>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public OpenGraphArticleAuthors Profile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OpenGraph {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Determiner: ").Append(Determiner).Append("\n");
            sb.Append("  SiteName: ").Append(SiteName).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  LocalesAlternate: ").Append(LocalesAlternate).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Videos: ").Append(Videos).Append("\n");
            sb.Append("  Audios: ").Append(Audios).Append("\n");
            sb.Append("  Article: ").Append(Article).Append("\n");
            sb.Append("  Book: ").Append(Book).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenGraph);
        }

        /// <summary>
        /// Returns true if OpenGraph instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenGraph to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenGraph input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Type == input.Type ||
                    (this.Type != null &&
                    this.Type.Equals(input.Type))
                ) && 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.Title == input.Title ||
                    (this.Title != null &&
                    this.Title.Equals(input.Title))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.Determiner == input.Determiner ||
                    (this.Determiner != null &&
                    this.Determiner.Equals(input.Determiner))
                ) && 
                (
                    this.SiteName == input.SiteName ||
                    (this.SiteName != null &&
                    this.SiteName.Equals(input.SiteName))
                ) && 
                (
                    this.Locale == input.Locale ||
                    (this.Locale != null &&
                    this.Locale.Equals(input.Locale))
                ) && 
                (
                    this.LocalesAlternate == input.LocalesAlternate ||
                    this.LocalesAlternate != null &&
                    input.LocalesAlternate != null &&
                    this.LocalesAlternate.SequenceEqual(input.LocalesAlternate)
                ) && 
                (
                    this.Images == input.Images ||
                    this.Images != null &&
                    input.Images != null &&
                    this.Images.SequenceEqual(input.Images)
                ) && 
                (
                    this.Videos == input.Videos ||
                    this.Videos != null &&
                    input.Videos != null &&
                    this.Videos.SequenceEqual(input.Videos)
                ) && 
                (
                    this.Audios == input.Audios ||
                    this.Audios != null &&
                    input.Audios != null &&
                    this.Audios.SequenceEqual(input.Audios)
                ) && 
                (
                    this.Article == input.Article ||
                    (this.Article != null &&
                    this.Article.Equals(input.Article))
                ) && 
                (
                    this.Book == input.Book ||
                    (this.Book != null &&
                    this.Book.Equals(input.Book))
                ) && 
                (
                    this.Profile == input.Profile ||
                    (this.Profile != null &&
                    this.Profile.Equals(input.Profile))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Type != null)
                    hashCode = hashCode * 59 + this.Type.GetHashCode();
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.Title != null)
                    hashCode = hashCode * 59 + this.Title.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                if (this.Determiner != null)
                    hashCode = hashCode * 59 + this.Determiner.GetHashCode();
                if (this.SiteName != null)
                    hashCode = hashCode * 59 + this.SiteName.GetHashCode();
                if (this.Locale != null)
                    hashCode = hashCode * 59 + this.Locale.GetHashCode();
                if (this.LocalesAlternate != null)
                    hashCode = hashCode * 59 + this.LocalesAlternate.GetHashCode();
                if (this.Images != null)
                    hashCode = hashCode * 59 + this.Images.GetHashCode();
                if (this.Videos != null)
                    hashCode = hashCode * 59 + this.Videos.GetHashCode();
                if (this.Audios != null)
                    hashCode = hashCode * 59 + this.Audios.GetHashCode();
                if (this.Article != null)
                    hashCode = hashCode * 59 + this.Article.GetHashCode();
                if (this.Book != null)
                    hashCode = hashCode * 59 + this.Book.GetHashCode();
                if (this.Profile != null)
                    hashCode = hashCode * 59 + this.Profile.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
