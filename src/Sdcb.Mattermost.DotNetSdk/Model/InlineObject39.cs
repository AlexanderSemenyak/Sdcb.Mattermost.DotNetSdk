/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// InlineObject39
    /// </summary>
    [DataContract]
    public partial class InlineObject39 :  IEquatable<InlineObject39>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject39" /> class.
        /// </summary>
        [JsonConstructor]
        protected InlineObject39() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject39" /> class.
        /// </summary>
        /// <param name="channelId">The channel ID that is being viewed. Use a blank string to indicate that all channels have lost focus. (required).</param>
        /// <param name="prevChannelId">The channel ID of the previous channel, used when switching channels. Providing this ID will cause push notifications to clear on the channel being switched to..</param>
        public InlineObject39(string channelId = default(string), string prevChannelId = default(string))
        {
            // to ensure "channelId" is required (not null)
            if (channelId == null)
            {
                throw new InvalidDataException("channelId is a required property for InlineObject39 and cannot be null");
            }
            else
            {
                this.ChannelId = channelId;
            }

            this.PrevChannelId = prevChannelId;
        }
        
        /// <summary>
        /// The channel ID that is being viewed. Use a blank string to indicate that all channels have lost focus.
        /// </summary>
        /// <value>The channel ID that is being viewed. Use a blank string to indicate that all channels have lost focus.</value>
        [DataMember(Name="channel_id", EmitDefaultValue=false)]
        public string ChannelId { get; set; }

        /// <summary>
        /// The channel ID of the previous channel, used when switching channels. Providing this ID will cause push notifications to clear on the channel being switched to.
        /// </summary>
        /// <value>The channel ID of the previous channel, used when switching channels. Providing this ID will cause push notifications to clear on the channel being switched to.</value>
        [DataMember(Name="prev_channel_id", EmitDefaultValue=false)]
        public string PrevChannelId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject39 {\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  PrevChannelId: ").Append(PrevChannelId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject39);
        }

        /// <summary>
        /// Returns true if InlineObject39 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject39 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject39 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.PrevChannelId == input.PrevChannelId ||
                    (this.PrevChannelId != null &&
                    this.PrevChannelId.Equals(input.PrevChannelId))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ChannelId != null)
                    hashCode = hashCode * 59 + this.ChannelId.GetHashCode();
                if (this.PrevChannelId != null)
                    hashCode = hashCode * 59 + this.PrevChannelId.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
