/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// Article object used in OpenGraph metadata of a webpage, if type is article
    /// </summary>
    [DataContract]
    public partial class OpenGraphArticle :  IEquatable<OpenGraphArticle>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpenGraphArticle" /> class.
        /// </summary>
        /// <param name="publishedTime">publishedTime.</param>
        /// <param name="modifiedTime">modifiedTime.</param>
        /// <param name="expirationTime">expirationTime.</param>
        /// <param name="section">section.</param>
        /// <param name="tags">tags.</param>
        /// <param name="authors">authors.</param>
        public OpenGraphArticle(string publishedTime = default(string), string modifiedTime = default(string), string expirationTime = default(string), string section = default(string), List<string> tags = default(List<string>), List<OpenGraphArticleAuthors> authors = default(List<OpenGraphArticleAuthors>))
        {
            this.PublishedTime = publishedTime;
            this.ModifiedTime = modifiedTime;
            this.ExpirationTime = expirationTime;
            this.Section = section;
            this.Tags = tags;
            this.Authors = authors;
        }
        
        /// <summary>
        /// Gets or Sets PublishedTime
        /// </summary>
        [DataMember(Name="published_time", EmitDefaultValue=false)]
        public string PublishedTime { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedTime
        /// </summary>
        [DataMember(Name="modified_time", EmitDefaultValue=false)]
        public string ModifiedTime { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationTime
        /// </summary>
        [DataMember(Name="expiration_time", EmitDefaultValue=false)]
        public string ExpirationTime { get; set; }

        /// <summary>
        /// Gets or Sets Section
        /// </summary>
        [DataMember(Name="section", EmitDefaultValue=false)]
        public string Section { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Authors
        /// </summary>
        [DataMember(Name="authors", EmitDefaultValue=false)]
        public List<OpenGraphArticleAuthors> Authors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OpenGraphArticle {\n");
            sb.Append("  PublishedTime: ").Append(PublishedTime).Append("\n");
            sb.Append("  ModifiedTime: ").Append(ModifiedTime).Append("\n");
            sb.Append("  ExpirationTime: ").Append(ExpirationTime).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Authors: ").Append(Authors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpenGraphArticle);
        }

        /// <summary>
        /// Returns true if OpenGraphArticle instances are equal
        /// </summary>
        /// <param name="input">Instance of OpenGraphArticle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpenGraphArticle input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.PublishedTime == input.PublishedTime ||
                    (this.PublishedTime != null &&
                    this.PublishedTime.Equals(input.PublishedTime))
                ) && 
                (
                    this.ModifiedTime == input.ModifiedTime ||
                    (this.ModifiedTime != null &&
                    this.ModifiedTime.Equals(input.ModifiedTime))
                ) && 
                (
                    this.ExpirationTime == input.ExpirationTime ||
                    (this.ExpirationTime != null &&
                    this.ExpirationTime.Equals(input.ExpirationTime))
                ) && 
                (
                    this.Section == input.Section ||
                    (this.Section != null &&
                    this.Section.Equals(input.Section))
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Authors == input.Authors ||
                    this.Authors != null &&
                    input.Authors != null &&
                    this.Authors.SequenceEqual(input.Authors)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PublishedTime != null)
                    hashCode = hashCode * 59 + this.PublishedTime.GetHashCode();
                if (this.ModifiedTime != null)
                    hashCode = hashCode * 59 + this.ModifiedTime.GetHashCode();
                if (this.ExpirationTime != null)
                    hashCode = hashCode * 59 + this.ExpirationTime.GetHashCode();
                if (this.Section != null)
                    hashCode = hashCode * 59 + this.Section.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Authors != null)
                    hashCode = hashCode * 59 + this.Authors.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
