/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// ConfigLdapSettings
    /// </summary>
    [DataContract]
    public partial class ConfigLdapSettings :  IEquatable<ConfigLdapSettings>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ConfigLdapSettings" /> class.
        /// </summary>
        /// <param name="enable">enable.</param>
        /// <param name="ldapServer">ldapServer.</param>
        /// <param name="ldapPort">ldapPort.</param>
        /// <param name="connectionSecurity">connectionSecurity.</param>
        /// <param name="baseDN">baseDN.</param>
        /// <param name="bindUsername">bindUsername.</param>
        /// <param name="bindPassword">bindPassword.</param>
        /// <param name="userFilter">userFilter.</param>
        /// <param name="firstNameAttribute">firstNameAttribute.</param>
        /// <param name="lastNameAttribute">lastNameAttribute.</param>
        /// <param name="emailAttribute">emailAttribute.</param>
        /// <param name="usernameAttribute">usernameAttribute.</param>
        /// <param name="nicknameAttribute">nicknameAttribute.</param>
        /// <param name="idAttribute">idAttribute.</param>
        /// <param name="positionAttribute">positionAttribute.</param>
        /// <param name="syncIntervalMinutes">syncIntervalMinutes.</param>
        /// <param name="skipCertificateVerification">skipCertificateVerification.</param>
        /// <param name="queryTimeout">queryTimeout.</param>
        /// <param name="maxPageSize">maxPageSize.</param>
        /// <param name="loginFieldName">loginFieldName.</param>
        public ConfigLdapSettings(bool enable = default(bool), string ldapServer = default(string), int ldapPort = default(int), string connectionSecurity = default(string), string baseDN = default(string), string bindUsername = default(string), string bindPassword = default(string), string userFilter = default(string), string firstNameAttribute = default(string), string lastNameAttribute = default(string), string emailAttribute = default(string), string usernameAttribute = default(string), string nicknameAttribute = default(string), string idAttribute = default(string), string positionAttribute = default(string), int syncIntervalMinutes = default(int), bool skipCertificateVerification = default(bool), int queryTimeout = default(int), int maxPageSize = default(int), string loginFieldName = default(string))
        {
            this.Enable = enable;
            this.LdapServer = ldapServer;
            this.LdapPort = ldapPort;
            this.ConnectionSecurity = connectionSecurity;
            this.BaseDN = baseDN;
            this.BindUsername = bindUsername;
            this.BindPassword = bindPassword;
            this.UserFilter = userFilter;
            this.FirstNameAttribute = firstNameAttribute;
            this.LastNameAttribute = lastNameAttribute;
            this.EmailAttribute = emailAttribute;
            this.UsernameAttribute = usernameAttribute;
            this.NicknameAttribute = nicknameAttribute;
            this.IdAttribute = idAttribute;
            this.PositionAttribute = positionAttribute;
            this.SyncIntervalMinutes = syncIntervalMinutes;
            this.SkipCertificateVerification = skipCertificateVerification;
            this.QueryTimeout = queryTimeout;
            this.MaxPageSize = maxPageSize;
            this.LoginFieldName = loginFieldName;
        }
        
        /// <summary>
        /// Gets or Sets Enable
        /// </summary>
        [DataMember(Name="Enable", EmitDefaultValue=false)]
        public bool Enable { get; set; }

        /// <summary>
        /// Gets or Sets LdapServer
        /// </summary>
        [DataMember(Name="LdapServer", EmitDefaultValue=false)]
        public string LdapServer { get; set; }

        /// <summary>
        /// Gets or Sets LdapPort
        /// </summary>
        [DataMember(Name="LdapPort", EmitDefaultValue=false)]
        public int LdapPort { get; set; }

        /// <summary>
        /// Gets or Sets ConnectionSecurity
        /// </summary>
        [DataMember(Name="ConnectionSecurity", EmitDefaultValue=false)]
        public string ConnectionSecurity { get; set; }

        /// <summary>
        /// Gets or Sets BaseDN
        /// </summary>
        [DataMember(Name="BaseDN", EmitDefaultValue=false)]
        public string BaseDN { get; set; }

        /// <summary>
        /// Gets or Sets BindUsername
        /// </summary>
        [DataMember(Name="BindUsername", EmitDefaultValue=false)]
        public string BindUsername { get; set; }

        /// <summary>
        /// Gets or Sets BindPassword
        /// </summary>
        [DataMember(Name="BindPassword", EmitDefaultValue=false)]
        public string BindPassword { get; set; }

        /// <summary>
        /// Gets or Sets UserFilter
        /// </summary>
        [DataMember(Name="UserFilter", EmitDefaultValue=false)]
        public string UserFilter { get; set; }

        /// <summary>
        /// Gets or Sets FirstNameAttribute
        /// </summary>
        [DataMember(Name="FirstNameAttribute", EmitDefaultValue=false)]
        public string FirstNameAttribute { get; set; }

        /// <summary>
        /// Gets or Sets LastNameAttribute
        /// </summary>
        [DataMember(Name="LastNameAttribute", EmitDefaultValue=false)]
        public string LastNameAttribute { get; set; }

        /// <summary>
        /// Gets or Sets EmailAttribute
        /// </summary>
        [DataMember(Name="EmailAttribute", EmitDefaultValue=false)]
        public string EmailAttribute { get; set; }

        /// <summary>
        /// Gets or Sets UsernameAttribute
        /// </summary>
        [DataMember(Name="UsernameAttribute", EmitDefaultValue=false)]
        public string UsernameAttribute { get; set; }

        /// <summary>
        /// Gets or Sets NicknameAttribute
        /// </summary>
        [DataMember(Name="NicknameAttribute", EmitDefaultValue=false)]
        public string NicknameAttribute { get; set; }

        /// <summary>
        /// Gets or Sets IdAttribute
        /// </summary>
        [DataMember(Name="IdAttribute", EmitDefaultValue=false)]
        public string IdAttribute { get; set; }

        /// <summary>
        /// Gets or Sets PositionAttribute
        /// </summary>
        [DataMember(Name="PositionAttribute", EmitDefaultValue=false)]
        public string PositionAttribute { get; set; }

        /// <summary>
        /// Gets or Sets SyncIntervalMinutes
        /// </summary>
        [DataMember(Name="SyncIntervalMinutes", EmitDefaultValue=false)]
        public int SyncIntervalMinutes { get; set; }

        /// <summary>
        /// Gets or Sets SkipCertificateVerification
        /// </summary>
        [DataMember(Name="SkipCertificateVerification", EmitDefaultValue=false)]
        public bool SkipCertificateVerification { get; set; }

        /// <summary>
        /// Gets or Sets QueryTimeout
        /// </summary>
        [DataMember(Name="QueryTimeout", EmitDefaultValue=false)]
        public int QueryTimeout { get; set; }

        /// <summary>
        /// Gets or Sets MaxPageSize
        /// </summary>
        [DataMember(Name="MaxPageSize", EmitDefaultValue=false)]
        public int MaxPageSize { get; set; }

        /// <summary>
        /// Gets or Sets LoginFieldName
        /// </summary>
        [DataMember(Name="LoginFieldName", EmitDefaultValue=false)]
        public string LoginFieldName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConfigLdapSettings {\n");
            sb.Append("  Enable: ").Append(Enable).Append("\n");
            sb.Append("  LdapServer: ").Append(LdapServer).Append("\n");
            sb.Append("  LdapPort: ").Append(LdapPort).Append("\n");
            sb.Append("  ConnectionSecurity: ").Append(ConnectionSecurity).Append("\n");
            sb.Append("  BaseDN: ").Append(BaseDN).Append("\n");
            sb.Append("  BindUsername: ").Append(BindUsername).Append("\n");
            sb.Append("  BindPassword: ").Append(BindPassword).Append("\n");
            sb.Append("  UserFilter: ").Append(UserFilter).Append("\n");
            sb.Append("  FirstNameAttribute: ").Append(FirstNameAttribute).Append("\n");
            sb.Append("  LastNameAttribute: ").Append(LastNameAttribute).Append("\n");
            sb.Append("  EmailAttribute: ").Append(EmailAttribute).Append("\n");
            sb.Append("  UsernameAttribute: ").Append(UsernameAttribute).Append("\n");
            sb.Append("  NicknameAttribute: ").Append(NicknameAttribute).Append("\n");
            sb.Append("  IdAttribute: ").Append(IdAttribute).Append("\n");
            sb.Append("  PositionAttribute: ").Append(PositionAttribute).Append("\n");
            sb.Append("  SyncIntervalMinutes: ").Append(SyncIntervalMinutes).Append("\n");
            sb.Append("  SkipCertificateVerification: ").Append(SkipCertificateVerification).Append("\n");
            sb.Append("  QueryTimeout: ").Append(QueryTimeout).Append("\n");
            sb.Append("  MaxPageSize: ").Append(MaxPageSize).Append("\n");
            sb.Append("  LoginFieldName: ").Append(LoginFieldName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ConfigLdapSettings);
        }

        /// <summary>
        /// Returns true if ConfigLdapSettings instances are equal
        /// </summary>
        /// <param name="input">Instance of ConfigLdapSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConfigLdapSettings input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Enable == input.Enable ||
                    this.Enable.Equals(input.Enable)
                ) && 
                (
                    this.LdapServer == input.LdapServer ||
                    (this.LdapServer != null &&
                    this.LdapServer.Equals(input.LdapServer))
                ) && 
                (
                    this.LdapPort == input.LdapPort ||
                    this.LdapPort.Equals(input.LdapPort)
                ) && 
                (
                    this.ConnectionSecurity == input.ConnectionSecurity ||
                    (this.ConnectionSecurity != null &&
                    this.ConnectionSecurity.Equals(input.ConnectionSecurity))
                ) && 
                (
                    this.BaseDN == input.BaseDN ||
                    (this.BaseDN != null &&
                    this.BaseDN.Equals(input.BaseDN))
                ) && 
                (
                    this.BindUsername == input.BindUsername ||
                    (this.BindUsername != null &&
                    this.BindUsername.Equals(input.BindUsername))
                ) && 
                (
                    this.BindPassword == input.BindPassword ||
                    (this.BindPassword != null &&
                    this.BindPassword.Equals(input.BindPassword))
                ) && 
                (
                    this.UserFilter == input.UserFilter ||
                    (this.UserFilter != null &&
                    this.UserFilter.Equals(input.UserFilter))
                ) && 
                (
                    this.FirstNameAttribute == input.FirstNameAttribute ||
                    (this.FirstNameAttribute != null &&
                    this.FirstNameAttribute.Equals(input.FirstNameAttribute))
                ) && 
                (
                    this.LastNameAttribute == input.LastNameAttribute ||
                    (this.LastNameAttribute != null &&
                    this.LastNameAttribute.Equals(input.LastNameAttribute))
                ) && 
                (
                    this.EmailAttribute == input.EmailAttribute ||
                    (this.EmailAttribute != null &&
                    this.EmailAttribute.Equals(input.EmailAttribute))
                ) && 
                (
                    this.UsernameAttribute == input.UsernameAttribute ||
                    (this.UsernameAttribute != null &&
                    this.UsernameAttribute.Equals(input.UsernameAttribute))
                ) && 
                (
                    this.NicknameAttribute == input.NicknameAttribute ||
                    (this.NicknameAttribute != null &&
                    this.NicknameAttribute.Equals(input.NicknameAttribute))
                ) && 
                (
                    this.IdAttribute == input.IdAttribute ||
                    (this.IdAttribute != null &&
                    this.IdAttribute.Equals(input.IdAttribute))
                ) && 
                (
                    this.PositionAttribute == input.PositionAttribute ||
                    (this.PositionAttribute != null &&
                    this.PositionAttribute.Equals(input.PositionAttribute))
                ) && 
                (
                    this.SyncIntervalMinutes == input.SyncIntervalMinutes ||
                    this.SyncIntervalMinutes.Equals(input.SyncIntervalMinutes)
                ) && 
                (
                    this.SkipCertificateVerification == input.SkipCertificateVerification ||
                    this.SkipCertificateVerification.Equals(input.SkipCertificateVerification)
                ) && 
                (
                    this.QueryTimeout == input.QueryTimeout ||
                    this.QueryTimeout.Equals(input.QueryTimeout)
                ) && 
                (
                    this.MaxPageSize == input.MaxPageSize ||
                    this.MaxPageSize.Equals(input.MaxPageSize)
                ) && 
                (
                    this.LoginFieldName == input.LoginFieldName ||
                    (this.LoginFieldName != null &&
                    this.LoginFieldName.Equals(input.LoginFieldName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.Enable.GetHashCode();
                if (this.LdapServer != null)
                    hashCode = hashCode * 59 + this.LdapServer.GetHashCode();
                hashCode = hashCode * 59 + this.LdapPort.GetHashCode();
                if (this.ConnectionSecurity != null)
                    hashCode = hashCode * 59 + this.ConnectionSecurity.GetHashCode();
                if (this.BaseDN != null)
                    hashCode = hashCode * 59 + this.BaseDN.GetHashCode();
                if (this.BindUsername != null)
                    hashCode = hashCode * 59 + this.BindUsername.GetHashCode();
                if (this.BindPassword != null)
                    hashCode = hashCode * 59 + this.BindPassword.GetHashCode();
                if (this.UserFilter != null)
                    hashCode = hashCode * 59 + this.UserFilter.GetHashCode();
                if (this.FirstNameAttribute != null)
                    hashCode = hashCode * 59 + this.FirstNameAttribute.GetHashCode();
                if (this.LastNameAttribute != null)
                    hashCode = hashCode * 59 + this.LastNameAttribute.GetHashCode();
                if (this.EmailAttribute != null)
                    hashCode = hashCode * 59 + this.EmailAttribute.GetHashCode();
                if (this.UsernameAttribute != null)
                    hashCode = hashCode * 59 + this.UsernameAttribute.GetHashCode();
                if (this.NicknameAttribute != null)
                    hashCode = hashCode * 59 + this.NicknameAttribute.GetHashCode();
                if (this.IdAttribute != null)
                    hashCode = hashCode * 59 + this.IdAttribute.GetHashCode();
                if (this.PositionAttribute != null)
                    hashCode = hashCode * 59 + this.PositionAttribute.GetHashCode();
                hashCode = hashCode * 59 + this.SyncIntervalMinutes.GetHashCode();
                hashCode = hashCode * 59 + this.SkipCertificateVerification.GetHashCode();
                hashCode = hashCode * 59 + this.QueryTimeout.GetHashCode();
                hashCode = hashCode * 59 + this.MaxPageSize.GetHashCode();
                if (this.LoginFieldName != null)
                    hashCode = hashCode * 59 + this.LoginFieldName.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
