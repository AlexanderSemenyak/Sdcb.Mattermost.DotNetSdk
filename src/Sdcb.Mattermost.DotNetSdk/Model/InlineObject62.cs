/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// InlineObject62
    /// </summary>
    [DataContract]
    public partial class InlineObject62 :  IEquatable<InlineObject62>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject62" /> class.
        /// </summary>
        [JsonConstructor]
        protected InlineObject62() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject62" /> class.
        /// </summary>
        /// <param name="url">The URL to send the submitted dialog payload to (required).</param>
        /// <param name="channelId">Channel ID the user submitted the dialog from (required).</param>
        /// <param name="teamId">Team ID the user submitted the dialog from (required).</param>
        /// <param name="submission">String map where keys are element names and values are the element input values (required).</param>
        /// <param name="callbackId">Callback ID sent when the dialog was opened.</param>
        /// <param name="state">State sent when the dialog was opened.</param>
        /// <param name="cancelled">Set to true if the dialog was cancelled.</param>
        public InlineObject62(string url = default(string), string channelId = default(string), string teamId = default(string), object submission = default(object), string callbackId = default(string), string state = default(string), bool cancelled = default(bool))
        {
            // to ensure "url" is required (not null)
            if (url == null)
            {
                throw new InvalidDataException("url is a required property for InlineObject62 and cannot be null");
            }
            else
            {
                this.Url = url;
            }

            // to ensure "channelId" is required (not null)
            if (channelId == null)
            {
                throw new InvalidDataException("channelId is a required property for InlineObject62 and cannot be null");
            }
            else
            {
                this.ChannelId = channelId;
            }

            // to ensure "teamId" is required (not null)
            if (teamId == null)
            {
                throw new InvalidDataException("teamId is a required property for InlineObject62 and cannot be null");
            }
            else
            {
                this.TeamId = teamId;
            }

            // to ensure "submission" is required (not null)
            if (submission == null)
            {
                throw new InvalidDataException("submission is a required property for InlineObject62 and cannot be null");
            }
            else
            {
                this.Submission = submission;
            }

            this.CallbackId = callbackId;
            this.State = state;
            this.Cancelled = cancelled;
        }
        
        /// <summary>
        /// The URL to send the submitted dialog payload to
        /// </summary>
        /// <value>The URL to send the submitted dialog payload to</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Channel ID the user submitted the dialog from
        /// </summary>
        /// <value>Channel ID the user submitted the dialog from</value>
        [DataMember(Name="channel_id", EmitDefaultValue=false)]
        public string ChannelId { get; set; }

        /// <summary>
        /// Team ID the user submitted the dialog from
        /// </summary>
        /// <value>Team ID the user submitted the dialog from</value>
        [DataMember(Name="team_id", EmitDefaultValue=false)]
        public string TeamId { get; set; }

        /// <summary>
        /// String map where keys are element names and values are the element input values
        /// </summary>
        /// <value>String map where keys are element names and values are the element input values</value>
        [DataMember(Name="submission", EmitDefaultValue=false)]
        public object Submission { get; set; }

        /// <summary>
        /// Callback ID sent when the dialog was opened
        /// </summary>
        /// <value>Callback ID sent when the dialog was opened</value>
        [DataMember(Name="callback_id", EmitDefaultValue=false)]
        public string CallbackId { get; set; }

        /// <summary>
        /// State sent when the dialog was opened
        /// </summary>
        /// <value>State sent when the dialog was opened</value>
        [DataMember(Name="state", EmitDefaultValue=false)]
        public string State { get; set; }

        /// <summary>
        /// Set to true if the dialog was cancelled
        /// </summary>
        /// <value>Set to true if the dialog was cancelled</value>
        [DataMember(Name="cancelled", EmitDefaultValue=false)]
        public bool Cancelled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject62 {\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  TeamId: ").Append(TeamId).Append("\n");
            sb.Append("  Submission: ").Append(Submission).Append("\n");
            sb.Append("  CallbackId: ").Append(CallbackId).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Cancelled: ").Append(Cancelled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject62);
        }

        /// <summary>
        /// Returns true if InlineObject62 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject62 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject62 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Url == input.Url ||
                    (this.Url != null &&
                    this.Url.Equals(input.Url))
                ) && 
                (
                    this.ChannelId == input.ChannelId ||
                    (this.ChannelId != null &&
                    this.ChannelId.Equals(input.ChannelId))
                ) && 
                (
                    this.TeamId == input.TeamId ||
                    (this.TeamId != null &&
                    this.TeamId.Equals(input.TeamId))
                ) && 
                (
                    this.Submission == input.Submission ||
                    (this.Submission != null &&
                    this.Submission.Equals(input.Submission))
                ) && 
                (
                    this.CallbackId == input.CallbackId ||
                    (this.CallbackId != null &&
                    this.CallbackId.Equals(input.CallbackId))
                ) && 
                (
                    this.State == input.State ||
                    (this.State != null &&
                    this.State.Equals(input.State))
                ) && 
                (
                    this.Cancelled == input.Cancelled ||
                    this.Cancelled.Equals(input.Cancelled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Url != null)
                    hashCode = hashCode * 59 + this.Url.GetHashCode();
                if (this.ChannelId != null)
                    hashCode = hashCode * 59 + this.ChannelId.GetHashCode();
                if (this.TeamId != null)
                    hashCode = hashCode * 59 + this.TeamId.GetHashCode();
                if (this.Submission != null)
                    hashCode = hashCode * 59 + this.Submission.GetHashCode();
                if (this.CallbackId != null)
                    hashCode = hashCode * 59 + this.CallbackId.GetHashCode();
                if (this.State != null)
                    hashCode = hashCode * 59 + this.State.GetHashCode();
                hashCode = hashCode * 59 + this.Cancelled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
