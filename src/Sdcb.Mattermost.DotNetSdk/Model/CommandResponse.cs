/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Sdcb.Mattermost.DotNetSdk.Client.OpenAPIDateConverter;

namespace Sdcb.Mattermost.DotNetSdk.Model
{
    /// <summary>
    /// CommandResponse
    /// </summary>
    [DataContract]
    public partial class CommandResponse :  IEquatable<CommandResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CommandResponse" /> class.
        /// </summary>
        /// <param name="responseType">The response type either in_channel or ephemeral.</param>
        /// <param name="text">text.</param>
        /// <param name="username">username.</param>
        /// <param name="iconURL">iconURL.</param>
        /// <param name="gotoLocation">gotoLocation.</param>
        /// <param name="attachments">attachments.</param>
        public CommandResponse(string responseType = default(string), string text = default(string), string username = default(string), string iconURL = default(string), string gotoLocation = default(string), List<SlackAttachment> attachments = default(List<SlackAttachment>))
        {
            this.ResponseType = responseType;
            this.Text = text;
            this.Username = username;
            this.IconURL = iconURL;
            this.GotoLocation = gotoLocation;
            this.Attachments = attachments;
        }
        
        /// <summary>
        /// The response type either in_channel or ephemeral
        /// </summary>
        /// <value>The response type either in_channel or ephemeral</value>
        [DataMember(Name="ResponseType", EmitDefaultValue=false)]
        public string ResponseType { get; set; }

        /// <summary>
        /// Gets or Sets Text
        /// </summary>
        [DataMember(Name="Text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="Username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets IconURL
        /// </summary>
        [DataMember(Name="IconURL", EmitDefaultValue=false)]
        public string IconURL { get; set; }

        /// <summary>
        /// Gets or Sets GotoLocation
        /// </summary>
        [DataMember(Name="GotoLocation", EmitDefaultValue=false)]
        public string GotoLocation { get; set; }

        /// <summary>
        /// Gets or Sets Attachments
        /// </summary>
        [DataMember(Name="Attachments", EmitDefaultValue=false)]
        public List<SlackAttachment> Attachments { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CommandResponse {\n");
            sb.Append("  ResponseType: ").Append(ResponseType).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  IconURL: ").Append(IconURL).Append("\n");
            sb.Append("  GotoLocation: ").Append(GotoLocation).Append("\n");
            sb.Append("  Attachments: ").Append(Attachments).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CommandResponse);
        }

        /// <summary>
        /// Returns true if CommandResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of CommandResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CommandResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ResponseType == input.ResponseType ||
                    (this.ResponseType != null &&
                    this.ResponseType.Equals(input.ResponseType))
                ) && 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.Username == input.Username ||
                    (this.Username != null &&
                    this.Username.Equals(input.Username))
                ) && 
                (
                    this.IconURL == input.IconURL ||
                    (this.IconURL != null &&
                    this.IconURL.Equals(input.IconURL))
                ) && 
                (
                    this.GotoLocation == input.GotoLocation ||
                    (this.GotoLocation != null &&
                    this.GotoLocation.Equals(input.GotoLocation))
                ) && 
                (
                    this.Attachments == input.Attachments ||
                    this.Attachments != null &&
                    input.Attachments != null &&
                    this.Attachments.SequenceEqual(input.Attachments)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ResponseType != null)
                    hashCode = hashCode * 59 + this.ResponseType.GetHashCode();
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.Username != null)
                    hashCode = hashCode * 59 + this.Username.GetHashCode();
                if (this.IconURL != null)
                    hashCode = hashCode * 59 + this.IconURL.GetHashCode();
                if (this.GotoLocation != null)
                    hashCode = hashCode * 59 + this.GotoLocation.GetHashCode();
                if (this.Attachments != null)
                    hashCode = hashCode * 59 + this.Attachments.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
