/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPreferencesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List a user&#39;s preferences by category
        /// </summary>
        /// <remarks>
        /// Lists the current user&#39;s stored preferences in the given category. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="category">The category of a group of preferences</param>
        /// <returns>List&lt;Preference&gt;</returns>
        List<Preference> UsersUserIdPreferencesCategoryGet (string userId, string category);

        /// <summary>
        /// List a user&#39;s preferences by category
        /// </summary>
        /// <remarks>
        /// Lists the current user&#39;s stored preferences in the given category. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="category">The category of a group of preferences</param>
        /// <returns>ApiResponse of List&lt;Preference&gt;</returns>
        ApiResponse<List<Preference>> UsersUserIdPreferencesCategoryGetWithHttpInfo (string userId, string category);
        /// <summary>
        /// Get a specific user preference
        /// </summary>
        /// <remarks>
        /// Gets a single preference for the current user with the given category and name. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="category">The category of a group of preferences</param>
        /// <param name="preferenceName">The name of the preference</param>
        /// <returns>Preference</returns>
        Preference UsersUserIdPreferencesCategoryNamePreferenceNameGet (string userId, string category, string preferenceName);

        /// <summary>
        /// Get a specific user preference
        /// </summary>
        /// <remarks>
        /// Gets a single preference for the current user with the given category and name. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="category">The category of a group of preferences</param>
        /// <param name="preferenceName">The name of the preference</param>
        /// <returns>ApiResponse of Preference</returns>
        ApiResponse<Preference> UsersUserIdPreferencesCategoryNamePreferenceNameGetWithHttpInfo (string userId, string category, string preferenceName);
        /// <summary>
        /// Delete user&#39;s preferences
        /// </summary>
        /// <remarks>
        /// Delete a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body">List of preference object</param>
        /// <returns>StatusOK</returns>
        StatusOK UsersUserIdPreferencesDeletePost (string userId, List<Preference> body);

        /// <summary>
        /// Delete user&#39;s preferences
        /// </summary>
        /// <remarks>
        /// Delete a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body">List of preference object</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersUserIdPreferencesDeletePostWithHttpInfo (string userId, List<Preference> body);
        /// <summary>
        /// Get the user&#39;s preferences
        /// </summary>
        /// <remarks>
        /// Get a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>List&lt;Preference&gt;</returns>
        List<Preference> UsersUserIdPreferencesGet (string userId);

        /// <summary>
        /// Get the user&#39;s preferences
        /// </summary>
        /// <remarks>
        /// Get a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of List&lt;Preference&gt;</returns>
        ApiResponse<List<Preference>> UsersUserIdPreferencesGetWithHttpInfo (string userId);
        /// <summary>
        /// Save the user&#39;s preferences
        /// </summary>
        /// <remarks>
        /// Save a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body">List of preference object</param>
        /// <returns>StatusOK</returns>
        StatusOK UsersUserIdPreferencesPut (string userId, List<Preference> body);

        /// <summary>
        /// Save the user&#39;s preferences
        /// </summary>
        /// <remarks>
        /// Save a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body">List of preference object</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersUserIdPreferencesPutWithHttpInfo (string userId, List<Preference> body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPreferencesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List a user&#39;s preferences by category
        /// </summary>
        /// <remarks>
        /// Lists the current user&#39;s stored preferences in the given category. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="category">The category of a group of preferences</param>
        /// <returns>Task of List&lt;Preference&gt;</returns>
        System.Threading.Tasks.Task<List<Preference>> UsersUserIdPreferencesCategoryGetAsync (string userId, string category);

        /// <summary>
        /// List a user&#39;s preferences by category
        /// </summary>
        /// <remarks>
        /// Lists the current user&#39;s stored preferences in the given category. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="category">The category of a group of preferences</param>
        /// <returns>Task of ApiResponse (List&lt;Preference&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Preference>>> UsersUserIdPreferencesCategoryGetAsyncWithHttpInfo (string userId, string category);
        /// <summary>
        /// Get a specific user preference
        /// </summary>
        /// <remarks>
        /// Gets a single preference for the current user with the given category and name. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="category">The category of a group of preferences</param>
        /// <param name="preferenceName">The name of the preference</param>
        /// <returns>Task of Preference</returns>
        System.Threading.Tasks.Task<Preference> UsersUserIdPreferencesCategoryNamePreferenceNameGetAsync (string userId, string category, string preferenceName);

        /// <summary>
        /// Get a specific user preference
        /// </summary>
        /// <remarks>
        /// Gets a single preference for the current user with the given category and name. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="category">The category of a group of preferences</param>
        /// <param name="preferenceName">The name of the preference</param>
        /// <returns>Task of ApiResponse (Preference)</returns>
        System.Threading.Tasks.Task<ApiResponse<Preference>> UsersUserIdPreferencesCategoryNamePreferenceNameGetAsyncWithHttpInfo (string userId, string category, string preferenceName);
        /// <summary>
        /// Delete user&#39;s preferences
        /// </summary>
        /// <remarks>
        /// Delete a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body">List of preference object</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersUserIdPreferencesDeletePostAsync (string userId, List<Preference> body);

        /// <summary>
        /// Delete user&#39;s preferences
        /// </summary>
        /// <remarks>
        /// Delete a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body">List of preference object</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdPreferencesDeletePostAsyncWithHttpInfo (string userId, List<Preference> body);
        /// <summary>
        /// Get the user&#39;s preferences
        /// </summary>
        /// <remarks>
        /// Get a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of List&lt;Preference&gt;</returns>
        System.Threading.Tasks.Task<List<Preference>> UsersUserIdPreferencesGetAsync (string userId);

        /// <summary>
        /// Get the user&#39;s preferences
        /// </summary>
        /// <remarks>
        /// Get a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (List&lt;Preference&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Preference>>> UsersUserIdPreferencesGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Save the user&#39;s preferences
        /// </summary>
        /// <remarks>
        /// Save a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body">List of preference object</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersUserIdPreferencesPutAsync (string userId, List<Preference> body);

        /// <summary>
        /// Save the user&#39;s preferences
        /// </summary>
        /// <remarks>
        /// Save a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body">List of preference object</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdPreferencesPutAsyncWithHttpInfo (string userId, List<Preference> body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPreferencesApi : IPreferencesApiSync, IPreferencesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PreferencesApi : IPreferencesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PreferencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PreferencesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PreferencesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PreferencesApi(string basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PreferencesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PreferencesApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PreferencesApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List a user&#39;s preferences by category Lists the current user&#39;s stored preferences in the given category. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="category">The category of a group of preferences</param>
        /// <returns>List&lt;Preference&gt;</returns>
        public List<Preference> UsersUserIdPreferencesCategoryGet (string userId, string category)
        {
            ApiResponse<List<Preference>> localVarResponse = UsersUserIdPreferencesCategoryGetWithHttpInfo(userId, category);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List a user&#39;s preferences by category Lists the current user&#39;s stored preferences in the given category. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="category">The category of a group of preferences</param>
        /// <returns>ApiResponse of List&lt;Preference&gt;</returns>
        public ApiResponse<List<Preference>> UsersUserIdPreferencesCategoryGetWithHttpInfo (string userId, string category)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PreferencesApi->UsersUserIdPreferencesCategoryGet");

            // verify the required parameter 'category' is set
            if (category == null)
                throw new ApiException(400, "Missing required parameter 'category' when calling PreferencesApi->UsersUserIdPreferencesCategoryGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (category != null)
                requestOptions.PathParameters.Add("category", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(category)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< List<Preference> >("/users/{user_id}/preferences/{category}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPreferencesCategoryGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List a user&#39;s preferences by category Lists the current user&#39;s stored preferences in the given category. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="category">The category of a group of preferences</param>
        /// <returns>Task of List&lt;Preference&gt;</returns>
        public async System.Threading.Tasks.Task<List<Preference>> UsersUserIdPreferencesCategoryGetAsync (string userId, string category)
        {
            ApiResponse<List<Preference>> localVarResponse = await UsersUserIdPreferencesCategoryGetAsyncWithHttpInfo(userId, category);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List a user&#39;s preferences by category Lists the current user&#39;s stored preferences in the given category. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="category">The category of a group of preferences</param>
        /// <returns>Task of ApiResponse (List&lt;Preference&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Preference>>> UsersUserIdPreferencesCategoryGetAsyncWithHttpInfo (string userId, string category)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PreferencesApi->UsersUserIdPreferencesCategoryGet");

            // verify the required parameter 'category' is set
            if (category == null)
                throw new ApiException(400, "Missing required parameter 'category' when calling PreferencesApi->UsersUserIdPreferencesCategoryGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (category != null)
                requestOptions.PathParameters.Add("category", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(category)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Preference>>("/users/{user_id}/preferences/{category}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPreferencesCategoryGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a specific user preference Gets a single preference for the current user with the given category and name. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="category">The category of a group of preferences</param>
        /// <param name="preferenceName">The name of the preference</param>
        /// <returns>Preference</returns>
        public Preference UsersUserIdPreferencesCategoryNamePreferenceNameGet (string userId, string category, string preferenceName)
        {
            ApiResponse<Preference> localVarResponse = UsersUserIdPreferencesCategoryNamePreferenceNameGetWithHttpInfo(userId, category, preferenceName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a specific user preference Gets a single preference for the current user with the given category and name. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="category">The category of a group of preferences</param>
        /// <param name="preferenceName">The name of the preference</param>
        /// <returns>ApiResponse of Preference</returns>
        public ApiResponse<Preference> UsersUserIdPreferencesCategoryNamePreferenceNameGetWithHttpInfo (string userId, string category, string preferenceName)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PreferencesApi->UsersUserIdPreferencesCategoryNamePreferenceNameGet");

            // verify the required parameter 'category' is set
            if (category == null)
                throw new ApiException(400, "Missing required parameter 'category' when calling PreferencesApi->UsersUserIdPreferencesCategoryNamePreferenceNameGet");

            // verify the required parameter 'preferenceName' is set
            if (preferenceName == null)
                throw new ApiException(400, "Missing required parameter 'preferenceName' when calling PreferencesApi->UsersUserIdPreferencesCategoryNamePreferenceNameGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (category != null)
                requestOptions.PathParameters.Add("category", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(category)); // path parameter
            if (preferenceName != null)
                requestOptions.PathParameters.Add("preference_name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(preferenceName)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Preference >("/users/{user_id}/preferences/{category}/name/{preference_name}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPreferencesCategoryNamePreferenceNameGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a specific user preference Gets a single preference for the current user with the given category and name. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="category">The category of a group of preferences</param>
        /// <param name="preferenceName">The name of the preference</param>
        /// <returns>Task of Preference</returns>
        public async System.Threading.Tasks.Task<Preference> UsersUserIdPreferencesCategoryNamePreferenceNameGetAsync (string userId, string category, string preferenceName)
        {
            ApiResponse<Preference> localVarResponse = await UsersUserIdPreferencesCategoryNamePreferenceNameGetAsyncWithHttpInfo(userId, category, preferenceName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a specific user preference Gets a single preference for the current user with the given category and name. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="category">The category of a group of preferences</param>
        /// <param name="preferenceName">The name of the preference</param>
        /// <returns>Task of ApiResponse (Preference)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Preference>> UsersUserIdPreferencesCategoryNamePreferenceNameGetAsyncWithHttpInfo (string userId, string category, string preferenceName)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PreferencesApi->UsersUserIdPreferencesCategoryNamePreferenceNameGet");

            // verify the required parameter 'category' is set
            if (category == null)
                throw new ApiException(400, "Missing required parameter 'category' when calling PreferencesApi->UsersUserIdPreferencesCategoryNamePreferenceNameGet");

            // verify the required parameter 'preferenceName' is set
            if (preferenceName == null)
                throw new ApiException(400, "Missing required parameter 'preferenceName' when calling PreferencesApi->UsersUserIdPreferencesCategoryNamePreferenceNameGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (category != null)
                requestOptions.PathParameters.Add("category", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(category)); // path parameter
            if (preferenceName != null)
                requestOptions.PathParameters.Add("preference_name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(preferenceName)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Preference>("/users/{user_id}/preferences/{category}/name/{preference_name}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPreferencesCategoryNamePreferenceNameGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete user&#39;s preferences Delete a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body">List of preference object</param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersUserIdPreferencesDeletePost (string userId, List<Preference> body)
        {
            ApiResponse<StatusOK> localVarResponse = UsersUserIdPreferencesDeletePostWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete user&#39;s preferences Delete a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body">List of preference object</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersUserIdPreferencesDeletePostWithHttpInfo (string userId, List<Preference> body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PreferencesApi->UsersUserIdPreferencesDeletePost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PreferencesApi->UsersUserIdPreferencesDeletePost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/users/{user_id}/preferences/delete", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPreferencesDeletePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete user&#39;s preferences Delete a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body">List of preference object</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersUserIdPreferencesDeletePostAsync (string userId, List<Preference> body)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersUserIdPreferencesDeletePostAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete user&#39;s preferences Delete a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body">List of preference object</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdPreferencesDeletePostAsyncWithHttpInfo (string userId, List<Preference> body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PreferencesApi->UsersUserIdPreferencesDeletePost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PreferencesApi->UsersUserIdPreferencesDeletePost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/users/{user_id}/preferences/delete", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPreferencesDeletePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get the user&#39;s preferences Get a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>List&lt;Preference&gt;</returns>
        public List<Preference> UsersUserIdPreferencesGet (string userId)
        {
            ApiResponse<List<Preference>> localVarResponse = UsersUserIdPreferencesGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the user&#39;s preferences Get a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of List&lt;Preference&gt;</returns>
        public ApiResponse<List<Preference>> UsersUserIdPreferencesGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PreferencesApi->UsersUserIdPreferencesGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< List<Preference> >("/users/{user_id}/preferences", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPreferencesGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get the user&#39;s preferences Get a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of List&lt;Preference&gt;</returns>
        public async System.Threading.Tasks.Task<List<Preference>> UsersUserIdPreferencesGetAsync (string userId)
        {
            ApiResponse<List<Preference>> localVarResponse = await UsersUserIdPreferencesGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the user&#39;s preferences Get a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (List&lt;Preference&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Preference>>> UsersUserIdPreferencesGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PreferencesApi->UsersUserIdPreferencesGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Preference>>("/users/{user_id}/preferences", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPreferencesGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Save the user&#39;s preferences Save a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body">List of preference object</param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersUserIdPreferencesPut (string userId, List<Preference> body)
        {
            ApiResponse<StatusOK> localVarResponse = UsersUserIdPreferencesPutWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Save the user&#39;s preferences Save a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body">List of preference object</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersUserIdPreferencesPutWithHttpInfo (string userId, List<Preference> body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PreferencesApi->UsersUserIdPreferencesPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PreferencesApi->UsersUserIdPreferencesPut");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< StatusOK >("/users/{user_id}/preferences", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPreferencesPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Save the user&#39;s preferences Save a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body">List of preference object</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersUserIdPreferencesPutAsync (string userId, List<Preference> body)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersUserIdPreferencesPutAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Save the user&#39;s preferences Save a list of the user&#39;s preferences. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body">List of preference object</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdPreferencesPutAsyncWithHttpInfo (string userId, List<Preference> body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling PreferencesApi->UsersUserIdPreferencesPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling PreferencesApi->UsersUserIdPreferencesPut");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<StatusOK>("/users/{user_id}/preferences", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPreferencesPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
