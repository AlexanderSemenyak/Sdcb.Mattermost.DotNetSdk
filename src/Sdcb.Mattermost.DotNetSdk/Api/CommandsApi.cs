/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommandsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete a command
        /// </summary>
        /// <remarks>
        /// Delete a command based on command id string. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to delete</param>
        /// <returns>StatusOK</returns>
        StatusOK CommandsCommandIdDelete (string commandId);

        /// <summary>
        /// Delete a command
        /// </summary>
        /// <remarks>
        /// Delete a command based on command id string. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to delete</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> CommandsCommandIdDeleteWithHttpInfo (string commandId);
        /// <summary>
        /// Update a command
        /// </summary>
        /// <remarks>
        /// Update a single command based on command id string and Command struct. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to update</param>
        /// <param name="body"></param>
        /// <returns>Command</returns>
        Command CommandsCommandIdPut (string commandId, Command body);

        /// <summary>
        /// Update a command
        /// </summary>
        /// <remarks>
        /// Update a single command based on command id string and Command struct. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to update</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Command</returns>
        ApiResponse<Command> CommandsCommandIdPutWithHttpInfo (string commandId, Command body);
        /// <summary>
        /// Generate a new token
        /// </summary>
        /// <remarks>
        /// Generate a new token for the command based on command id string. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to generate the new token</param>
        /// <returns>InlineResponse2008</returns>
        InlineResponse2008 CommandsCommandIdRegenTokenPut (string commandId);

        /// <summary>
        /// Generate a new token
        /// </summary>
        /// <remarks>
        /// Generate a new token for the command based on command id string. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to generate the new token</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        ApiResponse<InlineResponse2008> CommandsCommandIdRegenTokenPutWithHttpInfo (string commandId);
        /// <summary>
        /// Execute a command
        /// </summary>
        /// <remarks>
        /// Execute a command on a team. ##### Permissions Must have &#x60;use_slash_commands&#x60; permission for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CommandResponse</returns>
        CommandResponse CommandsExecutePost (InlineObject54 body);

        /// <summary>
        /// Execute a command
        /// </summary>
        /// <remarks>
        /// Execute a command on a team. ##### Permissions Must have &#x60;use_slash_commands&#x60; permission for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CommandResponse</returns>
        ApiResponse<CommandResponse> CommandsExecutePostWithHttpInfo (InlineObject54 body);
        /// <summary>
        /// List commands for a team
        /// </summary>
        /// <remarks>
        /// List commands for a team. ##### Permissions &#x60;manage_slash_commands&#x60; if need list custom commands. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id. (optional)</param>
        /// <param name="customOnly">To get only the custom commands. If set to false will get the custom if the user have access plus the system commands, otherwise just the system commands.  (optional, default to &quot;false&quot;)</param>
        /// <returns>List&lt;Command&gt;</returns>
        List<Command> CommandsGet (string teamId = null, string customOnly = null);

        /// <summary>
        /// List commands for a team
        /// </summary>
        /// <remarks>
        /// List commands for a team. ##### Permissions &#x60;manage_slash_commands&#x60; if need list custom commands. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id. (optional)</param>
        /// <param name="customOnly">To get only the custom commands. If set to false will get the custom if the user have access plus the system commands, otherwise just the system commands.  (optional, default to &quot;false&quot;)</param>
        /// <returns>ApiResponse of List&lt;Command&gt;</returns>
        ApiResponse<List<Command>> CommandsGetWithHttpInfo (string teamId = null, string customOnly = null);
        /// <summary>
        /// Create a command
        /// </summary>
        /// <remarks>
        /// Create a command for a team. ##### Permissions &#x60;manage_slash_commands&#x60; for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Command</returns>
        Command CommandsPost (InlineObject53 body);

        /// <summary>
        /// Create a command
        /// </summary>
        /// <remarks>
        /// Create a command for a team. ##### Permissions &#x60;manage_slash_commands&#x60; for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Command</returns>
        ApiResponse<Command> CommandsPostWithHttpInfo (InlineObject53 body);
        /// <summary>
        /// List autocomplete commands
        /// </summary>
        /// <remarks>
        /// List autocomplete commands in the team. ##### Permissions &#x60;view_team&#x60; for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>List&lt;Command&gt;</returns>
        List<Command> TeamsTeamIdCommandsAutocompleteGet (string teamId);

        /// <summary>
        /// List autocomplete commands
        /// </summary>
        /// <remarks>
        /// List autocomplete commands in the team. ##### Permissions &#x60;view_team&#x60; for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of List&lt;Command&gt;</returns>
        ApiResponse<List<Command>> TeamsTeamIdCommandsAutocompleteGetWithHttpInfo (string teamId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommandsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete a command
        /// </summary>
        /// <remarks>
        /// Delete a command based on command id string. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to delete</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> CommandsCommandIdDeleteAsync (string commandId);

        /// <summary>
        /// Delete a command
        /// </summary>
        /// <remarks>
        /// Delete a command based on command id string. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to delete</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> CommandsCommandIdDeleteAsyncWithHttpInfo (string commandId);
        /// <summary>
        /// Update a command
        /// </summary>
        /// <remarks>
        /// Update a single command based on command id string and Command struct. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to update</param>
        /// <param name="body"></param>
        /// <returns>Task of Command</returns>
        System.Threading.Tasks.Task<Command> CommandsCommandIdPutAsync (string commandId, Command body);

        /// <summary>
        /// Update a command
        /// </summary>
        /// <remarks>
        /// Update a single command based on command id string and Command struct. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to update</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Command)</returns>
        System.Threading.Tasks.Task<ApiResponse<Command>> CommandsCommandIdPutAsyncWithHttpInfo (string commandId, Command body);
        /// <summary>
        /// Generate a new token
        /// </summary>
        /// <remarks>
        /// Generate a new token for the command based on command id string. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to generate the new token</param>
        /// <returns>Task of InlineResponse2008</returns>
        System.Threading.Tasks.Task<InlineResponse2008> CommandsCommandIdRegenTokenPutAsync (string commandId);

        /// <summary>
        /// Generate a new token
        /// </summary>
        /// <remarks>
        /// Generate a new token for the command based on command id string. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to generate the new token</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2008>> CommandsCommandIdRegenTokenPutAsyncWithHttpInfo (string commandId);
        /// <summary>
        /// Execute a command
        /// </summary>
        /// <remarks>
        /// Execute a command on a team. ##### Permissions Must have &#x60;use_slash_commands&#x60; permission for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CommandResponse</returns>
        System.Threading.Tasks.Task<CommandResponse> CommandsExecutePostAsync (InlineObject54 body);

        /// <summary>
        /// Execute a command
        /// </summary>
        /// <remarks>
        /// Execute a command on a team. ##### Permissions Must have &#x60;use_slash_commands&#x60; permission for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CommandResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<CommandResponse>> CommandsExecutePostAsyncWithHttpInfo (InlineObject54 body);
        /// <summary>
        /// List commands for a team
        /// </summary>
        /// <remarks>
        /// List commands for a team. ##### Permissions &#x60;manage_slash_commands&#x60; if need list custom commands. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id. (optional)</param>
        /// <param name="customOnly">To get only the custom commands. If set to false will get the custom if the user have access plus the system commands, otherwise just the system commands.  (optional, default to &quot;false&quot;)</param>
        /// <returns>Task of List&lt;Command&gt;</returns>
        System.Threading.Tasks.Task<List<Command>> CommandsGetAsync (string teamId = null, string customOnly = null);

        /// <summary>
        /// List commands for a team
        /// </summary>
        /// <remarks>
        /// List commands for a team. ##### Permissions &#x60;manage_slash_commands&#x60; if need list custom commands. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id. (optional)</param>
        /// <param name="customOnly">To get only the custom commands. If set to false will get the custom if the user have access plus the system commands, otherwise just the system commands.  (optional, default to &quot;false&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Command&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Command>>> CommandsGetAsyncWithHttpInfo (string teamId = null, string customOnly = null);
        /// <summary>
        /// Create a command
        /// </summary>
        /// <remarks>
        /// Create a command for a team. ##### Permissions &#x60;manage_slash_commands&#x60; for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Command</returns>
        System.Threading.Tasks.Task<Command> CommandsPostAsync (InlineObject53 body);

        /// <summary>
        /// Create a command
        /// </summary>
        /// <remarks>
        /// Create a command for a team. ##### Permissions &#x60;manage_slash_commands&#x60; for the team the command is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Command)</returns>
        System.Threading.Tasks.Task<ApiResponse<Command>> CommandsPostAsyncWithHttpInfo (InlineObject53 body);
        /// <summary>
        /// List autocomplete commands
        /// </summary>
        /// <remarks>
        /// List autocomplete commands in the team. ##### Permissions &#x60;view_team&#x60; for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of List&lt;Command&gt;</returns>
        System.Threading.Tasks.Task<List<Command>> TeamsTeamIdCommandsAutocompleteGetAsync (string teamId);

        /// <summary>
        /// List autocomplete commands
        /// </summary>
        /// <remarks>
        /// List autocomplete commands in the team. ##### Permissions &#x60;view_team&#x60; for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse (List&lt;Command&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Command>>> TeamsTeamIdCommandsAutocompleteGetAsyncWithHttpInfo (string teamId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ICommandsApi : ICommandsApiSync, ICommandsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class CommandsApi : ICommandsApi
    {
        private Sdcb.Mattermost.DotNetSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="CommandsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommandsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommandsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CommandsApi(String basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Sdcb.Mattermost.DotNetSdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="CommandsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CommandsApi(Sdcb.Mattermost.DotNetSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public CommandsApi(Sdcb.Mattermost.DotNetSdk.Client.ISynchronousClient client,Sdcb.Mattermost.DotNetSdk.Client.IAsynchronousClient asyncClient, Sdcb.Mattermost.DotNetSdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sdcb.Mattermost.DotNetSdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete a command Delete a command based on command id string. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to delete</param>
        /// <returns>StatusOK</returns>
        public StatusOK CommandsCommandIdDelete (string commandId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = CommandsCommandIdDeleteWithHttpInfo(commandId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a command Delete a command based on command id string. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to delete</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > CommandsCommandIdDeleteWithHttpInfo (string commandId)
        {
            // verify the required parameter 'commandId' is set
            if (commandId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'commandId' when calling CommandsApi->CommandsCommandIdDelete");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (commandId != null)
                requestOptions.PathParameters.Add("command_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(commandId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/commands/{command_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CommandsCommandIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete a command Delete a command based on command id string. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to delete</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> CommandsCommandIdDeleteAsync (string commandId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await CommandsCommandIdDeleteAsyncWithHttpInfo(commandId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a command Delete a command based on command id string. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to delete</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> CommandsCommandIdDeleteAsyncWithHttpInfo (string commandId)
        {
            // verify the required parameter 'commandId' is set
            if (commandId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'commandId' when calling CommandsApi->CommandsCommandIdDelete");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (commandId != null)
                requestOptions.PathParameters.Add("command_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(commandId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/commands/{command_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CommandsCommandIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a command Update a single command based on command id string and Command struct. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to update</param>
        /// <param name="body"></param>
        /// <returns>Command</returns>
        public Command CommandsCommandIdPut (string commandId, Command body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Command> localVarResponse = CommandsCommandIdPutWithHttpInfo(commandId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a command Update a single command based on command id string and Command struct. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to update</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Command</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Command > CommandsCommandIdPutWithHttpInfo (string commandId, Command body)
        {
            // verify the required parameter 'commandId' is set
            if (commandId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'commandId' when calling CommandsApi->CommandsCommandIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling CommandsApi->CommandsCommandIdPut");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (commandId != null)
                requestOptions.PathParameters.Add("command_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(commandId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< Command >("/commands/{command_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CommandsCommandIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a command Update a single command based on command id string and Command struct. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to update</param>
        /// <param name="body"></param>
        /// <returns>Task of Command</returns>
        public async System.Threading.Tasks.Task<Command> CommandsCommandIdPutAsync (string commandId, Command body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Command> localVarResponse = await CommandsCommandIdPutAsyncWithHttpInfo(commandId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a command Update a single command based on command id string and Command struct. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to update</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Command)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Command>> CommandsCommandIdPutAsyncWithHttpInfo (string commandId, Command body)
        {
            // verify the required parameter 'commandId' is set
            if (commandId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'commandId' when calling CommandsApi->CommandsCommandIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling CommandsApi->CommandsCommandIdPut");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (commandId != null)
                requestOptions.PathParameters.Add("command_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(commandId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Command>("/commands/{command_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CommandsCommandIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Generate a new token Generate a new token for the command based on command id string. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to generate the new token</param>
        /// <returns>InlineResponse2008</returns>
        public InlineResponse2008 CommandsCommandIdRegenTokenPut (string commandId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse2008> localVarResponse = CommandsCommandIdRegenTokenPutWithHttpInfo(commandId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate a new token Generate a new token for the command based on command id string. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to generate the new token</param>
        /// <returns>ApiResponse of InlineResponse2008</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< InlineResponse2008 > CommandsCommandIdRegenTokenPutWithHttpInfo (string commandId)
        {
            // verify the required parameter 'commandId' is set
            if (commandId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'commandId' when calling CommandsApi->CommandsCommandIdRegenTokenPut");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (commandId != null)
                requestOptions.PathParameters.Add("command_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(commandId)); // path parameter


            // make the HTTP request

            var response = this.Client.Put< InlineResponse2008 >("/commands/{command_id}/regen_token", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CommandsCommandIdRegenTokenPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Generate a new token Generate a new token for the command based on command id string. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to generate the new token</param>
        /// <returns>Task of InlineResponse2008</returns>
        public async System.Threading.Tasks.Task<InlineResponse2008> CommandsCommandIdRegenTokenPutAsync (string commandId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse2008> localVarResponse = await CommandsCommandIdRegenTokenPutAsyncWithHttpInfo(commandId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate a new token Generate a new token for the command based on command id string. ##### Permissions Must have &#x60;manage_slash_commands&#x60; permission for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="commandId">ID of the command to generate the new token</param>
        /// <returns>Task of ApiResponse (InlineResponse2008)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse2008>> CommandsCommandIdRegenTokenPutAsyncWithHttpInfo (string commandId)
        {
            // verify the required parameter 'commandId' is set
            if (commandId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'commandId' when calling CommandsApi->CommandsCommandIdRegenTokenPut");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (commandId != null)
                requestOptions.PathParameters.Add("command_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(commandId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<InlineResponse2008>("/commands/{command_id}/regen_token", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CommandsCommandIdRegenTokenPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Execute a command Execute a command on a team. ##### Permissions Must have &#x60;use_slash_commands&#x60; permission for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>CommandResponse</returns>
        public CommandResponse CommandsExecutePost (InlineObject54 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<CommandResponse> localVarResponse = CommandsExecutePostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Execute a command Execute a command on a team. ##### Permissions Must have &#x60;use_slash_commands&#x60; permission for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of CommandResponse</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< CommandResponse > CommandsExecutePostWithHttpInfo (InlineObject54 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling CommandsApi->CommandsExecutePost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< CommandResponse >("/commands/execute", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CommandsExecutePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Execute a command Execute a command on a team. ##### Permissions Must have &#x60;use_slash_commands&#x60; permission for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of CommandResponse</returns>
        public async System.Threading.Tasks.Task<CommandResponse> CommandsExecutePostAsync (InlineObject54 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<CommandResponse> localVarResponse = await CommandsExecutePostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Execute a command Execute a command on a team. ##### Permissions Must have &#x60;use_slash_commands&#x60; permission for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (CommandResponse)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<CommandResponse>> CommandsExecutePostAsyncWithHttpInfo (InlineObject54 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling CommandsApi->CommandsExecutePost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<CommandResponse>("/commands/execute", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CommandsExecutePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List commands for a team List commands for a team. ##### Permissions &#x60;manage_slash_commands&#x60; if need list custom commands. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id. (optional)</param>
        /// <param name="customOnly">To get only the custom commands. If set to false will get the custom if the user have access plus the system commands, otherwise just the system commands.  (optional, default to &quot;false&quot;)</param>
        /// <returns>List&lt;Command&gt;</returns>
        public List<Command> CommandsGet (string teamId = null, string customOnly = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Command>> localVarResponse = CommandsGetWithHttpInfo(teamId, customOnly);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List commands for a team List commands for a team. ##### Permissions &#x60;manage_slash_commands&#x60; if need list custom commands. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id. (optional)</param>
        /// <param name="customOnly">To get only the custom commands. If set to false will get the custom if the user have access plus the system commands, otherwise just the system commands.  (optional, default to &quot;false&quot;)</param>
        /// <returns>ApiResponse of List&lt;Command&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Command> > CommandsGetWithHttpInfo (string teamId = null, string customOnly = null)
        {
            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "team_id", teamId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (customOnly != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "custom_only", customOnly))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<Command> >("/commands", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CommandsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List commands for a team List commands for a team. ##### Permissions &#x60;manage_slash_commands&#x60; if need list custom commands. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id. (optional)</param>
        /// <param name="customOnly">To get only the custom commands. If set to false will get the custom if the user have access plus the system commands, otherwise just the system commands.  (optional, default to &quot;false&quot;)</param>
        /// <returns>Task of List&lt;Command&gt;</returns>
        public async System.Threading.Tasks.Task<List<Command>> CommandsGetAsync (string teamId = null, string customOnly = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Command>> localVarResponse = await CommandsGetAsyncWithHttpInfo(teamId, customOnly);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List commands for a team List commands for a team. ##### Permissions &#x60;manage_slash_commands&#x60; if need list custom commands. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">The team id. (optional)</param>
        /// <param name="customOnly">To get only the custom commands. If set to false will get the custom if the user have access plus the system commands, otherwise just the system commands.  (optional, default to &quot;false&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Command&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Command>>> CommandsGetAsyncWithHttpInfo (string teamId = null, string customOnly = null)
        {

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "team_id", teamId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (customOnly != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "custom_only", customOnly))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Command>>("/commands", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CommandsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a command Create a command for a team. ##### Permissions &#x60;manage_slash_commands&#x60; for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Command</returns>
        public Command CommandsPost (InlineObject53 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Command> localVarResponse = CommandsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a command Create a command for a team. ##### Permissions &#x60;manage_slash_commands&#x60; for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Command</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Command > CommandsPostWithHttpInfo (InlineObject53 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling CommandsApi->CommandsPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< Command >("/commands", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CommandsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a command Create a command for a team. ##### Permissions &#x60;manage_slash_commands&#x60; for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Command</returns>
        public async System.Threading.Tasks.Task<Command> CommandsPostAsync (InlineObject53 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Command> localVarResponse = await CommandsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a command Create a command for a team. ##### Permissions &#x60;manage_slash_commands&#x60; for the team the command is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Command)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Command>> CommandsPostAsyncWithHttpInfo (InlineObject53 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling CommandsApi->CommandsPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Command>("/commands", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("CommandsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List autocomplete commands List autocomplete commands in the team. ##### Permissions &#x60;view_team&#x60; for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>List&lt;Command&gt;</returns>
        public List<Command> TeamsTeamIdCommandsAutocompleteGet (string teamId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Command>> localVarResponse = TeamsTeamIdCommandsAutocompleteGetWithHttpInfo(teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List autocomplete commands List autocomplete commands in the team. ##### Permissions &#x60;view_team&#x60; for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of List&lt;Command&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Command> > TeamsTeamIdCommandsAutocompleteGetWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling CommandsApi->TeamsTeamIdCommandsAutocompleteGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< List<Command> >("/teams/{team_id}/commands/autocomplete", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdCommandsAutocompleteGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List autocomplete commands List autocomplete commands in the team. ##### Permissions &#x60;view_team&#x60; for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of List&lt;Command&gt;</returns>
        public async System.Threading.Tasks.Task<List<Command>> TeamsTeamIdCommandsAutocompleteGetAsync (string teamId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Command>> localVarResponse = await TeamsTeamIdCommandsAutocompleteGetAsyncWithHttpInfo(teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List autocomplete commands List autocomplete commands in the team. ##### Permissions &#x60;view_team&#x60; for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse (List&lt;Command&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Command>>> TeamsTeamIdCommandsAutocompleteGetAsyncWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling CommandsApi->TeamsTeamIdCommandsAutocompleteGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Command>>("/teams/{team_id}/commands/autocomplete", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdCommandsAutocompleteGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
