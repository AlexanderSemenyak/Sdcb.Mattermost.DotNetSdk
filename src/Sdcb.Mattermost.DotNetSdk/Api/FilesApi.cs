/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a file
        /// </summary>
        /// <remarks>
        /// Gets a file that has been uploaded previously. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns></returns>
        void FilesFileIdGet (string fileId);

        /// <summary>
        /// Get a file
        /// </summary>
        /// <remarks>
        /// Gets a file that has been uploaded previously. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FilesFileIdGetWithHttpInfo (string fileId);
        /// <summary>
        /// Get metadata for a file
        /// </summary>
        /// <remarks>
        /// Gets a file&#39;s info. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file info to get</param>
        /// <returns>FileInfo</returns>
        FileInfo FilesFileIdInfoGet (string fileId);

        /// <summary>
        /// Get metadata for a file
        /// </summary>
        /// <remarks>
        /// Gets a file&#39;s info. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file info to get</param>
        /// <returns>ApiResponse of FileInfo</returns>
        ApiResponse<FileInfo> FilesFileIdInfoGetWithHttpInfo (string fileId);
        /// <summary>
        /// Get a public file link
        /// </summary>
        /// <remarks>
        /// Gets a public link for a file that can be accessed without logging into Mattermost. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get a link for</param>
        /// <returns>InlineResponse2007</returns>
        InlineResponse2007 FilesFileIdLinkGet (string fileId);

        /// <summary>
        /// Get a public file link
        /// </summary>
        /// <remarks>
        /// Gets a public link for a file that can be accessed without logging into Mattermost. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get a link for</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        ApiResponse<InlineResponse2007> FilesFileIdLinkGetWithHttpInfo (string fileId);
        /// <summary>
        /// Get a file&#39;s preview
        /// </summary>
        /// <remarks>
        /// Gets a file&#39;s preview. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns></returns>
        void FilesFileIdPreviewGet (string fileId);

        /// <summary>
        /// Get a file&#39;s preview
        /// </summary>
        /// <remarks>
        /// Gets a file&#39;s preview. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FilesFileIdPreviewGetWithHttpInfo (string fileId);
        /// <summary>
        /// Get a file&#39;s thumbnail
        /// </summary>
        /// <remarks>
        /// Gets a file&#39;s thumbnail. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns></returns>
        void FilesFileIdThumbnailGet (string fileId);

        /// <summary>
        /// Get a file&#39;s thumbnail
        /// </summary>
        /// <remarks>
        /// Gets a file&#39;s thumbnail. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> FilesFileIdThumbnailGetWithHttpInfo (string fileId);
        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// Uploads a file that can later be attached to a post.  This request can either be a multipart/form-data request with a channel_id, files and optional client_ids defined in the FormData, or it can be a request with the channel_id and filename defined as query parameters with the contents of a single file in the body of the request.  Only multipart/form-data requests are supported by server versions up to and including 4.7. Server versions 4.8 and higher support both types of requests.  ##### Permissions Must have &#x60;upload_file&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel that this file will be uploaded to (optional)</param>
        /// <param name="filename">The name of the file to be uploaded (optional)</param>
        /// <param name="files">A file to be uploaded (optional)</param>
        /// <param name="channelIdInBody">The ID of the channel that this file will be uploaded to (optional)</param>
        /// <param name="clientIds">A unique identifier for the file that will be returned in the response (optional)</param>
        /// <returns>InlineResponse201</returns>
        InlineResponse201 FilesPost (string channelId = null, string filename = null, System.IO.Stream files = null, string channelIdInBody = null, string clientIds = null);

        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// Uploads a file that can later be attached to a post.  This request can either be a multipart/form-data request with a channel_id, files and optional client_ids defined in the FormData, or it can be a request with the channel_id and filename defined as query parameters with the contents of a single file in the body of the request.  Only multipart/form-data requests are supported by server versions up to and including 4.7. Server versions 4.8 and higher support both types of requests.  ##### Permissions Must have &#x60;upload_file&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel that this file will be uploaded to (optional)</param>
        /// <param name="filename">The name of the file to be uploaded (optional)</param>
        /// <param name="files">A file to be uploaded (optional)</param>
        /// <param name="channelIdInBody">The ID of the channel that this file will be uploaded to (optional)</param>
        /// <param name="clientIds">A unique identifier for the file that will be returned in the response (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        ApiResponse<InlineResponse201> FilesPostWithHttpInfo (string channelId = null, string filename = null, System.IO.Stream files = null, string channelIdInBody = null, string clientIds = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a file
        /// </summary>
        /// <remarks>
        /// Gets a file that has been uploaded previously. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FilesFileIdGetAsync (string fileId);

        /// <summary>
        /// Get a file
        /// </summary>
        /// <remarks>
        /// Gets a file that has been uploaded previously. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FilesFileIdGetAsyncWithHttpInfo (string fileId);
        /// <summary>
        /// Get metadata for a file
        /// </summary>
        /// <remarks>
        /// Gets a file&#39;s info. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file info to get</param>
        /// <returns>Task of FileInfo</returns>
        System.Threading.Tasks.Task<FileInfo> FilesFileIdInfoGetAsync (string fileId);

        /// <summary>
        /// Get metadata for a file
        /// </summary>
        /// <remarks>
        /// Gets a file&#39;s info. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file info to get</param>
        /// <returns>Task of ApiResponse (FileInfo)</returns>
        System.Threading.Tasks.Task<ApiResponse<FileInfo>> FilesFileIdInfoGetAsyncWithHttpInfo (string fileId);
        /// <summary>
        /// Get a public file link
        /// </summary>
        /// <remarks>
        /// Gets a public link for a file that can be accessed without logging into Mattermost. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get a link for</param>
        /// <returns>Task of InlineResponse2007</returns>
        System.Threading.Tasks.Task<InlineResponse2007> FilesFileIdLinkGetAsync (string fileId);

        /// <summary>
        /// Get a public file link
        /// </summary>
        /// <remarks>
        /// Gets a public link for a file that can be accessed without logging into Mattermost. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get a link for</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2007>> FilesFileIdLinkGetAsyncWithHttpInfo (string fileId);
        /// <summary>
        /// Get a file&#39;s preview
        /// </summary>
        /// <remarks>
        /// Gets a file&#39;s preview. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FilesFileIdPreviewGetAsync (string fileId);

        /// <summary>
        /// Get a file&#39;s preview
        /// </summary>
        /// <remarks>
        /// Gets a file&#39;s preview. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FilesFileIdPreviewGetAsyncWithHttpInfo (string fileId);
        /// <summary>
        /// Get a file&#39;s thumbnail
        /// </summary>
        /// <remarks>
        /// Gets a file&#39;s thumbnail. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task FilesFileIdThumbnailGetAsync (string fileId);

        /// <summary>
        /// Get a file&#39;s thumbnail
        /// </summary>
        /// <remarks>
        /// Gets a file&#39;s thumbnail. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FilesFileIdThumbnailGetAsyncWithHttpInfo (string fileId);
        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// Uploads a file that can later be attached to a post.  This request can either be a multipart/form-data request with a channel_id, files and optional client_ids defined in the FormData, or it can be a request with the channel_id and filename defined as query parameters with the contents of a single file in the body of the request.  Only multipart/form-data requests are supported by server versions up to and including 4.7. Server versions 4.8 and higher support both types of requests.  ##### Permissions Must have &#x60;upload_file&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel that this file will be uploaded to (optional)</param>
        /// <param name="filename">The name of the file to be uploaded (optional)</param>
        /// <param name="files">A file to be uploaded (optional)</param>
        /// <param name="channelIdInBody">The ID of the channel that this file will be uploaded to (optional)</param>
        /// <param name="clientIds">A unique identifier for the file that will be returned in the response (optional)</param>
        /// <returns>Task of InlineResponse201</returns>
        System.Threading.Tasks.Task<InlineResponse201> FilesPostAsync (string channelId = null, string filename = null, System.IO.Stream files = null, string channelIdInBody = null, string clientIds = null);

        /// <summary>
        /// Upload a file
        /// </summary>
        /// <remarks>
        /// Uploads a file that can later be attached to a post.  This request can either be a multipart/form-data request with a channel_id, files and optional client_ids defined in the FormData, or it can be a request with the channel_id and filename defined as query parameters with the contents of a single file in the body of the request.  Only multipart/form-data requests are supported by server versions up to and including 4.7. Server versions 4.8 and higher support both types of requests.  ##### Permissions Must have &#x60;upload_file&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel that this file will be uploaded to (optional)</param>
        /// <param name="filename">The name of the file to be uploaded (optional)</param>
        /// <param name="files">A file to be uploaded (optional)</param>
        /// <param name="channelIdInBody">The ID of the channel that this file will be uploaded to (optional)</param>
        /// <param name="clientIds">A unique identifier for the file that will be returned in the response (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse201>> FilesPostAsyncWithHttpInfo (string channelId = null, string filename = null, System.IO.Stream files = null, string channelIdInBody = null, string clientIds = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilesApi : IFilesApiSync, IFilesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilesApi : IFilesApi
    {
        private Sdcb.Mattermost.DotNetSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilesApi(String basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Sdcb.Mattermost.DotNetSdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilesApi(Sdcb.Mattermost.DotNetSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public FilesApi(Sdcb.Mattermost.DotNetSdk.Client.ISynchronousClient client,Sdcb.Mattermost.DotNetSdk.Client.IAsynchronousClient asyncClient, Sdcb.Mattermost.DotNetSdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sdcb.Mattermost.DotNetSdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a file Gets a file that has been uploaded previously. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns></returns>
        public void FilesFileIdGet (string fileId)
        {
             FilesFileIdGetWithHttpInfo(fileId);
        }

        /// <summary>
        /// Get a file Gets a file that has been uploaded previously. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Object> FilesFileIdGetWithHttpInfo (string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->FilesFileIdGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (fileId != null)
                requestOptions.PathParameters.Add("file_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get<Object>("/files/{file_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("FilesFileIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a file Gets a file that has been uploaded previously. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FilesFileIdGetAsync (string fileId)
        {
             await FilesFileIdGetAsyncWithHttpInfo(fileId);

        }

        /// <summary>
        /// Get a file Gets a file that has been uploaded previously. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Object>> FilesFileIdGetAsyncWithHttpInfo (string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->FilesFileIdGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (fileId != null)
                requestOptions.PathParameters.Add("file_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Object>("/files/{file_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("FilesFileIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get metadata for a file Gets a file&#39;s info. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file info to get</param>
        /// <returns>FileInfo</returns>
        public FileInfo FilesFileIdInfoGet (string fileId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<FileInfo> localVarResponse = FilesFileIdInfoGetWithHttpInfo(fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get metadata for a file Gets a file&#39;s info. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file info to get</param>
        /// <returns>ApiResponse of FileInfo</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< FileInfo > FilesFileIdInfoGetWithHttpInfo (string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->FilesFileIdInfoGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (fileId != null)
                requestOptions.PathParameters.Add("file_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< FileInfo >("/files/{file_id}/info", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("FilesFileIdInfoGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get metadata for a file Gets a file&#39;s info. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file info to get</param>
        /// <returns>Task of FileInfo</returns>
        public async System.Threading.Tasks.Task<FileInfo> FilesFileIdInfoGetAsync (string fileId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<FileInfo> localVarResponse = await FilesFileIdInfoGetAsyncWithHttpInfo(fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get metadata for a file Gets a file&#39;s info. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file info to get</param>
        /// <returns>Task of ApiResponse (FileInfo)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<FileInfo>> FilesFileIdInfoGetAsyncWithHttpInfo (string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->FilesFileIdInfoGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (fileId != null)
                requestOptions.PathParameters.Add("file_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<FileInfo>("/files/{file_id}/info", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("FilesFileIdInfoGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a public file link Gets a public link for a file that can be accessed without logging into Mattermost. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get a link for</param>
        /// <returns>InlineResponse2007</returns>
        public InlineResponse2007 FilesFileIdLinkGet (string fileId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse2007> localVarResponse = FilesFileIdLinkGetWithHttpInfo(fileId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a public file link Gets a public link for a file that can be accessed without logging into Mattermost. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get a link for</param>
        /// <returns>ApiResponse of InlineResponse2007</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< InlineResponse2007 > FilesFileIdLinkGetWithHttpInfo (string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->FilesFileIdLinkGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (fileId != null)
                requestOptions.PathParameters.Add("file_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< InlineResponse2007 >("/files/{file_id}/link", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("FilesFileIdLinkGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a public file link Gets a public link for a file that can be accessed without logging into Mattermost. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get a link for</param>
        /// <returns>Task of InlineResponse2007</returns>
        public async System.Threading.Tasks.Task<InlineResponse2007> FilesFileIdLinkGetAsync (string fileId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse2007> localVarResponse = await FilesFileIdLinkGetAsyncWithHttpInfo(fileId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a public file link Gets a public link for a file that can be accessed without logging into Mattermost. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get a link for</param>
        /// <returns>Task of ApiResponse (InlineResponse2007)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse2007>> FilesFileIdLinkGetAsyncWithHttpInfo (string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->FilesFileIdLinkGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (fileId != null)
                requestOptions.PathParameters.Add("file_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<InlineResponse2007>("/files/{file_id}/link", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("FilesFileIdLinkGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a file&#39;s preview Gets a file&#39;s preview. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns></returns>
        public void FilesFileIdPreviewGet (string fileId)
        {
             FilesFileIdPreviewGetWithHttpInfo(fileId);
        }

        /// <summary>
        /// Get a file&#39;s preview Gets a file&#39;s preview. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Object> FilesFileIdPreviewGetWithHttpInfo (string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->FilesFileIdPreviewGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (fileId != null)
                requestOptions.PathParameters.Add("file_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get<Object>("/files/{file_id}/preview", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("FilesFileIdPreviewGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a file&#39;s preview Gets a file&#39;s preview. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FilesFileIdPreviewGetAsync (string fileId)
        {
             await FilesFileIdPreviewGetAsyncWithHttpInfo(fileId);

        }

        /// <summary>
        /// Get a file&#39;s preview Gets a file&#39;s preview. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Object>> FilesFileIdPreviewGetAsyncWithHttpInfo (string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->FilesFileIdPreviewGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (fileId != null)
                requestOptions.PathParameters.Add("file_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Object>("/files/{file_id}/preview", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("FilesFileIdPreviewGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a file&#39;s thumbnail Gets a file&#39;s thumbnail. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns></returns>
        public void FilesFileIdThumbnailGet (string fileId)
        {
             FilesFileIdThumbnailGetWithHttpInfo(fileId);
        }

        /// <summary>
        /// Get a file&#39;s thumbnail Gets a file&#39;s thumbnail. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Object> FilesFileIdThumbnailGetWithHttpInfo (string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->FilesFileIdThumbnailGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (fileId != null)
                requestOptions.PathParameters.Add("file_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get<Object>("/files/{file_id}/thumbnail", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("FilesFileIdThumbnailGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a file&#39;s thumbnail Gets a file&#39;s thumbnail. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task FilesFileIdThumbnailGetAsync (string fileId)
        {
             await FilesFileIdThumbnailGetAsyncWithHttpInfo(fileId);

        }

        /// <summary>
        /// Get a file&#39;s thumbnail Gets a file&#39;s thumbnail. ##### Permissions Must have &#x60;read_channel&#x60; permission or be uploader of the file. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fileId">The ID of the file to get</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Object>> FilesFileIdThumbnailGetAsyncWithHttpInfo (string fileId)
        {
            // verify the required parameter 'fileId' is set
            if (fileId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'fileId' when calling FilesApi->FilesFileIdThumbnailGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (fileId != null)
                requestOptions.PathParameters.Add("file_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(fileId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Object>("/files/{file_id}/thumbnail", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("FilesFileIdThumbnailGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Upload a file Uploads a file that can later be attached to a post.  This request can either be a multipart/form-data request with a channel_id, files and optional client_ids defined in the FormData, or it can be a request with the channel_id and filename defined as query parameters with the contents of a single file in the body of the request.  Only multipart/form-data requests are supported by server versions up to and including 4.7. Server versions 4.8 and higher support both types of requests.  ##### Permissions Must have &#x60;upload_file&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel that this file will be uploaded to (optional)</param>
        /// <param name="filename">The name of the file to be uploaded (optional)</param>
        /// <param name="files">A file to be uploaded (optional)</param>
        /// <param name="channelId">The ID of the channel that this file will be uploaded to (optional)</param>
        /// <param name="clientIds">A unique identifier for the file that will be returned in the response (optional)</param>
        /// <returns>InlineResponse201</returns>
        public InlineResponse201 FilesPost (string channelId = null, string filename = null, System.IO.Stream files = null, string channelIdInBody = null, string clientIds = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse201> localVarResponse = FilesPostWithHttpInfo(channelId, filename, files, channelIdInBody, clientIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload a file Uploads a file that can later be attached to a post.  This request can either be a multipart/form-data request with a channel_id, files and optional client_ids defined in the FormData, or it can be a request with the channel_id and filename defined as query parameters with the contents of a single file in the body of the request.  Only multipart/form-data requests are supported by server versions up to and including 4.7. Server versions 4.8 and higher support both types of requests.  ##### Permissions Must have &#x60;upload_file&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel that this file will be uploaded to (optional)</param>
        /// <param name="filename">The name of the file to be uploaded (optional)</param>
        /// <param name="files">A file to be uploaded (optional)</param>
        /// <param name="channelIdInBody">The ID of the channel that this file will be uploaded to (optional)</param>
        /// <param name="clientIds">A unique identifier for the file that will be returned in the response (optional)</param>
        /// <returns>ApiResponse of InlineResponse201</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< InlineResponse201 > FilesPostWithHttpInfo (string channelId = null, string filename = null, System.IO.Stream files = null, string channelIdInBody = null, string clientIds = null)
        {
            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "multipart/form-data", 
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "channel_id", channelId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (filename != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "filename", filename))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (files != null)
            {
                requestOptions.FileParameters.Add("files", files);
            }
            if (channelId != null)
            {
                requestOptions.FormParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // form parameter
            }
            if (clientIds != null)
            {
                requestOptions.FormParameters.Add("client_ids", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(clientIds)); // form parameter
            }


            // make the HTTP request

            var response = this.Client.Post< InlineResponse201 >("/files", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("FilesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Upload a file Uploads a file that can later be attached to a post.  This request can either be a multipart/form-data request with a channel_id, files and optional client_ids defined in the FormData, or it can be a request with the channel_id and filename defined as query parameters with the contents of a single file in the body of the request.  Only multipart/form-data requests are supported by server versions up to and including 4.7. Server versions 4.8 and higher support both types of requests.  ##### Permissions Must have &#x60;upload_file&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel that this file will be uploaded to (optional)</param>
        /// <param name="filename">The name of the file to be uploaded (optional)</param>
        /// <param name="files">A file to be uploaded (optional)</param>
        /// <param name="channelIdInBody">The ID of the channel that this file will be uploaded to (optional)</param>
        /// <param name="clientIds">A unique identifier for the file that will be returned in the response (optional)</param>
        /// <returns>Task of InlineResponse201</returns>
        public async System.Threading.Tasks.Task<InlineResponse201> FilesPostAsync (string channelId = null, string filename = null, System.IO.Stream files = null, string channelIdInBody = null, string clientIds = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse201> localVarResponse = await FilesPostAsyncWithHttpInfo(channelId, filename, files, channelIdInBody, clientIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload a file Uploads a file that can later be attached to a post.  This request can either be a multipart/form-data request with a channel_id, files and optional client_ids defined in the FormData, or it can be a request with the channel_id and filename defined as query parameters with the contents of a single file in the body of the request.  Only multipart/form-data requests are supported by server versions up to and including 4.7. Server versions 4.8 and higher support both types of requests.  ##### Permissions Must have &#x60;upload_file&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The ID of the channel that this file will be uploaded to (optional)</param>
        /// <param name="filename">The name of the file to be uploaded (optional)</param>
        /// <param name="files">A file to be uploaded (optional)</param>
        /// <param name="channelIdInBody">The ID of the channel that this file will be uploaded to (optional)</param>
        /// <param name="clientIds">A unique identifier for the file that will be returned in the response (optional)</param>
        /// <returns>Task of ApiResponse (InlineResponse201)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse201>> FilesPostAsyncWithHttpInfo (string channelId = null, string filename = null, System.IO.Stream files = null, string channelIdInBody = null, string clientIds = null)
        {

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "multipart/form-data", 
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "channel_id", channelId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (filename != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "filename", filename))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (files != null)
            {
                requestOptions.FileParameters.Add("files", files);
            }
            if (channelId != null)
            {
                requestOptions.FormParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // form parameter
            }
            if (clientIds != null)
            {
                requestOptions.FormParameters.Add("client_ids", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(clientIds)); // form parameter
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<InlineResponse201>("/files", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("FilesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
