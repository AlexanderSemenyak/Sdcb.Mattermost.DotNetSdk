/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Convert a channel from public to private
        /// </summary>
        /// <remarks>
        /// Convert into private channel from the provided channel id string.  __Minimum server version__: 4.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Channel</returns>
        Channel ChannelsChannelIdConvertPost (string channelId);

        /// <summary>
        /// Convert a channel from public to private
        /// </summary>
        /// <remarks>
        /// Convert into private channel from the provided channel id string.  __Minimum server version__: 4.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ApiResponse of Channel</returns>
        ApiResponse<Channel> ChannelsChannelIdConvertPostWithHttpInfo (string channelId);
        /// <summary>
        /// Delete a channel
        /// </summary>
        /// <remarks>
        /// Soft deletes a channel, by marking the channel as deleted in the database. Soft deleted channels will not be accessible in the user interface. Direct and group message channels cannot be deleted. ##### Permissions &#x60;delete_public_channel&#x60; permission if the channel is public, &#x60;delete_private_channel&#x60; permission if the channel is private, or have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>StatusOK</returns>
        StatusOK ChannelsChannelIdDelete (string channelId);

        /// <summary>
        /// Delete a channel
        /// </summary>
        /// <remarks>
        /// Soft deletes a channel, by marking the channel as deleted in the database. Soft deleted channels will not be accessible in the user interface. Direct and group message channels cannot be deleted. ##### Permissions &#x60;delete_public_channel&#x60; permission if the channel is public, &#x60;delete_private_channel&#x60; permission if the channel is private, or have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> ChannelsChannelIdDeleteWithHttpInfo (string channelId);
        /// <summary>
        /// Get a channel
        /// </summary>
        /// <remarks>
        /// Get channel from the provided channel id string. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Channel</returns>
        Channel ChannelsChannelIdGet (string channelId);

        /// <summary>
        /// Get a channel
        /// </summary>
        /// <remarks>
        /// Get channel from the provided channel id string. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ApiResponse of Channel</returns>
        ApiResponse<Channel> ChannelsChannelIdGetWithHttpInfo (string channelId);
        /// <summary>
        /// Get channel members
        /// </summary>
        /// <remarks>
        /// Get a page of members for a channel. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of members per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;ChannelMember&gt;</returns>
        List<ChannelMember> ChannelsChannelIdMembersGet (string channelId, string page = null, string perPage = null);

        /// <summary>
        /// Get channel members
        /// </summary>
        /// <remarks>
        /// Get a page of members for a channel. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of members per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;ChannelMember&gt;</returns>
        ApiResponse<List<ChannelMember>> ChannelsChannelIdMembersGetWithHttpInfo (string channelId, string page = null, string perPage = null);
        /// <summary>
        /// Get channel members by ids
        /// </summary>
        /// <remarks>
        /// Get a list of channel members based on the provided user ids. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userIds">List of user ids</param>
        /// <returns>List&lt;ChannelMember&gt;</returns>
        List<ChannelMember> ChannelsChannelIdMembersIdsPost (string channelId, List<string> userIds);

        /// <summary>
        /// Get channel members by ids
        /// </summary>
        /// <remarks>
        /// Get a list of channel members based on the provided user ids. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userIds">List of user ids</param>
        /// <returns>ApiResponse of List&lt;ChannelMember&gt;</returns>
        ApiResponse<List<ChannelMember>> ChannelsChannelIdMembersIdsPostWithHttpInfo (string channelId, List<string> userIds);
        /// <summary>
        /// Channel members minus group members.
        /// </summary>
        /// <remarks>
        /// Get the set of users who are members of the channel minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given channel.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="groupIds">A comma-separated list of group ids.</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;0&quot;)</param>
        /// <returns></returns>
        void ChannelsChannelIdMembersMinusGroupMembersGet (string channelId, string groupIds, string page = null, string perPage = null);

        /// <summary>
        /// Channel members minus group members.
        /// </summary>
        /// <remarks>
        /// Get the set of users who are members of the channel minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given channel.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="groupIds">A comma-separated list of group ids.</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;0&quot;)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> ChannelsChannelIdMembersMinusGroupMembersGetWithHttpInfo (string channelId, string groupIds, string page = null, string perPage = null);
        /// <summary>
        /// Add user to channel
        /// </summary>
        /// <remarks>
        /// Add a user to a channel by creating a channel member object.
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The channel ID</param>
        /// <param name="body"></param>
        /// <returns>ChannelMember</returns>
        ChannelMember ChannelsChannelIdMembersPost (string channelId, InlineObject36 body);

        /// <summary>
        /// Add user to channel
        /// </summary>
        /// <remarks>
        /// Add a user to a channel by creating a channel member object.
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The channel ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ChannelMember</returns>
        ApiResponse<ChannelMember> ChannelsChannelIdMembersPostWithHttpInfo (string channelId, InlineObject36 body);
        /// <summary>
        /// Remove user from channel
        /// </summary>
        /// <remarks>
        /// Delete a channel member, effectively removing them from a channel.  In server version 5.3 and later, channel members can only be deleted from public or private channels. ##### Permissions &#x60;manage_public_channel_members&#x60; permission if the channel is public. &#x60;manage_private_channel_members&#x60; permission if the channel is private. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>StatusOK</returns>
        StatusOK ChannelsChannelIdMembersUserIdDelete (string channelId, string userId);

        /// <summary>
        /// Remove user from channel
        /// </summary>
        /// <remarks>
        /// Delete a channel member, effectively removing them from a channel.  In server version 5.3 and later, channel members can only be deleted from public or private channels. ##### Permissions &#x60;manage_public_channel_members&#x60; permission if the channel is public. &#x60;manage_private_channel_members&#x60; permission if the channel is private. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> ChannelsChannelIdMembersUserIdDeleteWithHttpInfo (string channelId, string userId);
        /// <summary>
        /// Get channel member
        /// </summary>
        /// <remarks>
        /// Get a channel member. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>ChannelMember</returns>
        ChannelMember ChannelsChannelIdMembersUserIdGet (string channelId, string userId);

        /// <summary>
        /// Get channel member
        /// </summary>
        /// <remarks>
        /// Get a channel member. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of ChannelMember</returns>
        ApiResponse<ChannelMember> ChannelsChannelIdMembersUserIdGetWithHttpInfo (string channelId, string userId);
        /// <summary>
        /// Update channel notifications
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s notification properties for a channel. Only the provided fields are updated. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="notifyProps"></param>
        /// <returns>StatusOK</returns>
        StatusOK ChannelsChannelIdMembersUserIdNotifyPropsPut (string channelId, string userId, ChannelNotifyProps notifyProps);

        /// <summary>
        /// Update channel notifications
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s notification properties for a channel. Only the provided fields are updated. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="notifyProps"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> ChannelsChannelIdMembersUserIdNotifyPropsPutWithHttpInfo (string channelId, string userId, ChannelNotifyProps notifyProps);
        /// <summary>
        /// Update channel roles
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s roles for a channel. ##### Permissions Must have &#x60;manage_channel_roles&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="roles"></param>
        /// <returns>StatusOK</returns>
        StatusOK ChannelsChannelIdMembersUserIdRolesPut (string channelId, string userId, InlineObject37 roles);

        /// <summary>
        /// Update channel roles
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s roles for a channel. ##### Permissions Must have &#x60;manage_channel_roles&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="roles"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> ChannelsChannelIdMembersUserIdRolesPutWithHttpInfo (string channelId, string userId, InlineObject37 roles);
        /// <summary>
        /// Update the scheme-derived roles of a channel member.
        /// </summary>
        /// <remarks>
        /// Update a channel member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary channel member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a channel admin. __Minimum server version__: 5.0 ##### Permissions Must be authenticated and have the &#x60;manage_channel_roles&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        StatusOK ChannelsChannelIdMembersUserIdSchemeRolesPut (string channelId, string userId, InlineObject38 body);

        /// <summary>
        /// Update the scheme-derived roles of a channel member.
        /// </summary>
        /// <remarks>
        /// Update a channel member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary channel member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a channel admin. __Minimum server version__: 5.0 ##### Permissions Must be authenticated and have the &#x60;manage_channel_roles&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> ChannelsChannelIdMembersUserIdSchemeRolesPutWithHttpInfo (string channelId, string userId, InlineObject38 body);
        /// <summary>
        /// Patch a channel
        /// </summary>
        /// <remarks>
        /// Partially update a channel by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>Channel</returns>
        Channel ChannelsChannelIdPatchPut (string channelId, InlineObject34 body);

        /// <summary>
        /// Patch a channel
        /// </summary>
        /// <remarks>
        /// Partially update a channel by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Channel</returns>
        ApiResponse<Channel> ChannelsChannelIdPatchPutWithHttpInfo (string channelId, InlineObject34 body);
        /// <summary>
        /// Get a channel&#39;s pinned posts
        /// </summary>
        /// <remarks>
        /// Get a list of pinned posts for channel.
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>PostList</returns>
        PostList ChannelsChannelIdPinnedGet (string channelId);

        /// <summary>
        /// Get a channel&#39;s pinned posts
        /// </summary>
        /// <remarks>
        /// Get a list of pinned posts for channel.
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ApiResponse of PostList</returns>
        ApiResponse<PostList> ChannelsChannelIdPinnedGetWithHttpInfo (string channelId);
        /// <summary>
        /// Update a channel
        /// </summary>
        /// <remarks>
        /// Update a channel. The fields that can be updated are listed as parameters. Omitted fields will be treated as blanks. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>Channel</returns>
        Channel ChannelsChannelIdPut (string channelId, InlineObject33 body);

        /// <summary>
        /// Update a channel
        /// </summary>
        /// <remarks>
        /// Update a channel. The fields that can be updated are listed as parameters. Omitted fields will be treated as blanks. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Channel</returns>
        ApiResponse<Channel> ChannelsChannelIdPutWithHttpInfo (string channelId, InlineObject33 body);
        /// <summary>
        /// Restore a channel
        /// </summary>
        /// <remarks>
        /// Restore channel from the provided channel id string.  __Minimum server version__: 3.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Channel</returns>
        Channel ChannelsChannelIdRestorePost (string channelId);

        /// <summary>
        /// Restore a channel
        /// </summary>
        /// <remarks>
        /// Restore channel from the provided channel id string.  __Minimum server version__: 3.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ApiResponse of Channel</returns>
        ApiResponse<Channel> ChannelsChannelIdRestorePostWithHttpInfo (string channelId);
        /// <summary>
        /// Set a channel&#39;s scheme
        /// </summary>
        /// <remarks>
        /// Set a channel&#39;s scheme, more specifically sets the scheme_id value of a channel record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        StatusOK ChannelsChannelIdSchemePut (string channelId, InlineObject40 body);

        /// <summary>
        /// Set a channel&#39;s scheme
        /// </summary>
        /// <remarks>
        /// Set a channel&#39;s scheme, more specifically sets the scheme_id value of a channel record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> ChannelsChannelIdSchemePutWithHttpInfo (string channelId, InlineObject40 body);
        /// <summary>
        /// Get channel statistics
        /// </summary>
        /// <remarks>
        /// Get statistics for a channel. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ChannelStats</returns>
        ChannelStats ChannelsChannelIdStatsGet (string channelId);

        /// <summary>
        /// Get channel statistics
        /// </summary>
        /// <remarks>
        /// Get statistics for a channel. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ApiResponse of ChannelStats</returns>
        ApiResponse<ChannelStats> ChannelsChannelIdStatsGetWithHttpInfo (string channelId);
        /// <summary>
        /// Get timezones in a channel
        /// </summary>
        /// <remarks>
        /// Get a list of timezones for the users who are in this channel.  __Minimum server version__: 5.6  ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>List&lt;string&gt;</returns>
        List<string> ChannelsChannelIdTimezonesGet (string channelId);

        /// <summary>
        /// Get timezones in a channel
        /// </summary>
        /// <remarks>
        /// Get a list of timezones for the users who are in this channel.  __Minimum server version__: 5.6  ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        ApiResponse<List<string>> ChannelsChannelIdTimezonesGetWithHttpInfo (string channelId);
        /// <summary>
        /// Create a direct message channel
        /// </summary>
        /// <remarks>
        /// Create a new direct message channel between two users. ##### Permissions Must be one of the two users and have &#x60;create_direct_channel&#x60; permission. Having the &#x60;manage_system&#x60; permission voids the previous requirements. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The two user ids to be in the direct message</param>
        /// <returns>Channel</returns>
        Channel ChannelsDirectPost (List<string> body);

        /// <summary>
        /// Create a direct message channel
        /// </summary>
        /// <remarks>
        /// Create a new direct message channel between two users. ##### Permissions Must be one of the two users and have &#x60;create_direct_channel&#x60; permission. Having the &#x60;manage_system&#x60; permission voids the previous requirements. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The two user ids to be in the direct message</param>
        /// <returns>ApiResponse of Channel</returns>
        ApiResponse<Channel> ChannelsDirectPostWithHttpInfo (List<string> body);
        /// <summary>
        /// Create a group message channel
        /// </summary>
        /// <remarks>
        /// Create a new group message channel to group of users. If the logged in user&#39;s id is not included in the list, it will be appended to the end. ##### Permissions Must have &#x60;create_group_channel&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User ids to be in the group message channel</param>
        /// <returns>Channel</returns>
        Channel ChannelsGroupPost (List<string> body);

        /// <summary>
        /// Create a group message channel
        /// </summary>
        /// <remarks>
        /// Create a new group message channel to group of users. If the logged in user&#39;s id is not included in the list, it will be appended to the end. ##### Permissions Must have &#x60;create_group_channel&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User ids to be in the group message channel</param>
        /// <returns>ApiResponse of Channel</returns>
        ApiResponse<Channel> ChannelsGroupPostWithHttpInfo (List<string> body);
        /// <summary>
        /// View channel
        /// </summary>
        /// <remarks>
        /// Perform all the actions involved in viewing a channel. This includes marking channels as read, clearing push notifications, and updating the active channel. ##### Permissions Must be logged in as user or have &#x60;edit_other_users&#x60; permission.  __Response only includes &#x60;last_viewed_at_times&#x60; in Mattermost server 4.3 and newer.__ 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID to perform the view action for</param>
        /// <param name="body"></param>
        /// <returns>InlineResponse2006</returns>
        InlineResponse2006 ChannelsMembersUserIdViewPost (string userId, InlineObject39 body);

        /// <summary>
        /// View channel
        /// </summary>
        /// <remarks>
        /// Perform all the actions involved in viewing a channel. This includes marking channels as read, clearing push notifications, and updating the active channel. ##### Permissions Must be logged in as user or have &#x60;edit_other_users&#x60; permission.  __Response only includes &#x60;last_viewed_at_times&#x60; in Mattermost server 4.3 and newer.__ 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID to perform the view action for</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        ApiResponse<InlineResponse2006> ChannelsMembersUserIdViewPostWithHttpInfo (string userId, InlineObject39 body);
        /// <summary>
        /// Create a channel
        /// </summary>
        /// <remarks>
        /// Create a new channel. ##### Permissions If creating a public channel, &#x60;create_public_channel&#x60; permission is required. If creating a private channel, &#x60;create_private_channel&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Channel</returns>
        Channel ChannelsPost (InlineObject31 body);

        /// <summary>
        /// Create a channel
        /// </summary>
        /// <remarks>
        /// Create a new channel. ##### Permissions If creating a public channel, &#x60;create_public_channel&#x60; permission is required. If creating a private channel, &#x60;create_private_channel&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Channel</returns>
        ApiResponse<Channel> ChannelsPostWithHttpInfo (InlineObject31 body);
        /// <summary>
        /// Search Group Channels
        /// </summary>
        /// <remarks>
        /// Get a list of group channels for a user which members&#39; usernames match the search term.  __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;Channel&gt;</returns>
        List<Channel> GroupSearchPost (InlineObject32 body);

        /// <summary>
        /// Search Group Channels
        /// </summary>
        /// <remarks>
        /// Get a list of group channels for a user which members&#39; usernames match the search term.  __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        ApiResponse<List<Channel>> GroupSearchPostWithHttpInfo (InlineObject32 body);
        /// <summary>
        /// Get a channel by name and team name
        /// </summary>
        /// <remarks>
        /// Gets a channel from the provided team name and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamName">Team Name</param>
        /// <param name="channelName">Channel Name</param>
        /// <param name="includeDeleted">Defines if deleted channels should be returned or not (optional, default to false)</param>
        /// <returns>Channel</returns>
        Channel TeamsNameTeamNameChannelsNameChannelNameGet (string teamName, string channelName, string includeDeleted = null);

        /// <summary>
        /// Get a channel by name and team name
        /// </summary>
        /// <remarks>
        /// Gets a channel from the provided team name and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamName">Team Name</param>
        /// <param name="channelName">Channel Name</param>
        /// <param name="includeDeleted">Defines if deleted channels should be returned or not (optional, default to false)</param>
        /// <returns>ApiResponse of Channel</returns>
        ApiResponse<Channel> TeamsNameTeamNameChannelsNameChannelNameGetWithHttpInfo (string teamName, string channelName, string includeDeleted = null);
        /// <summary>
        /// Autocomplete channels
        /// </summary>
        /// <remarks>
        /// Autocomplete public channels on a team based on the search term provided in the request URL.  __Minimum server version__: 4.7  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="name">Name or display name</param>
        /// <returns>List&lt;Channel&gt;</returns>
        List<Channel> TeamsTeamIdChannelsAutocompleteGet (string teamId, string name);

        /// <summary>
        /// Autocomplete channels
        /// </summary>
        /// <remarks>
        /// Autocomplete public channels on a team based on the search term provided in the request URL.  __Minimum server version__: 4.7  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="name">Name or display name</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        ApiResponse<List<Channel>> TeamsTeamIdChannelsAutocompleteGetWithHttpInfo (string teamId, string name);
        /// <summary>
        /// Get deleted channels
        /// </summary>
        /// <remarks>
        /// Get a page of deleted channels on a team based on query string parameters - team_id, page and per_page.  __Minimum server version__: 3.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of public channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Channel&gt;</returns>
        List<Channel> TeamsTeamIdChannelsDeletedGet (string teamId, string page = null, string perPage = null);

        /// <summary>
        /// Get deleted channels
        /// </summary>
        /// <remarks>
        /// Get a page of deleted channels on a team based on query string parameters - team_id, page and per_page.  __Minimum server version__: 3.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of public channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        ApiResponse<List<Channel>> TeamsTeamIdChannelsDeletedGetWithHttpInfo (string teamId, string page = null, string perPage = null);
        /// <summary>
        /// Get public channels
        /// </summary>
        /// <remarks>
        /// Get a page of public channels on a team based on query string parameters - page and per_page. ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of public channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Channel&gt;</returns>
        List<Channel> TeamsTeamIdChannelsGet (string teamId, string page = null, string perPage = null);

        /// <summary>
        /// Get public channels
        /// </summary>
        /// <remarks>
        /// Get a page of public channels on a team based on query string parameters - page and per_page. ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of public channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        ApiResponse<List<Channel>> TeamsTeamIdChannelsGetWithHttpInfo (string teamId, string page = null, string perPage = null);
        /// <summary>
        /// Get a list of channels by ids
        /// </summary>
        /// <remarks>
        /// Get a list of public channels on a team by id. ##### Permissions &#x60;view_team&#x60; for the team the channels are on. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of channel ids</param>
        /// <returns>List&lt;Channel&gt;</returns>
        List<Channel> TeamsTeamIdChannelsIdsPost (string teamId, List<string> body);

        /// <summary>
        /// Get a list of channels by ids
        /// </summary>
        /// <remarks>
        /// Get a list of public channels on a team by id. ##### Permissions &#x60;view_team&#x60; for the team the channels are on. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of channel ids</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        ApiResponse<List<Channel>> TeamsTeamIdChannelsIdsPostWithHttpInfo (string teamId, List<string> body);
        /// <summary>
        /// Get a channel by name
        /// </summary>
        /// <remarks>
        /// Gets channel from the provided team id and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="channelName">Channel Name</param>
        /// <param name="includeDeleted">Defines if deleted channels should be returned or not (optional, default to false)</param>
        /// <returns>Channel</returns>
        Channel TeamsTeamIdChannelsNameChannelNameGet (string teamId, string channelName, string includeDeleted = null);

        /// <summary>
        /// Get a channel by name
        /// </summary>
        /// <remarks>
        /// Gets channel from the provided team id and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="channelName">Channel Name</param>
        /// <param name="includeDeleted">Defines if deleted channels should be returned or not (optional, default to false)</param>
        /// <returns>ApiResponse of Channel</returns>
        ApiResponse<Channel> TeamsTeamIdChannelsNameChannelNameGetWithHttpInfo (string teamId, string channelName, string includeDeleted = null);
        /// <summary>
        /// Autocomplete channels for search
        /// </summary>
        /// <remarks>
        /// Autocomplete your channels on a team based on the search term provided in the request URL.  __Minimum server version__: 5.4  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="name">Name or display name</param>
        /// <returns>List&lt;Channel&gt;</returns>
        List<Channel> TeamsTeamIdChannelsSearchAutocompleteGet (string teamId, string name);

        /// <summary>
        /// Autocomplete channels for search
        /// </summary>
        /// <remarks>
        /// Autocomplete your channels on a team based on the search term provided in the request URL.  __Minimum server version__: 5.4  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="name">Name or display name</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        ApiResponse<List<Channel>> TeamsTeamIdChannelsSearchAutocompleteGetWithHttpInfo (string teamId, string name);
        /// <summary>
        /// Search channels
        /// </summary>
        /// <remarks>
        /// Search public channels on a team based on the search term provided in the request body. ##### Permissions Must have the &#x60;list_team_channels&#x60; permission.  In server version 5.16 and later, a user without the &#x60;list_team_channels&#x60; permission will be able to use this endpoint, with the search results limited to the channels that the user is a member of. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>List&lt;Channel&gt;</returns>
        List<Channel> TeamsTeamIdChannelsSearchPost (string teamId, InlineObject35 body);

        /// <summary>
        /// Search channels
        /// </summary>
        /// <remarks>
        /// Search public channels on a team based on the search term provided in the request body. ##### Permissions Must have the &#x60;list_team_channels&#x60; permission.  In server version 5.16 and later, a user without the &#x60;list_team_channels&#x60; permission will be able to use this endpoint, with the search results limited to the channels that the user is a member of. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        ApiResponse<List<Channel>> TeamsTeamIdChannelsSearchPostWithHttpInfo (string teamId, InlineObject35 body);
        /// <summary>
        /// Get unread messages
        /// </summary>
        /// <remarks>
        /// Get the total unread messages and mentions for a channel for a user. ##### Permissions Must be logged in as user and have the &#x60;read_channel&#x60; permission, or have &#x60;edit_other_usrs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ChannelUnread</returns>
        ChannelUnread UsersUserIdChannelsChannelIdUnreadGet (string userId, string channelId);

        /// <summary>
        /// Get unread messages
        /// </summary>
        /// <remarks>
        /// Get the total unread messages and mentions for a channel for a user. ##### Permissions Must be logged in as user and have the &#x60;read_channel&#x60; permission, or have &#x60;edit_other_usrs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ApiResponse of ChannelUnread</returns>
        ApiResponse<ChannelUnread> UsersUserIdChannelsChannelIdUnreadGetWithHttpInfo (string userId, string channelId);
        /// <summary>
        /// Get channels for user
        /// </summary>
        /// <remarks>
        /// Get all the channels on a team for a user. ##### Permissions Logged in as the user, or have &#x60;edit_other_users&#x60; permission, and &#x60;view_team&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>List&lt;Channel&gt;</returns>
        List<Channel> UsersUserIdTeamsTeamIdChannelsGet (string userId, string teamId);

        /// <summary>
        /// Get channels for user
        /// </summary>
        /// <remarks>
        /// Get all the channels on a team for a user. ##### Permissions Logged in as the user, or have &#x60;edit_other_users&#x60; permission, and &#x60;view_team&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        ApiResponse<List<Channel>> UsersUserIdTeamsTeamIdChannelsGetWithHttpInfo (string userId, string teamId);
        /// <summary>
        /// Get channel members for user
        /// </summary>
        /// <remarks>
        /// Get all channel members on a team for a user. ##### Permissions Logged in as the user and &#x60;view_team&#x60; permission for the team. Having &#x60;manage_system&#x60; permission voids the previous requirements. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>List&lt;ChannelMember&gt;</returns>
        List<ChannelMember> UsersUserIdTeamsTeamIdChannelsMembersGet (string userId, string teamId);

        /// <summary>
        /// Get channel members for user
        /// </summary>
        /// <remarks>
        /// Get all channel members on a team for a user. ##### Permissions Logged in as the user and &#x60;view_team&#x60; permission for the team. Having &#x60;manage_system&#x60; permission voids the previous requirements. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of List&lt;ChannelMember&gt;</returns>
        ApiResponse<List<ChannelMember>> UsersUserIdTeamsTeamIdChannelsMembersGetWithHttpInfo (string userId, string teamId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Convert a channel from public to private
        /// </summary>
        /// <remarks>
        /// Convert into private channel from the provided channel id string.  __Minimum server version__: 4.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of Channel</returns>
        System.Threading.Tasks.Task<Channel> ChannelsChannelIdConvertPostAsync (string channelId);

        /// <summary>
        /// Convert a channel from public to private
        /// </summary>
        /// <remarks>
        /// Convert into private channel from the provided channel id string.  __Minimum server version__: 4.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Channel>> ChannelsChannelIdConvertPostAsyncWithHttpInfo (string channelId);
        /// <summary>
        /// Delete a channel
        /// </summary>
        /// <remarks>
        /// Soft deletes a channel, by marking the channel as deleted in the database. Soft deleted channels will not be accessible in the user interface. Direct and group message channels cannot be deleted. ##### Permissions &#x60;delete_public_channel&#x60; permission if the channel is public, &#x60;delete_private_channel&#x60; permission if the channel is private, or have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> ChannelsChannelIdDeleteAsync (string channelId);

        /// <summary>
        /// Delete a channel
        /// </summary>
        /// <remarks>
        /// Soft deletes a channel, by marking the channel as deleted in the database. Soft deleted channels will not be accessible in the user interface. Direct and group message channels cannot be deleted. ##### Permissions &#x60;delete_public_channel&#x60; permission if the channel is public, &#x60;delete_private_channel&#x60; permission if the channel is private, or have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> ChannelsChannelIdDeleteAsyncWithHttpInfo (string channelId);
        /// <summary>
        /// Get a channel
        /// </summary>
        /// <remarks>
        /// Get channel from the provided channel id string. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of Channel</returns>
        System.Threading.Tasks.Task<Channel> ChannelsChannelIdGetAsync (string channelId);

        /// <summary>
        /// Get a channel
        /// </summary>
        /// <remarks>
        /// Get channel from the provided channel id string. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Channel>> ChannelsChannelIdGetAsyncWithHttpInfo (string channelId);
        /// <summary>
        /// Get channel members
        /// </summary>
        /// <remarks>
        /// Get a page of members for a channel. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of members per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;ChannelMember&gt;</returns>
        System.Threading.Tasks.Task<List<ChannelMember>> ChannelsChannelIdMembersGetAsync (string channelId, string page = null, string perPage = null);

        /// <summary>
        /// Get channel members
        /// </summary>
        /// <remarks>
        /// Get a page of members for a channel. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of members per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChannelMember>>> ChannelsChannelIdMembersGetAsyncWithHttpInfo (string channelId, string page = null, string perPage = null);
        /// <summary>
        /// Get channel members by ids
        /// </summary>
        /// <remarks>
        /// Get a list of channel members based on the provided user ids. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userIds">List of user ids</param>
        /// <returns>Task of List&lt;ChannelMember&gt;</returns>
        System.Threading.Tasks.Task<List<ChannelMember>> ChannelsChannelIdMembersIdsPostAsync (string channelId, List<string> userIds);

        /// <summary>
        /// Get channel members by ids
        /// </summary>
        /// <remarks>
        /// Get a list of channel members based on the provided user ids. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userIds">List of user ids</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChannelMember>>> ChannelsChannelIdMembersIdsPostAsyncWithHttpInfo (string channelId, List<string> userIds);
        /// <summary>
        /// Channel members minus group members.
        /// </summary>
        /// <remarks>
        /// Get the set of users who are members of the channel minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given channel.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="groupIds">A comma-separated list of group ids.</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;0&quot;)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ChannelsChannelIdMembersMinusGroupMembersGetAsync (string channelId, string groupIds, string page = null, string perPage = null);

        /// <summary>
        /// Channel members minus group members.
        /// </summary>
        /// <remarks>
        /// Get the set of users who are members of the channel minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given channel.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="groupIds">A comma-separated list of group ids.</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;0&quot;)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> ChannelsChannelIdMembersMinusGroupMembersGetAsyncWithHttpInfo (string channelId, string groupIds, string page = null, string perPage = null);
        /// <summary>
        /// Add user to channel
        /// </summary>
        /// <remarks>
        /// Add a user to a channel by creating a channel member object.
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The channel ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ChannelMember</returns>
        System.Threading.Tasks.Task<ChannelMember> ChannelsChannelIdMembersPostAsync (string channelId, InlineObject36 body);

        /// <summary>
        /// Add user to channel
        /// </summary>
        /// <remarks>
        /// Add a user to a channel by creating a channel member object.
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The channel ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ChannelMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelMember>> ChannelsChannelIdMembersPostAsyncWithHttpInfo (string channelId, InlineObject36 body);
        /// <summary>
        /// Remove user from channel
        /// </summary>
        /// <remarks>
        /// Delete a channel member, effectively removing them from a channel.  In server version 5.3 and later, channel members can only be deleted from public or private channels. ##### Permissions &#x60;manage_public_channel_members&#x60; permission if the channel is public. &#x60;manage_private_channel_members&#x60; permission if the channel is private. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> ChannelsChannelIdMembersUserIdDeleteAsync (string channelId, string userId);

        /// <summary>
        /// Remove user from channel
        /// </summary>
        /// <remarks>
        /// Delete a channel member, effectively removing them from a channel.  In server version 5.3 and later, channel members can only be deleted from public or private channels. ##### Permissions &#x60;manage_public_channel_members&#x60; permission if the channel is public. &#x60;manage_private_channel_members&#x60; permission if the channel is private. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> ChannelsChannelIdMembersUserIdDeleteAsyncWithHttpInfo (string channelId, string userId);
        /// <summary>
        /// Get channel member
        /// </summary>
        /// <remarks>
        /// Get a channel member. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ChannelMember</returns>
        System.Threading.Tasks.Task<ChannelMember> ChannelsChannelIdMembersUserIdGetAsync (string channelId, string userId);

        /// <summary>
        /// Get channel member
        /// </summary>
        /// <remarks>
        /// Get a channel member. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (ChannelMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelMember>> ChannelsChannelIdMembersUserIdGetAsyncWithHttpInfo (string channelId, string userId);
        /// <summary>
        /// Update channel notifications
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s notification properties for a channel. Only the provided fields are updated. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="notifyProps"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> ChannelsChannelIdMembersUserIdNotifyPropsPutAsync (string channelId, string userId, ChannelNotifyProps notifyProps);

        /// <summary>
        /// Update channel notifications
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s notification properties for a channel. Only the provided fields are updated. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="notifyProps"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> ChannelsChannelIdMembersUserIdNotifyPropsPutAsyncWithHttpInfo (string channelId, string userId, ChannelNotifyProps notifyProps);
        /// <summary>
        /// Update channel roles
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s roles for a channel. ##### Permissions Must have &#x60;manage_channel_roles&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="roles"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> ChannelsChannelIdMembersUserIdRolesPutAsync (string channelId, string userId, InlineObject37 roles);

        /// <summary>
        /// Update channel roles
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s roles for a channel. ##### Permissions Must have &#x60;manage_channel_roles&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="roles"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> ChannelsChannelIdMembersUserIdRolesPutAsyncWithHttpInfo (string channelId, string userId, InlineObject37 roles);
        /// <summary>
        /// Update the scheme-derived roles of a channel member.
        /// </summary>
        /// <remarks>
        /// Update a channel member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary channel member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a channel admin. __Minimum server version__: 5.0 ##### Permissions Must be authenticated and have the &#x60;manage_channel_roles&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> ChannelsChannelIdMembersUserIdSchemeRolesPutAsync (string channelId, string userId, InlineObject38 body);

        /// <summary>
        /// Update the scheme-derived roles of a channel member.
        /// </summary>
        /// <remarks>
        /// Update a channel member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary channel member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a channel admin. __Minimum server version__: 5.0 ##### Permissions Must be authenticated and have the &#x60;manage_channel_roles&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> ChannelsChannelIdMembersUserIdSchemeRolesPutAsyncWithHttpInfo (string channelId, string userId, InlineObject38 body);
        /// <summary>
        /// Patch a channel
        /// </summary>
        /// <remarks>
        /// Partially update a channel by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of Channel</returns>
        System.Threading.Tasks.Task<Channel> ChannelsChannelIdPatchPutAsync (string channelId, InlineObject34 body);

        /// <summary>
        /// Patch a channel
        /// </summary>
        /// <remarks>
        /// Partially update a channel by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Channel>> ChannelsChannelIdPatchPutAsyncWithHttpInfo (string channelId, InlineObject34 body);
        /// <summary>
        /// Get a channel&#39;s pinned posts
        /// </summary>
        /// <remarks>
        /// Get a list of pinned posts for channel.
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of PostList</returns>
        System.Threading.Tasks.Task<PostList> ChannelsChannelIdPinnedGetAsync (string channelId);

        /// <summary>
        /// Get a channel&#39;s pinned posts
        /// </summary>
        /// <remarks>
        /// Get a list of pinned posts for channel.
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ApiResponse (PostList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostList>> ChannelsChannelIdPinnedGetAsyncWithHttpInfo (string channelId);
        /// <summary>
        /// Update a channel
        /// </summary>
        /// <remarks>
        /// Update a channel. The fields that can be updated are listed as parameters. Omitted fields will be treated as blanks. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of Channel</returns>
        System.Threading.Tasks.Task<Channel> ChannelsChannelIdPutAsync (string channelId, InlineObject33 body);

        /// <summary>
        /// Update a channel
        /// </summary>
        /// <remarks>
        /// Update a channel. The fields that can be updated are listed as parameters. Omitted fields will be treated as blanks. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Channel>> ChannelsChannelIdPutAsyncWithHttpInfo (string channelId, InlineObject33 body);
        /// <summary>
        /// Restore a channel
        /// </summary>
        /// <remarks>
        /// Restore channel from the provided channel id string.  __Minimum server version__: 3.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of Channel</returns>
        System.Threading.Tasks.Task<Channel> ChannelsChannelIdRestorePostAsync (string channelId);

        /// <summary>
        /// Restore a channel
        /// </summary>
        /// <remarks>
        /// Restore channel from the provided channel id string.  __Minimum server version__: 3.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Channel>> ChannelsChannelIdRestorePostAsyncWithHttpInfo (string channelId);
        /// <summary>
        /// Set a channel&#39;s scheme
        /// </summary>
        /// <remarks>
        /// Set a channel&#39;s scheme, more specifically sets the scheme_id value of a channel record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> ChannelsChannelIdSchemePutAsync (string channelId, InlineObject40 body);

        /// <summary>
        /// Set a channel&#39;s scheme
        /// </summary>
        /// <remarks>
        /// Set a channel&#39;s scheme, more specifically sets the scheme_id value of a channel record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> ChannelsChannelIdSchemePutAsyncWithHttpInfo (string channelId, InlineObject40 body);
        /// <summary>
        /// Get channel statistics
        /// </summary>
        /// <remarks>
        /// Get statistics for a channel. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ChannelStats</returns>
        System.Threading.Tasks.Task<ChannelStats> ChannelsChannelIdStatsGetAsync (string channelId);

        /// <summary>
        /// Get channel statistics
        /// </summary>
        /// <remarks>
        /// Get statistics for a channel. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ApiResponse (ChannelStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelStats>> ChannelsChannelIdStatsGetAsyncWithHttpInfo (string channelId);
        /// <summary>
        /// Get timezones in a channel
        /// </summary>
        /// <remarks>
        /// Get a list of timezones for the users who are in this channel.  __Minimum server version__: 5.6  ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        System.Threading.Tasks.Task<List<string>> ChannelsChannelIdTimezonesGetAsync (string channelId);

        /// <summary>
        /// Get timezones in a channel
        /// </summary>
        /// <remarks>
        /// Get a list of timezones for the users who are in this channel.  __Minimum server version__: 5.6  ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<string>>> ChannelsChannelIdTimezonesGetAsyncWithHttpInfo (string channelId);
        /// <summary>
        /// Create a direct message channel
        /// </summary>
        /// <remarks>
        /// Create a new direct message channel between two users. ##### Permissions Must be one of the two users and have &#x60;create_direct_channel&#x60; permission. Having the &#x60;manage_system&#x60; permission voids the previous requirements. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The two user ids to be in the direct message</param>
        /// <returns>Task of Channel</returns>
        System.Threading.Tasks.Task<Channel> ChannelsDirectPostAsync (List<string> body);

        /// <summary>
        /// Create a direct message channel
        /// </summary>
        /// <remarks>
        /// Create a new direct message channel between two users. ##### Permissions Must be one of the two users and have &#x60;create_direct_channel&#x60; permission. Having the &#x60;manage_system&#x60; permission voids the previous requirements. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The two user ids to be in the direct message</param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Channel>> ChannelsDirectPostAsyncWithHttpInfo (List<string> body);
        /// <summary>
        /// Create a group message channel
        /// </summary>
        /// <remarks>
        /// Create a new group message channel to group of users. If the logged in user&#39;s id is not included in the list, it will be appended to the end. ##### Permissions Must have &#x60;create_group_channel&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User ids to be in the group message channel</param>
        /// <returns>Task of Channel</returns>
        System.Threading.Tasks.Task<Channel> ChannelsGroupPostAsync (List<string> body);

        /// <summary>
        /// Create a group message channel
        /// </summary>
        /// <remarks>
        /// Create a new group message channel to group of users. If the logged in user&#39;s id is not included in the list, it will be appended to the end. ##### Permissions Must have &#x60;create_group_channel&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User ids to be in the group message channel</param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Channel>> ChannelsGroupPostAsyncWithHttpInfo (List<string> body);
        /// <summary>
        /// View channel
        /// </summary>
        /// <remarks>
        /// Perform all the actions involved in viewing a channel. This includes marking channels as read, clearing push notifications, and updating the active channel. ##### Permissions Must be logged in as user or have &#x60;edit_other_users&#x60; permission.  __Response only includes &#x60;last_viewed_at_times&#x60; in Mattermost server 4.3 and newer.__ 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID to perform the view action for</param>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponse2006</returns>
        System.Threading.Tasks.Task<InlineResponse2006> ChannelsMembersUserIdViewPostAsync (string userId, InlineObject39 body);

        /// <summary>
        /// View channel
        /// </summary>
        /// <remarks>
        /// Perform all the actions involved in viewing a channel. This includes marking channels as read, clearing push notifications, and updating the active channel. ##### Permissions Must be logged in as user or have &#x60;edit_other_users&#x60; permission.  __Response only includes &#x60;last_viewed_at_times&#x60; in Mattermost server 4.3 and newer.__ 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID to perform the view action for</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2006>> ChannelsMembersUserIdViewPostAsyncWithHttpInfo (string userId, InlineObject39 body);
        /// <summary>
        /// Create a channel
        /// </summary>
        /// <remarks>
        /// Create a new channel. ##### Permissions If creating a public channel, &#x60;create_public_channel&#x60; permission is required. If creating a private channel, &#x60;create_private_channel&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Channel</returns>
        System.Threading.Tasks.Task<Channel> ChannelsPostAsync (InlineObject31 body);

        /// <summary>
        /// Create a channel
        /// </summary>
        /// <remarks>
        /// Create a new channel. ##### Permissions If creating a public channel, &#x60;create_public_channel&#x60; permission is required. If creating a private channel, &#x60;create_private_channel&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Channel>> ChannelsPostAsyncWithHttpInfo (InlineObject31 body);
        /// <summary>
        /// Search Group Channels
        /// </summary>
        /// <remarks>
        /// Get a list of group channels for a user which members&#39; usernames match the search term.  __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        System.Threading.Tasks.Task<List<Channel>> GroupSearchPostAsync (InlineObject32 body);

        /// <summary>
        /// Search Group Channels
        /// </summary>
        /// <remarks>
        /// Get a list of group channels for a user which members&#39; usernames match the search term.  __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Channel>>> GroupSearchPostAsyncWithHttpInfo (InlineObject32 body);
        /// <summary>
        /// Get a channel by name and team name
        /// </summary>
        /// <remarks>
        /// Gets a channel from the provided team name and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamName">Team Name</param>
        /// <param name="channelName">Channel Name</param>
        /// <param name="includeDeleted">Defines if deleted channels should be returned or not (optional, default to false)</param>
        /// <returns>Task of Channel</returns>
        System.Threading.Tasks.Task<Channel> TeamsNameTeamNameChannelsNameChannelNameGetAsync (string teamName, string channelName, string includeDeleted = null);

        /// <summary>
        /// Get a channel by name and team name
        /// </summary>
        /// <remarks>
        /// Gets a channel from the provided team name and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamName">Team Name</param>
        /// <param name="channelName">Channel Name</param>
        /// <param name="includeDeleted">Defines if deleted channels should be returned or not (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Channel>> TeamsNameTeamNameChannelsNameChannelNameGetAsyncWithHttpInfo (string teamName, string channelName, string includeDeleted = null);
        /// <summary>
        /// Autocomplete channels
        /// </summary>
        /// <remarks>
        /// Autocomplete public channels on a team based on the search term provided in the request URL.  __Minimum server version__: 4.7  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="name">Name or display name</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        System.Threading.Tasks.Task<List<Channel>> TeamsTeamIdChannelsAutocompleteGetAsync (string teamId, string name);

        /// <summary>
        /// Autocomplete channels
        /// </summary>
        /// <remarks>
        /// Autocomplete public channels on a team based on the search term provided in the request URL.  __Minimum server version__: 4.7  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="name">Name or display name</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Channel>>> TeamsTeamIdChannelsAutocompleteGetAsyncWithHttpInfo (string teamId, string name);
        /// <summary>
        /// Get deleted channels
        /// </summary>
        /// <remarks>
        /// Get a page of deleted channels on a team based on query string parameters - team_id, page and per_page.  __Minimum server version__: 3.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of public channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        System.Threading.Tasks.Task<List<Channel>> TeamsTeamIdChannelsDeletedGetAsync (string teamId, string page = null, string perPage = null);

        /// <summary>
        /// Get deleted channels
        /// </summary>
        /// <remarks>
        /// Get a page of deleted channels on a team based on query string parameters - team_id, page and per_page.  __Minimum server version__: 3.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of public channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Channel>>> TeamsTeamIdChannelsDeletedGetAsyncWithHttpInfo (string teamId, string page = null, string perPage = null);
        /// <summary>
        /// Get public channels
        /// </summary>
        /// <remarks>
        /// Get a page of public channels on a team based on query string parameters - page and per_page. ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of public channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        System.Threading.Tasks.Task<List<Channel>> TeamsTeamIdChannelsGetAsync (string teamId, string page = null, string perPage = null);

        /// <summary>
        /// Get public channels
        /// </summary>
        /// <remarks>
        /// Get a page of public channels on a team based on query string parameters - page and per_page. ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of public channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Channel>>> TeamsTeamIdChannelsGetAsyncWithHttpInfo (string teamId, string page = null, string perPage = null);
        /// <summary>
        /// Get a list of channels by ids
        /// </summary>
        /// <remarks>
        /// Get a list of public channels on a team by id. ##### Permissions &#x60;view_team&#x60; for the team the channels are on. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of channel ids</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        System.Threading.Tasks.Task<List<Channel>> TeamsTeamIdChannelsIdsPostAsync (string teamId, List<string> body);

        /// <summary>
        /// Get a list of channels by ids
        /// </summary>
        /// <remarks>
        /// Get a list of public channels on a team by id. ##### Permissions &#x60;view_team&#x60; for the team the channels are on. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of channel ids</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Channel>>> TeamsTeamIdChannelsIdsPostAsyncWithHttpInfo (string teamId, List<string> body);
        /// <summary>
        /// Get a channel by name
        /// </summary>
        /// <remarks>
        /// Gets channel from the provided team id and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="channelName">Channel Name</param>
        /// <param name="includeDeleted">Defines if deleted channels should be returned or not (optional, default to false)</param>
        /// <returns>Task of Channel</returns>
        System.Threading.Tasks.Task<Channel> TeamsTeamIdChannelsNameChannelNameGetAsync (string teamId, string channelName, string includeDeleted = null);

        /// <summary>
        /// Get a channel by name
        /// </summary>
        /// <remarks>
        /// Gets channel from the provided team id and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="channelName">Channel Name</param>
        /// <param name="includeDeleted">Defines if deleted channels should be returned or not (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        System.Threading.Tasks.Task<ApiResponse<Channel>> TeamsTeamIdChannelsNameChannelNameGetAsyncWithHttpInfo (string teamId, string channelName, string includeDeleted = null);
        /// <summary>
        /// Autocomplete channels for search
        /// </summary>
        /// <remarks>
        /// Autocomplete your channels on a team based on the search term provided in the request URL.  __Minimum server version__: 5.4  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="name">Name or display name</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        System.Threading.Tasks.Task<List<Channel>> TeamsTeamIdChannelsSearchAutocompleteGetAsync (string teamId, string name);

        /// <summary>
        /// Autocomplete channels for search
        /// </summary>
        /// <remarks>
        /// Autocomplete your channels on a team based on the search term provided in the request URL.  __Minimum server version__: 5.4  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="name">Name or display name</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Channel>>> TeamsTeamIdChannelsSearchAutocompleteGetAsyncWithHttpInfo (string teamId, string name);
        /// <summary>
        /// Search channels
        /// </summary>
        /// <remarks>
        /// Search public channels on a team based on the search term provided in the request body. ##### Permissions Must have the &#x60;list_team_channels&#x60; permission.  In server version 5.16 and later, a user without the &#x60;list_team_channels&#x60; permission will be able to use this endpoint, with the search results limited to the channels that the user is a member of. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        System.Threading.Tasks.Task<List<Channel>> TeamsTeamIdChannelsSearchPostAsync (string teamId, InlineObject35 body);

        /// <summary>
        /// Search channels
        /// </summary>
        /// <remarks>
        /// Search public channels on a team based on the search term provided in the request body. ##### Permissions Must have the &#x60;list_team_channels&#x60; permission.  In server version 5.16 and later, a user without the &#x60;list_team_channels&#x60; permission will be able to use this endpoint, with the search results limited to the channels that the user is a member of. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Channel>>> TeamsTeamIdChannelsSearchPostAsyncWithHttpInfo (string teamId, InlineObject35 body);
        /// <summary>
        /// Get unread messages
        /// </summary>
        /// <remarks>
        /// Get the total unread messages and mentions for a channel for a user. ##### Permissions Must be logged in as user and have the &#x60;read_channel&#x60; permission, or have &#x60;edit_other_usrs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ChannelUnread</returns>
        System.Threading.Tasks.Task<ChannelUnread> UsersUserIdChannelsChannelIdUnreadGetAsync (string userId, string channelId);

        /// <summary>
        /// Get unread messages
        /// </summary>
        /// <remarks>
        /// Get the total unread messages and mentions for a channel for a user. ##### Permissions Must be logged in as user and have the &#x60;read_channel&#x60; permission, or have &#x60;edit_other_usrs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ApiResponse (ChannelUnread)</returns>
        System.Threading.Tasks.Task<ApiResponse<ChannelUnread>> UsersUserIdChannelsChannelIdUnreadGetAsyncWithHttpInfo (string userId, string channelId);
        /// <summary>
        /// Get channels for user
        /// </summary>
        /// <remarks>
        /// Get all the channels on a team for a user. ##### Permissions Logged in as the user, or have &#x60;edit_other_users&#x60; permission, and &#x60;view_team&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        System.Threading.Tasks.Task<List<Channel>> UsersUserIdTeamsTeamIdChannelsGetAsync (string userId, string teamId);

        /// <summary>
        /// Get channels for user
        /// </summary>
        /// <remarks>
        /// Get all the channels on a team for a user. ##### Permissions Logged in as the user, or have &#x60;edit_other_users&#x60; permission, and &#x60;view_team&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Channel>>> UsersUserIdTeamsTeamIdChannelsGetAsyncWithHttpInfo (string userId, string teamId);
        /// <summary>
        /// Get channel members for user
        /// </summary>
        /// <remarks>
        /// Get all channel members on a team for a user. ##### Permissions Logged in as the user and &#x60;view_team&#x60; permission for the team. Having &#x60;manage_system&#x60; permission voids the previous requirements. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of List&lt;ChannelMember&gt;</returns>
        System.Threading.Tasks.Task<List<ChannelMember>> UsersUserIdTeamsTeamIdChannelsMembersGetAsync (string userId, string teamId);

        /// <summary>
        /// Get channel members for user
        /// </summary>
        /// <remarks>
        /// Get all channel members on a team for a user. ##### Permissions Logged in as the user and &#x60;view_team&#x60; permission for the team. Having &#x60;manage_system&#x60; permission voids the previous requirements. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ChannelMember>>> UsersUserIdTeamsTeamIdChannelsMembersGetAsyncWithHttpInfo (string userId, string teamId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IChannelsApi : IChannelsApiSync, IChannelsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ChannelsApi : IChannelsApi
    {
        private Sdcb.Mattermost.DotNetSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ChannelsApi(String basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Sdcb.Mattermost.DotNetSdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ChannelsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ChannelsApi(Sdcb.Mattermost.DotNetSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ChannelsApi(Sdcb.Mattermost.DotNetSdk.Client.ISynchronousClient client,Sdcb.Mattermost.DotNetSdk.Client.IAsynchronousClient asyncClient, Sdcb.Mattermost.DotNetSdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sdcb.Mattermost.DotNetSdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Convert a channel from public to private Convert into private channel from the provided channel id string.  __Minimum server version__: 4.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Channel</returns>
        public Channel ChannelsChannelIdConvertPost (string channelId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = ChannelsChannelIdConvertPostWithHttpInfo(channelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert a channel from public to private Convert into private channel from the provided channel id string.  __Minimum server version__: 4.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ApiResponse of Channel</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Channel > ChannelsChannelIdConvertPostWithHttpInfo (string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdConvertPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter


            // make the HTTP request

            var response = this.Client.Post< Channel >("/channels/{channel_id}/convert", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdConvertPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Convert a channel from public to private Convert into private channel from the provided channel id string.  __Minimum server version__: 4.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of Channel</returns>
        public async System.Threading.Tasks.Task<Channel> ChannelsChannelIdConvertPostAsync (string channelId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = await ChannelsChannelIdConvertPostAsyncWithHttpInfo(channelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert a channel from public to private Convert into private channel from the provided channel id string.  __Minimum server version__: 4.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel>> ChannelsChannelIdConvertPostAsyncWithHttpInfo (string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdConvertPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Channel>("/channels/{channel_id}/convert", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdConvertPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete a channel Soft deletes a channel, by marking the channel as deleted in the database. Soft deleted channels will not be accessible in the user interface. Direct and group message channels cannot be deleted. ##### Permissions &#x60;delete_public_channel&#x60; permission if the channel is public, &#x60;delete_private_channel&#x60; permission if the channel is private, or have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>StatusOK</returns>
        public StatusOK ChannelsChannelIdDelete (string channelId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = ChannelsChannelIdDeleteWithHttpInfo(channelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a channel Soft deletes a channel, by marking the channel as deleted in the database. Soft deleted channels will not be accessible in the user interface. Direct and group message channels cannot be deleted. ##### Permissions &#x60;delete_public_channel&#x60; permission if the channel is public, &#x60;delete_private_channel&#x60; permission if the channel is private, or have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > ChannelsChannelIdDeleteWithHttpInfo (string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdDelete");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/channels/{channel_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete a channel Soft deletes a channel, by marking the channel as deleted in the database. Soft deleted channels will not be accessible in the user interface. Direct and group message channels cannot be deleted. ##### Permissions &#x60;delete_public_channel&#x60; permission if the channel is public, &#x60;delete_private_channel&#x60; permission if the channel is private, or have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> ChannelsChannelIdDeleteAsync (string channelId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await ChannelsChannelIdDeleteAsyncWithHttpInfo(channelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a channel Soft deletes a channel, by marking the channel as deleted in the database. Soft deleted channels will not be accessible in the user interface. Direct and group message channels cannot be deleted. ##### Permissions &#x60;delete_public_channel&#x60; permission if the channel is public, &#x60;delete_private_channel&#x60; permission if the channel is private, or have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> ChannelsChannelIdDeleteAsyncWithHttpInfo (string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdDelete");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/channels/{channel_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a channel Get channel from the provided channel id string. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Channel</returns>
        public Channel ChannelsChannelIdGet (string channelId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = ChannelsChannelIdGetWithHttpInfo(channelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a channel Get channel from the provided channel id string. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ApiResponse of Channel</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Channel > ChannelsChannelIdGetWithHttpInfo (string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Channel >("/channels/{channel_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a channel Get channel from the provided channel id string. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of Channel</returns>
        public async System.Threading.Tasks.Task<Channel> ChannelsChannelIdGetAsync (string channelId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = await ChannelsChannelIdGetAsyncWithHttpInfo(channelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a channel Get channel from the provided channel id string. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel>> ChannelsChannelIdGetAsyncWithHttpInfo (string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Channel>("/channels/{channel_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get channel members Get a page of members for a channel. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of members per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;ChannelMember&gt;</returns>
        public List<ChannelMember> ChannelsChannelIdMembersGet (string channelId, string page = null, string perPage = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<ChannelMember>> localVarResponse = ChannelsChannelIdMembersGetWithHttpInfo(channelId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get channel members Get a page of members for a channel. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of members per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;ChannelMember&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<ChannelMember> > ChannelsChannelIdMembersGetWithHttpInfo (string channelId, string page = null, string perPage = null)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<ChannelMember> >("/channels/{channel_id}/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get channel members Get a page of members for a channel. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of members per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;ChannelMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChannelMember>> ChannelsChannelIdMembersGetAsync (string channelId, string page = null, string perPage = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<ChannelMember>> localVarResponse = await ChannelsChannelIdMembersGetAsyncWithHttpInfo(channelId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get channel members Get a page of members for a channel. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of members per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelMember&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<ChannelMember>>> ChannelsChannelIdMembersGetAsyncWithHttpInfo (string channelId, string page = null, string perPage = null)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<ChannelMember>>("/channels/{channel_id}/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get channel members by ids Get a list of channel members based on the provided user ids. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userIds">List of user ids</param>
        /// <returns>List&lt;ChannelMember&gt;</returns>
        public List<ChannelMember> ChannelsChannelIdMembersIdsPost (string channelId, List<string> userIds)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<ChannelMember>> localVarResponse = ChannelsChannelIdMembersIdsPostWithHttpInfo(channelId, userIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get channel members by ids Get a list of channel members based on the provided user ids. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userIds">List of user ids</param>
        /// <returns>ApiResponse of List&lt;ChannelMember&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<ChannelMember> > ChannelsChannelIdMembersIdsPostWithHttpInfo (string channelId, List<string> userIds)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersIdsPost");

            // verify the required parameter 'userIds' is set
            if (userIds == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userIds' when calling ChannelsApi->ChannelsChannelIdMembersIdsPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            requestOptions.Data = userIds;


            // make the HTTP request

            var response = this.Client.Post< List<ChannelMember> >("/channels/{channel_id}/members/ids", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersIdsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get channel members by ids Get a list of channel members based on the provided user ids. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userIds">List of user ids</param>
        /// <returns>Task of List&lt;ChannelMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChannelMember>> ChannelsChannelIdMembersIdsPostAsync (string channelId, List<string> userIds)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<ChannelMember>> localVarResponse = await ChannelsChannelIdMembersIdsPostAsyncWithHttpInfo(channelId, userIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get channel members by ids Get a list of channel members based on the provided user ids. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userIds">List of user ids</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelMember&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<ChannelMember>>> ChannelsChannelIdMembersIdsPostAsyncWithHttpInfo (string channelId, List<string> userIds)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersIdsPost");

            // verify the required parameter 'userIds' is set
            if (userIds == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userIds' when calling ChannelsApi->ChannelsChannelIdMembersIdsPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            requestOptions.Data = userIds;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<ChannelMember>>("/channels/{channel_id}/members/ids", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersIdsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Channel members minus group members. Get the set of users who are members of the channel minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given channel.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="groupIds">A comma-separated list of group ids.</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;0&quot;)</param>
        /// <returns></returns>
        public void ChannelsChannelIdMembersMinusGroupMembersGet (string channelId, string groupIds, string page = null, string perPage = null)
        {
             ChannelsChannelIdMembersMinusGroupMembersGetWithHttpInfo(channelId, groupIds, page, perPage);
        }

        /// <summary>
        /// Channel members minus group members. Get the set of users who are members of the channel minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given channel.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="groupIds">A comma-separated list of group ids.</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;0&quot;)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Object> ChannelsChannelIdMembersMinusGroupMembersGetWithHttpInfo (string channelId, string groupIds, string page = null, string perPage = null)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersMinusGroupMembersGet");

            // verify the required parameter 'groupIds' is set
            if (groupIds == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'groupIds' when calling ChannelsApi->ChannelsChannelIdMembersMinusGroupMembersGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (groupIds != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "group_ids", groupIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get<Object>("/channels/{channel_id}/members_minus_group_members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersMinusGroupMembersGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Channel members minus group members. Get the set of users who are members of the channel minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given channel.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="groupIds">A comma-separated list of group ids.</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;0&quot;)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ChannelsChannelIdMembersMinusGroupMembersGetAsync (string channelId, string groupIds, string page = null, string perPage = null)
        {
             await ChannelsChannelIdMembersMinusGroupMembersGetAsyncWithHttpInfo(channelId, groupIds, page, perPage);

        }

        /// <summary>
        /// Channel members minus group members. Get the set of users who are members of the channel minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given channel.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="groupIds">A comma-separated list of group ids.</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;0&quot;)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Object>> ChannelsChannelIdMembersMinusGroupMembersGetAsyncWithHttpInfo (string channelId, string groupIds, string page = null, string perPage = null)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersMinusGroupMembersGet");

            // verify the required parameter 'groupIds' is set
            if (groupIds == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'groupIds' when calling ChannelsApi->ChannelsChannelIdMembersMinusGroupMembersGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (groupIds != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "group_ids", groupIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Object>("/channels/{channel_id}/members_minus_group_members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersMinusGroupMembersGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Add user to channel Add a user to a channel by creating a channel member object.
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The channel ID</param>
        /// <param name="body"></param>
        /// <returns>ChannelMember</returns>
        public ChannelMember ChannelsChannelIdMembersPost (string channelId, InlineObject36 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<ChannelMember> localVarResponse = ChannelsChannelIdMembersPostWithHttpInfo(channelId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add user to channel Add a user to a channel by creating a channel member object.
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The channel ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of ChannelMember</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< ChannelMember > ChannelsChannelIdMembersPostWithHttpInfo (string channelId, InlineObject36 body)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsChannelIdMembersPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< ChannelMember >("/channels/{channel_id}/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Add user to channel Add a user to a channel by creating a channel member object.
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The channel ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ChannelMember</returns>
        public async System.Threading.Tasks.Task<ChannelMember> ChannelsChannelIdMembersPostAsync (string channelId, InlineObject36 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<ChannelMember> localVarResponse = await ChannelsChannelIdMembersPostAsyncWithHttpInfo(channelId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add user to channel Add a user to a channel by creating a channel member object.
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The channel ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (ChannelMember)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<ChannelMember>> ChannelsChannelIdMembersPostAsyncWithHttpInfo (string channelId, InlineObject36 body)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsChannelIdMembersPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<ChannelMember>("/channels/{channel_id}/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Remove user from channel Delete a channel member, effectively removing them from a channel.  In server version 5.3 and later, channel members can only be deleted from public or private channels. ##### Permissions &#x60;manage_public_channel_members&#x60; permission if the channel is public. &#x60;manage_private_channel_members&#x60; permission if the channel is private. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>StatusOK</returns>
        public StatusOK ChannelsChannelIdMembersUserIdDelete (string channelId, string userId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = ChannelsChannelIdMembersUserIdDeleteWithHttpInfo(channelId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove user from channel Delete a channel member, effectively removing them from a channel.  In server version 5.3 and later, channel members can only be deleted from public or private channels. ##### Permissions &#x60;manage_public_channel_members&#x60; permission if the channel is public. &#x60;manage_private_channel_members&#x60; permission if the channel is private. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > ChannelsChannelIdMembersUserIdDeleteWithHttpInfo (string channelId, string userId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdDelete");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdDelete");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/channels/{channel_id}/members/{user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersUserIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Remove user from channel Delete a channel member, effectively removing them from a channel.  In server version 5.3 and later, channel members can only be deleted from public or private channels. ##### Permissions &#x60;manage_public_channel_members&#x60; permission if the channel is public. &#x60;manage_private_channel_members&#x60; permission if the channel is private. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> ChannelsChannelIdMembersUserIdDeleteAsync (string channelId, string userId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await ChannelsChannelIdMembersUserIdDeleteAsyncWithHttpInfo(channelId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove user from channel Delete a channel member, effectively removing them from a channel.  In server version 5.3 and later, channel members can only be deleted from public or private channels. ##### Permissions &#x60;manage_public_channel_members&#x60; permission if the channel is public. &#x60;manage_private_channel_members&#x60; permission if the channel is private. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> ChannelsChannelIdMembersUserIdDeleteAsyncWithHttpInfo (string channelId, string userId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdDelete");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdDelete");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/channels/{channel_id}/members/{user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersUserIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get channel member Get a channel member. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>ChannelMember</returns>
        public ChannelMember ChannelsChannelIdMembersUserIdGet (string channelId, string userId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<ChannelMember> localVarResponse = ChannelsChannelIdMembersUserIdGetWithHttpInfo(channelId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get channel member Get a channel member. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of ChannelMember</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< ChannelMember > ChannelsChannelIdMembersUserIdGetWithHttpInfo (string channelId, string userId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdGet");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< ChannelMember >("/channels/{channel_id}/members/{user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersUserIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get channel member Get a channel member. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ChannelMember</returns>
        public async System.Threading.Tasks.Task<ChannelMember> ChannelsChannelIdMembersUserIdGetAsync (string channelId, string userId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<ChannelMember> localVarResponse = await ChannelsChannelIdMembersUserIdGetAsyncWithHttpInfo(channelId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get channel member Get a channel member. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (ChannelMember)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<ChannelMember>> ChannelsChannelIdMembersUserIdGetAsyncWithHttpInfo (string channelId, string userId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdGet");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChannelMember>("/channels/{channel_id}/members/{user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersUserIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update channel notifications Update a user&#39;s notification properties for a channel. Only the provided fields are updated. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="notifyProps"></param>
        /// <returns>StatusOK</returns>
        public StatusOK ChannelsChannelIdMembersUserIdNotifyPropsPut (string channelId, string userId, ChannelNotifyProps notifyProps)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = ChannelsChannelIdMembersUserIdNotifyPropsPutWithHttpInfo(channelId, userId, notifyProps);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update channel notifications Update a user&#39;s notification properties for a channel. Only the provided fields are updated. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="notifyProps"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > ChannelsChannelIdMembersUserIdNotifyPropsPutWithHttpInfo (string channelId, string userId, ChannelNotifyProps notifyProps)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdNotifyPropsPut");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdNotifyPropsPut");

            // verify the required parameter 'notifyProps' is set
            if (notifyProps == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'notifyProps' when calling ChannelsApi->ChannelsChannelIdMembersUserIdNotifyPropsPut");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = notifyProps;


            // make the HTTP request

            var response = this.Client.Put< StatusOK >("/channels/{channel_id}/members/{user_id}/notify_props", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersUserIdNotifyPropsPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update channel notifications Update a user&#39;s notification properties for a channel. Only the provided fields are updated. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="notifyProps"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> ChannelsChannelIdMembersUserIdNotifyPropsPutAsync (string channelId, string userId, ChannelNotifyProps notifyProps)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await ChannelsChannelIdMembersUserIdNotifyPropsPutAsyncWithHttpInfo(channelId, userId, notifyProps);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update channel notifications Update a user&#39;s notification properties for a channel. Only the provided fields are updated. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="notifyProps"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> ChannelsChannelIdMembersUserIdNotifyPropsPutAsyncWithHttpInfo (string channelId, string userId, ChannelNotifyProps notifyProps)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdNotifyPropsPut");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdNotifyPropsPut");

            // verify the required parameter 'notifyProps' is set
            if (notifyProps == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'notifyProps' when calling ChannelsApi->ChannelsChannelIdMembersUserIdNotifyPropsPut");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = notifyProps;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<StatusOK>("/channels/{channel_id}/members/{user_id}/notify_props", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersUserIdNotifyPropsPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update channel roles Update a user&#39;s roles for a channel. ##### Permissions Must have &#x60;manage_channel_roles&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="roles"></param>
        /// <returns>StatusOK</returns>
        public StatusOK ChannelsChannelIdMembersUserIdRolesPut (string channelId, string userId, InlineObject37 roles)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = ChannelsChannelIdMembersUserIdRolesPutWithHttpInfo(channelId, userId, roles);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update channel roles Update a user&#39;s roles for a channel. ##### Permissions Must have &#x60;manage_channel_roles&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="roles"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > ChannelsChannelIdMembersUserIdRolesPutWithHttpInfo (string channelId, string userId, InlineObject37 roles)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdRolesPut");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdRolesPut");

            // verify the required parameter 'roles' is set
            if (roles == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'roles' when calling ChannelsApi->ChannelsChannelIdMembersUserIdRolesPut");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = roles;


            // make the HTTP request

            var response = this.Client.Put< StatusOK >("/channels/{channel_id}/members/{user_id}/roles", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersUserIdRolesPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update channel roles Update a user&#39;s roles for a channel. ##### Permissions Must have &#x60;manage_channel_roles&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="roles"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> ChannelsChannelIdMembersUserIdRolesPutAsync (string channelId, string userId, InlineObject37 roles)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await ChannelsChannelIdMembersUserIdRolesPutAsyncWithHttpInfo(channelId, userId, roles);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update channel roles Update a user&#39;s roles for a channel. ##### Permissions Must have &#x60;manage_channel_roles&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="roles"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> ChannelsChannelIdMembersUserIdRolesPutAsyncWithHttpInfo (string channelId, string userId, InlineObject37 roles)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdRolesPut");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdRolesPut");

            // verify the required parameter 'roles' is set
            if (roles == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'roles' when calling ChannelsApi->ChannelsChannelIdMembersUserIdRolesPut");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = roles;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<StatusOK>("/channels/{channel_id}/members/{user_id}/roles", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersUserIdRolesPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update the scheme-derived roles of a channel member. Update a channel member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary channel member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a channel admin. __Minimum server version__: 5.0 ##### Permissions Must be authenticated and have the &#x60;manage_channel_roles&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        public StatusOK ChannelsChannelIdMembersUserIdSchemeRolesPut (string channelId, string userId, InlineObject38 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = ChannelsChannelIdMembersUserIdSchemeRolesPutWithHttpInfo(channelId, userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the scheme-derived roles of a channel member. Update a channel member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary channel member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a channel admin. __Minimum server version__: 5.0 ##### Permissions Must be authenticated and have the &#x60;manage_channel_roles&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > ChannelsChannelIdMembersUserIdSchemeRolesPutWithHttpInfo (string channelId, string userId, InlineObject38 body)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdSchemeRolesPut");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdSchemeRolesPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsChannelIdMembersUserIdSchemeRolesPut");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< StatusOK >("/channels/{channel_id}/members/{user_id}/schemeRoles", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersUserIdSchemeRolesPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update the scheme-derived roles of a channel member. Update a channel member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary channel member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a channel admin. __Minimum server version__: 5.0 ##### Permissions Must be authenticated and have the &#x60;manage_channel_roles&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> ChannelsChannelIdMembersUserIdSchemeRolesPutAsync (string channelId, string userId, InlineObject38 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await ChannelsChannelIdMembersUserIdSchemeRolesPutAsyncWithHttpInfo(channelId, userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the scheme-derived roles of a channel member. Update a channel member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary channel member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a channel admin. __Minimum server version__: 5.0 ##### Permissions Must be authenticated and have the &#x60;manage_channel_roles&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> ChannelsChannelIdMembersUserIdSchemeRolesPutAsyncWithHttpInfo (string channelId, string userId, InlineObject38 body)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdSchemeRolesPut");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->ChannelsChannelIdMembersUserIdSchemeRolesPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsChannelIdMembersUserIdSchemeRolesPut");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<StatusOK>("/channels/{channel_id}/members/{user_id}/schemeRoles", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdMembersUserIdSchemeRolesPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Patch a channel Partially update a channel by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>Channel</returns>
        public Channel ChannelsChannelIdPatchPut (string channelId, InlineObject34 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = ChannelsChannelIdPatchPutWithHttpInfo(channelId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch a channel Partially update a channel by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Channel</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Channel > ChannelsChannelIdPatchPutWithHttpInfo (string channelId, InlineObject34 body)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdPatchPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsChannelIdPatchPut");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< Channel >("/channels/{channel_id}/patch", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdPatchPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Patch a channel Partially update a channel by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of Channel</returns>
        public async System.Threading.Tasks.Task<Channel> ChannelsChannelIdPatchPutAsync (string channelId, InlineObject34 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = await ChannelsChannelIdPatchPutAsyncWithHttpInfo(channelId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch a channel Partially update a channel by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel>> ChannelsChannelIdPatchPutAsyncWithHttpInfo (string channelId, InlineObject34 body)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdPatchPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsChannelIdPatchPut");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Channel>("/channels/{channel_id}/patch", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdPatchPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a channel&#39;s pinned posts Get a list of pinned posts for channel.
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>PostList</returns>
        public PostList ChannelsChannelIdPinnedGet (string channelId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<PostList> localVarResponse = ChannelsChannelIdPinnedGetWithHttpInfo(channelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a channel&#39;s pinned posts Get a list of pinned posts for channel.
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ApiResponse of PostList</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< PostList > ChannelsChannelIdPinnedGetWithHttpInfo (string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdPinnedGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< PostList >("/channels/{channel_id}/pinned", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdPinnedGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a channel&#39;s pinned posts Get a list of pinned posts for channel.
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of PostList</returns>
        public async System.Threading.Tasks.Task<PostList> ChannelsChannelIdPinnedGetAsync (string channelId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<PostList> localVarResponse = await ChannelsChannelIdPinnedGetAsyncWithHttpInfo(channelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a channel&#39;s pinned posts Get a list of pinned posts for channel.
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ApiResponse (PostList)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<PostList>> ChannelsChannelIdPinnedGetAsyncWithHttpInfo (string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdPinnedGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PostList>("/channels/{channel_id}/pinned", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdPinnedGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a channel Update a channel. The fields that can be updated are listed as parameters. Omitted fields will be treated as blanks. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>Channel</returns>
        public Channel ChannelsChannelIdPut (string channelId, InlineObject33 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = ChannelsChannelIdPutWithHttpInfo(channelId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a channel Update a channel. The fields that can be updated are listed as parameters. Omitted fields will be treated as blanks. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Channel</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Channel > ChannelsChannelIdPutWithHttpInfo (string channelId, InlineObject33 body)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsChannelIdPut");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< Channel >("/channels/{channel_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a channel Update a channel. The fields that can be updated are listed as parameters. Omitted fields will be treated as blanks. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of Channel</returns>
        public async System.Threading.Tasks.Task<Channel> ChannelsChannelIdPutAsync (string channelId, InlineObject33 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = await ChannelsChannelIdPutAsyncWithHttpInfo(channelId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a channel Update a channel. The fields that can be updated are listed as parameters. Omitted fields will be treated as blanks. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel>> ChannelsChannelIdPutAsyncWithHttpInfo (string channelId, InlineObject33 body)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsChannelIdPut");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Channel>("/channels/{channel_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Restore a channel Restore channel from the provided channel id string.  __Minimum server version__: 3.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Channel</returns>
        public Channel ChannelsChannelIdRestorePost (string channelId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = ChannelsChannelIdRestorePostWithHttpInfo(channelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Restore a channel Restore channel from the provided channel id string.  __Minimum server version__: 3.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ApiResponse of Channel</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Channel > ChannelsChannelIdRestorePostWithHttpInfo (string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdRestorePost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter


            // make the HTTP request

            var response = this.Client.Post< Channel >("/channels/{channel_id}/restore", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdRestorePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Restore a channel Restore channel from the provided channel id string.  __Minimum server version__: 3.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of Channel</returns>
        public async System.Threading.Tasks.Task<Channel> ChannelsChannelIdRestorePostAsync (string channelId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = await ChannelsChannelIdRestorePostAsyncWithHttpInfo(channelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Restore a channel Restore channel from the provided channel id string.  __Minimum server version__: 3.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel>> ChannelsChannelIdRestorePostAsyncWithHttpInfo (string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdRestorePost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Channel>("/channels/{channel_id}/restore", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdRestorePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Set a channel&#39;s scheme Set a channel&#39;s scheme, more specifically sets the scheme_id value of a channel record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        public StatusOK ChannelsChannelIdSchemePut (string channelId, InlineObject40 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = ChannelsChannelIdSchemePutWithHttpInfo(channelId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set a channel&#39;s scheme Set a channel&#39;s scheme, more specifically sets the scheme_id value of a channel record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > ChannelsChannelIdSchemePutWithHttpInfo (string channelId, InlineObject40 body)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdSchemePut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsChannelIdSchemePut");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< StatusOK >("/channels/{channel_id}/scheme", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdSchemePut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Set a channel&#39;s scheme Set a channel&#39;s scheme, more specifically sets the scheme_id value of a channel record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> ChannelsChannelIdSchemePutAsync (string channelId, InlineObject40 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await ChannelsChannelIdSchemePutAsyncWithHttpInfo(channelId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set a channel&#39;s scheme Set a channel&#39;s scheme, more specifically sets the scheme_id value of a channel record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> ChannelsChannelIdSchemePutAsyncWithHttpInfo (string channelId, InlineObject40 body)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdSchemePut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsChannelIdSchemePut");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<StatusOK>("/channels/{channel_id}/scheme", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdSchemePut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get channel statistics Get statistics for a channel. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ChannelStats</returns>
        public ChannelStats ChannelsChannelIdStatsGet (string channelId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<ChannelStats> localVarResponse = ChannelsChannelIdStatsGetWithHttpInfo(channelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get channel statistics Get statistics for a channel. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ApiResponse of ChannelStats</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< ChannelStats > ChannelsChannelIdStatsGetWithHttpInfo (string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdStatsGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< ChannelStats >("/channels/{channel_id}/stats", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdStatsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get channel statistics Get statistics for a channel. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ChannelStats</returns>
        public async System.Threading.Tasks.Task<ChannelStats> ChannelsChannelIdStatsGetAsync (string channelId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<ChannelStats> localVarResponse = await ChannelsChannelIdStatsGetAsyncWithHttpInfo(channelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get channel statistics Get statistics for a channel. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ApiResponse (ChannelStats)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<ChannelStats>> ChannelsChannelIdStatsGetAsyncWithHttpInfo (string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdStatsGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChannelStats>("/channels/{channel_id}/stats", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdStatsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get timezones in a channel Get a list of timezones for the users who are in this channel.  __Minimum server version__: 5.6  ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>List&lt;string&gt;</returns>
        public List<string> ChannelsChannelIdTimezonesGet (string channelId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<string>> localVarResponse = ChannelsChannelIdTimezonesGetWithHttpInfo(channelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get timezones in a channel Get a list of timezones for the users who are in this channel.  __Minimum server version__: 5.6  ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ApiResponse of List&lt;string&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<string> > ChannelsChannelIdTimezonesGetWithHttpInfo (string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdTimezonesGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< List<string> >("/channels/{channel_id}/timezones", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdTimezonesGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get timezones in a channel Get a list of timezones for the users who are in this channel.  __Minimum server version__: 5.6  ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of List&lt;string&gt;</returns>
        public async System.Threading.Tasks.Task<List<string>> ChannelsChannelIdTimezonesGetAsync (string channelId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<string>> localVarResponse = await ChannelsChannelIdTimezonesGetAsyncWithHttpInfo(channelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get timezones in a channel Get a list of timezones for the users who are in this channel.  __Minimum server version__: 5.6  ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ApiResponse (List&lt;string&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<string>>> ChannelsChannelIdTimezonesGetAsyncWithHttpInfo (string channelId)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->ChannelsChannelIdTimezonesGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<string>>("/channels/{channel_id}/timezones", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdTimezonesGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a direct message channel Create a new direct message channel between two users. ##### Permissions Must be one of the two users and have &#x60;create_direct_channel&#x60; permission. Having the &#x60;manage_system&#x60; permission voids the previous requirements. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The two user ids to be in the direct message</param>
        /// <returns>Channel</returns>
        public Channel ChannelsDirectPost (List<string> body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = ChannelsDirectPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a direct message channel Create a new direct message channel between two users. ##### Permissions Must be one of the two users and have &#x60;create_direct_channel&#x60; permission. Having the &#x60;manage_system&#x60; permission voids the previous requirements. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The two user ids to be in the direct message</param>
        /// <returns>ApiResponse of Channel</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Channel > ChannelsDirectPostWithHttpInfo (List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsDirectPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< Channel >("/channels/direct", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsDirectPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a direct message channel Create a new direct message channel between two users. ##### Permissions Must be one of the two users and have &#x60;create_direct_channel&#x60; permission. Having the &#x60;manage_system&#x60; permission voids the previous requirements. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The two user ids to be in the direct message</param>
        /// <returns>Task of Channel</returns>
        public async System.Threading.Tasks.Task<Channel> ChannelsDirectPostAsync (List<string> body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = await ChannelsDirectPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a direct message channel Create a new direct message channel between two users. ##### Permissions Must be one of the two users and have &#x60;create_direct_channel&#x60; permission. Having the &#x60;manage_system&#x60; permission voids the previous requirements. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">The two user ids to be in the direct message</param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel>> ChannelsDirectPostAsyncWithHttpInfo (List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsDirectPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Channel>("/channels/direct", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsDirectPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a group message channel Create a new group message channel to group of users. If the logged in user&#39;s id is not included in the list, it will be appended to the end. ##### Permissions Must have &#x60;create_group_channel&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User ids to be in the group message channel</param>
        /// <returns>Channel</returns>
        public Channel ChannelsGroupPost (List<string> body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = ChannelsGroupPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a group message channel Create a new group message channel to group of users. If the logged in user&#39;s id is not included in the list, it will be appended to the end. ##### Permissions Must have &#x60;create_group_channel&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User ids to be in the group message channel</param>
        /// <returns>ApiResponse of Channel</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Channel > ChannelsGroupPostWithHttpInfo (List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsGroupPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< Channel >("/channels/group", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsGroupPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a group message channel Create a new group message channel to group of users. If the logged in user&#39;s id is not included in the list, it will be appended to the end. ##### Permissions Must have &#x60;create_group_channel&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User ids to be in the group message channel</param>
        /// <returns>Task of Channel</returns>
        public async System.Threading.Tasks.Task<Channel> ChannelsGroupPostAsync (List<string> body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = await ChannelsGroupPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a group message channel Create a new group message channel to group of users. If the logged in user&#39;s id is not included in the list, it will be appended to the end. ##### Permissions Must have &#x60;create_group_channel&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">User ids to be in the group message channel</param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel>> ChannelsGroupPostAsyncWithHttpInfo (List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsGroupPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Channel>("/channels/group", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsGroupPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// View channel Perform all the actions involved in viewing a channel. This includes marking channels as read, clearing push notifications, and updating the active channel. ##### Permissions Must be logged in as user or have &#x60;edit_other_users&#x60; permission.  __Response only includes &#x60;last_viewed_at_times&#x60; in Mattermost server 4.3 and newer.__ 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID to perform the view action for</param>
        /// <param name="body"></param>
        /// <returns>InlineResponse2006</returns>
        public InlineResponse2006 ChannelsMembersUserIdViewPost (string userId, InlineObject39 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse2006> localVarResponse = ChannelsMembersUserIdViewPostWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// View channel Perform all the actions involved in viewing a channel. This includes marking channels as read, clearing push notifications, and updating the active channel. ##### Permissions Must be logged in as user or have &#x60;edit_other_users&#x60; permission.  __Response only includes &#x60;last_viewed_at_times&#x60; in Mattermost server 4.3 and newer.__ 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID to perform the view action for</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2006</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< InlineResponse2006 > ChannelsMembersUserIdViewPostWithHttpInfo (string userId, InlineObject39 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->ChannelsMembersUserIdViewPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsMembersUserIdViewPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< InlineResponse2006 >("/channels/members/{user_id}/view", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsMembersUserIdViewPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// View channel Perform all the actions involved in viewing a channel. This includes marking channels as read, clearing push notifications, and updating the active channel. ##### Permissions Must be logged in as user or have &#x60;edit_other_users&#x60; permission.  __Response only includes &#x60;last_viewed_at_times&#x60; in Mattermost server 4.3 and newer.__ 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID to perform the view action for</param>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponse2006</returns>
        public async System.Threading.Tasks.Task<InlineResponse2006> ChannelsMembersUserIdViewPostAsync (string userId, InlineObject39 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse2006> localVarResponse = await ChannelsMembersUserIdViewPostAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// View channel Perform all the actions involved in viewing a channel. This includes marking channels as read, clearing push notifications, and updating the active channel. ##### Permissions Must be logged in as user or have &#x60;edit_other_users&#x60; permission.  __Response only includes &#x60;last_viewed_at_times&#x60; in Mattermost server 4.3 and newer.__ 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID to perform the view action for</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponse2006)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse2006>> ChannelsMembersUserIdViewPostAsyncWithHttpInfo (string userId, InlineObject39 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->ChannelsMembersUserIdViewPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsMembersUserIdViewPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<InlineResponse2006>("/channels/members/{user_id}/view", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsMembersUserIdViewPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a channel Create a new channel. ##### Permissions If creating a public channel, &#x60;create_public_channel&#x60; permission is required. If creating a private channel, &#x60;create_private_channel&#x60; permission is required. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Channel</returns>
        public Channel ChannelsPost (InlineObject31 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = ChannelsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a channel Create a new channel. ##### Permissions If creating a public channel, &#x60;create_public_channel&#x60; permission is required. If creating a private channel, &#x60;create_private_channel&#x60; permission is required. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Channel</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Channel > ChannelsPostWithHttpInfo (InlineObject31 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< Channel >("/channels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a channel Create a new channel. ##### Permissions If creating a public channel, &#x60;create_public_channel&#x60; permission is required. If creating a private channel, &#x60;create_private_channel&#x60; permission is required. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Channel</returns>
        public async System.Threading.Tasks.Task<Channel> ChannelsPostAsync (InlineObject31 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = await ChannelsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a channel Create a new channel. ##### Permissions If creating a public channel, &#x60;create_public_channel&#x60; permission is required. If creating a private channel, &#x60;create_private_channel&#x60; permission is required. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel>> ChannelsPostAsyncWithHttpInfo (InlineObject31 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->ChannelsPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Channel>("/channels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Search Group Channels Get a list of group channels for a user which members&#39; usernames match the search term.  __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;Channel&gt;</returns>
        public List<Channel> GroupSearchPost (InlineObject32 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>> localVarResponse = GroupSearchPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search Group Channels Get a list of group channels for a user which members&#39; usernames match the search term.  __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Channel> > GroupSearchPostWithHttpInfo (InlineObject32 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->GroupSearchPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< List<Channel> >("/group/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GroupSearchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Search Group Channels Get a list of group channels for a user which members&#39; usernames match the search term.  __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        public async System.Threading.Tasks.Task<List<Channel>> GroupSearchPostAsync (InlineObject32 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>> localVarResponse = await GroupSearchPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search Group Channels Get a list of group channels for a user which members&#39; usernames match the search term.  __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>>> GroupSearchPostAsyncWithHttpInfo (InlineObject32 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->GroupSearchPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<Channel>>("/group/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("GroupSearchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a channel by name and team name Gets a channel from the provided team name and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamName">Team Name</param>
        /// <param name="channelName">Channel Name</param>
        /// <param name="includeDeleted">Defines if deleted channels should be returned or not (optional, default to false)</param>
        /// <returns>Channel</returns>
        public Channel TeamsNameTeamNameChannelsNameChannelNameGet (string teamName, string channelName, string includeDeleted = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = TeamsNameTeamNameChannelsNameChannelNameGetWithHttpInfo(teamName, channelName, includeDeleted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a channel by name and team name Gets a channel from the provided team name and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamName">Team Name</param>
        /// <param name="channelName">Channel Name</param>
        /// <param name="includeDeleted">Defines if deleted channels should be returned or not (optional, default to false)</param>
        /// <returns>ApiResponse of Channel</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Channel > TeamsNameTeamNameChannelsNameChannelNameGetWithHttpInfo (string teamName, string channelName, string includeDeleted = null)
        {
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamName' when calling ChannelsApi->TeamsNameTeamNameChannelsNameChannelNameGet");

            // verify the required parameter 'channelName' is set
            if (channelName == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelName' when calling ChannelsApi->TeamsNameTeamNameChannelsNameChannelNameGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamName != null)
                requestOptions.PathParameters.Add("team_name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamName)); // path parameter
            if (channelName != null)
                requestOptions.PathParameters.Add("channel_name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelName)); // path parameter
            if (includeDeleted != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "include_deleted", includeDeleted))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< Channel >("/teams/name/{team_name}/channels/name/{channel_name}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsNameTeamNameChannelsNameChannelNameGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a channel by name and team name Gets a channel from the provided team name and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamName">Team Name</param>
        /// <param name="channelName">Channel Name</param>
        /// <param name="includeDeleted">Defines if deleted channels should be returned or not (optional, default to false)</param>
        /// <returns>Task of Channel</returns>
        public async System.Threading.Tasks.Task<Channel> TeamsNameTeamNameChannelsNameChannelNameGetAsync (string teamName, string channelName, string includeDeleted = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = await TeamsNameTeamNameChannelsNameChannelNameGetAsyncWithHttpInfo(teamName, channelName, includeDeleted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a channel by name and team name Gets a channel from the provided team name and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamName">Team Name</param>
        /// <param name="channelName">Channel Name</param>
        /// <param name="includeDeleted">Defines if deleted channels should be returned or not (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel>> TeamsNameTeamNameChannelsNameChannelNameGetAsyncWithHttpInfo (string teamName, string channelName, string includeDeleted = null)
        {
            // verify the required parameter 'teamName' is set
            if (teamName == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamName' when calling ChannelsApi->TeamsNameTeamNameChannelsNameChannelNameGet");

            // verify the required parameter 'channelName' is set
            if (channelName == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelName' when calling ChannelsApi->TeamsNameTeamNameChannelsNameChannelNameGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamName != null)
                requestOptions.PathParameters.Add("team_name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamName)); // path parameter
            if (channelName != null)
                requestOptions.PathParameters.Add("channel_name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelName)); // path parameter
            if (includeDeleted != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "include_deleted", includeDeleted))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Channel>("/teams/name/{team_name}/channels/name/{channel_name}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsNameTeamNameChannelsNameChannelNameGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Autocomplete channels Autocomplete public channels on a team based on the search term provided in the request URL.  __Minimum server version__: 4.7  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="name">Name or display name</param>
        /// <returns>List&lt;Channel&gt;</returns>
        public List<Channel> TeamsTeamIdChannelsAutocompleteGet (string teamId, string name)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>> localVarResponse = TeamsTeamIdChannelsAutocompleteGetWithHttpInfo(teamId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Autocomplete channels Autocomplete public channels on a team based on the search term provided in the request URL.  __Minimum server version__: 4.7  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="name">Name or display name</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Channel> > TeamsTeamIdChannelsAutocompleteGetWithHttpInfo (string teamId, string name)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->TeamsTeamIdChannelsAutocompleteGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'name' when calling ChannelsApi->TeamsTeamIdChannelsAutocompleteGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (name != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<Channel> >("/teams/{team_id}/channels/autocomplete", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdChannelsAutocompleteGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Autocomplete channels Autocomplete public channels on a team based on the search term provided in the request URL.  __Minimum server version__: 4.7  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="name">Name or display name</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        public async System.Threading.Tasks.Task<List<Channel>> TeamsTeamIdChannelsAutocompleteGetAsync (string teamId, string name)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>> localVarResponse = await TeamsTeamIdChannelsAutocompleteGetAsyncWithHttpInfo(teamId, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Autocomplete channels Autocomplete public channels on a team based on the search term provided in the request URL.  __Minimum server version__: 4.7  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="name">Name or display name</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>>> TeamsTeamIdChannelsAutocompleteGetAsyncWithHttpInfo (string teamId, string name)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->TeamsTeamIdChannelsAutocompleteGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'name' when calling ChannelsApi->TeamsTeamIdChannelsAutocompleteGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (name != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Channel>>("/teams/{team_id}/channels/autocomplete", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdChannelsAutocompleteGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get deleted channels Get a page of deleted channels on a team based on query string parameters - team_id, page and per_page.  __Minimum server version__: 3.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of public channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Channel&gt;</returns>
        public List<Channel> TeamsTeamIdChannelsDeletedGet (string teamId, string page = null, string perPage = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>> localVarResponse = TeamsTeamIdChannelsDeletedGetWithHttpInfo(teamId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get deleted channels Get a page of deleted channels on a team based on query string parameters - team_id, page and per_page.  __Minimum server version__: 3.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of public channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Channel> > TeamsTeamIdChannelsDeletedGetWithHttpInfo (string teamId, string page = null, string perPage = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->TeamsTeamIdChannelsDeletedGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<Channel> >("/teams/{team_id}/channels/deleted", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdChannelsDeletedGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get deleted channels Get a page of deleted channels on a team based on query string parameters - team_id, page and per_page.  __Minimum server version__: 3.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of public channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        public async System.Threading.Tasks.Task<List<Channel>> TeamsTeamIdChannelsDeletedGetAsync (string teamId, string page = null, string perPage = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>> localVarResponse = await TeamsTeamIdChannelsDeletedGetAsyncWithHttpInfo(teamId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get deleted channels Get a page of deleted channels on a team based on query string parameters - team_id, page and per_page.  __Minimum server version__: 3.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of public channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>>> TeamsTeamIdChannelsDeletedGetAsyncWithHttpInfo (string teamId, string page = null, string perPage = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->TeamsTeamIdChannelsDeletedGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Channel>>("/teams/{team_id}/channels/deleted", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdChannelsDeletedGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get public channels Get a page of public channels on a team based on query string parameters - page and per_page. ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of public channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Channel&gt;</returns>
        public List<Channel> TeamsTeamIdChannelsGet (string teamId, string page = null, string perPage = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>> localVarResponse = TeamsTeamIdChannelsGetWithHttpInfo(teamId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get public channels Get a page of public channels on a team based on query string parameters - page and per_page. ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of public channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Channel> > TeamsTeamIdChannelsGetWithHttpInfo (string teamId, string page = null, string perPage = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->TeamsTeamIdChannelsGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<Channel> >("/teams/{team_id}/channels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdChannelsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get public channels Get a page of public channels on a team based on query string parameters - page and per_page. ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of public channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        public async System.Threading.Tasks.Task<List<Channel>> TeamsTeamIdChannelsGetAsync (string teamId, string page = null, string perPage = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>> localVarResponse = await TeamsTeamIdChannelsGetAsyncWithHttpInfo(teamId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get public channels Get a page of public channels on a team based on query string parameters - page and per_page. ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of public channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>>> TeamsTeamIdChannelsGetAsyncWithHttpInfo (string teamId, string page = null, string perPage = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->TeamsTeamIdChannelsGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Channel>>("/teams/{team_id}/channels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdChannelsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a list of channels by ids Get a list of public channels on a team by id. ##### Permissions &#x60;view_team&#x60; for the team the channels are on. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of channel ids</param>
        /// <returns>List&lt;Channel&gt;</returns>
        public List<Channel> TeamsTeamIdChannelsIdsPost (string teamId, List<string> body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>> localVarResponse = TeamsTeamIdChannelsIdsPostWithHttpInfo(teamId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of channels by ids Get a list of public channels on a team by id. ##### Permissions &#x60;view_team&#x60; for the team the channels are on. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of channel ids</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Channel> > TeamsTeamIdChannelsIdsPostWithHttpInfo (string teamId, List<string> body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->TeamsTeamIdChannelsIdsPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->TeamsTeamIdChannelsIdsPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< List<Channel> >("/teams/{team_id}/channels/ids", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdChannelsIdsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a list of channels by ids Get a list of public channels on a team by id. ##### Permissions &#x60;view_team&#x60; for the team the channels are on. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of channel ids</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        public async System.Threading.Tasks.Task<List<Channel>> TeamsTeamIdChannelsIdsPostAsync (string teamId, List<string> body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>> localVarResponse = await TeamsTeamIdChannelsIdsPostAsyncWithHttpInfo(teamId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of channels by ids Get a list of public channels on a team by id. ##### Permissions &#x60;view_team&#x60; for the team the channels are on. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of channel ids</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>>> TeamsTeamIdChannelsIdsPostAsyncWithHttpInfo (string teamId, List<string> body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->TeamsTeamIdChannelsIdsPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->TeamsTeamIdChannelsIdsPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<Channel>>("/teams/{team_id}/channels/ids", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdChannelsIdsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a channel by name Gets channel from the provided team id and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="channelName">Channel Name</param>
        /// <param name="includeDeleted">Defines if deleted channels should be returned or not (optional, default to false)</param>
        /// <returns>Channel</returns>
        public Channel TeamsTeamIdChannelsNameChannelNameGet (string teamId, string channelName, string includeDeleted = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = TeamsTeamIdChannelsNameChannelNameGetWithHttpInfo(teamId, channelName, includeDeleted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a channel by name Gets channel from the provided team id and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="channelName">Channel Name</param>
        /// <param name="includeDeleted">Defines if deleted channels should be returned or not (optional, default to false)</param>
        /// <returns>ApiResponse of Channel</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Channel > TeamsTeamIdChannelsNameChannelNameGetWithHttpInfo (string teamId, string channelName, string includeDeleted = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->TeamsTeamIdChannelsNameChannelNameGet");

            // verify the required parameter 'channelName' is set
            if (channelName == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelName' when calling ChannelsApi->TeamsTeamIdChannelsNameChannelNameGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (channelName != null)
                requestOptions.PathParameters.Add("channel_name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelName)); // path parameter
            if (includeDeleted != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "include_deleted", includeDeleted))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< Channel >("/teams/{team_id}/channels/name/{channel_name}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdChannelsNameChannelNameGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a channel by name Gets channel from the provided team id and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="channelName">Channel Name</param>
        /// <param name="includeDeleted">Defines if deleted channels should be returned or not (optional, default to false)</param>
        /// <returns>Task of Channel</returns>
        public async System.Threading.Tasks.Task<Channel> TeamsTeamIdChannelsNameChannelNameGetAsync (string teamId, string channelName, string includeDeleted = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel> localVarResponse = await TeamsTeamIdChannelsNameChannelNameGetAsyncWithHttpInfo(teamId, channelName, includeDeleted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a channel by name Gets channel from the provided team id and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="channelName">Channel Name</param>
        /// <param name="includeDeleted">Defines if deleted channels should be returned or not (optional, default to false)</param>
        /// <returns>Task of ApiResponse (Channel)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Channel>> TeamsTeamIdChannelsNameChannelNameGetAsyncWithHttpInfo (string teamId, string channelName, string includeDeleted = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->TeamsTeamIdChannelsNameChannelNameGet");

            // verify the required parameter 'channelName' is set
            if (channelName == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelName' when calling ChannelsApi->TeamsTeamIdChannelsNameChannelNameGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (channelName != null)
                requestOptions.PathParameters.Add("channel_name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelName)); // path parameter
            if (includeDeleted != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "include_deleted", includeDeleted))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Channel>("/teams/{team_id}/channels/name/{channel_name}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdChannelsNameChannelNameGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Autocomplete channels for search Autocomplete your channels on a team based on the search term provided in the request URL.  __Minimum server version__: 5.4  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="name">Name or display name</param>
        /// <returns>List&lt;Channel&gt;</returns>
        public List<Channel> TeamsTeamIdChannelsSearchAutocompleteGet (string teamId, string name)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>> localVarResponse = TeamsTeamIdChannelsSearchAutocompleteGetWithHttpInfo(teamId, name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Autocomplete channels for search Autocomplete your channels on a team based on the search term provided in the request URL.  __Minimum server version__: 5.4  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="name">Name or display name</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Channel> > TeamsTeamIdChannelsSearchAutocompleteGetWithHttpInfo (string teamId, string name)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->TeamsTeamIdChannelsSearchAutocompleteGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'name' when calling ChannelsApi->TeamsTeamIdChannelsSearchAutocompleteGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (name != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<Channel> >("/teams/{team_id}/channels/search_autocomplete", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdChannelsSearchAutocompleteGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Autocomplete channels for search Autocomplete your channels on a team based on the search term provided in the request URL.  __Minimum server version__: 5.4  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="name">Name or display name</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        public async System.Threading.Tasks.Task<List<Channel>> TeamsTeamIdChannelsSearchAutocompleteGetAsync (string teamId, string name)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>> localVarResponse = await TeamsTeamIdChannelsSearchAutocompleteGetAsyncWithHttpInfo(teamId, name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Autocomplete channels for search Autocomplete your channels on a team based on the search term provided in the request URL.  __Minimum server version__: 5.4  ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="name">Name or display name</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>>> TeamsTeamIdChannelsSearchAutocompleteGetAsyncWithHttpInfo (string teamId, string name)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->TeamsTeamIdChannelsSearchAutocompleteGet");

            // verify the required parameter 'name' is set
            if (name == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'name' when calling ChannelsApi->TeamsTeamIdChannelsSearchAutocompleteGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (name != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Channel>>("/teams/{team_id}/channels/search_autocomplete", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdChannelsSearchAutocompleteGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Search channels Search public channels on a team based on the search term provided in the request body. ##### Permissions Must have the &#x60;list_team_channels&#x60; permission.  In server version 5.16 and later, a user without the &#x60;list_team_channels&#x60; permission will be able to use this endpoint, with the search results limited to the channels that the user is a member of. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>List&lt;Channel&gt;</returns>
        public List<Channel> TeamsTeamIdChannelsSearchPost (string teamId, InlineObject35 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>> localVarResponse = TeamsTeamIdChannelsSearchPostWithHttpInfo(teamId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search channels Search public channels on a team based on the search term provided in the request body. ##### Permissions Must have the &#x60;list_team_channels&#x60; permission.  In server version 5.16 and later, a user without the &#x60;list_team_channels&#x60; permission will be able to use this endpoint, with the search results limited to the channels that the user is a member of. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Channel> > TeamsTeamIdChannelsSearchPostWithHttpInfo (string teamId, InlineObject35 body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->TeamsTeamIdChannelsSearchPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->TeamsTeamIdChannelsSearchPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< List<Channel> >("/teams/{team_id}/channels/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdChannelsSearchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Search channels Search public channels on a team based on the search term provided in the request body. ##### Permissions Must have the &#x60;list_team_channels&#x60; permission.  In server version 5.16 and later, a user without the &#x60;list_team_channels&#x60; permission will be able to use this endpoint, with the search results limited to the channels that the user is a member of. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        public async System.Threading.Tasks.Task<List<Channel>> TeamsTeamIdChannelsSearchPostAsync (string teamId, InlineObject35 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>> localVarResponse = await TeamsTeamIdChannelsSearchPostAsyncWithHttpInfo(teamId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search channels Search public channels on a team based on the search term provided in the request body. ##### Permissions Must have the &#x60;list_team_channels&#x60; permission.  In server version 5.16 and later, a user without the &#x60;list_team_channels&#x60; permission will be able to use this endpoint, with the search results limited to the channels that the user is a member of. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>>> TeamsTeamIdChannelsSearchPostAsyncWithHttpInfo (string teamId, InlineObject35 body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->TeamsTeamIdChannelsSearchPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling ChannelsApi->TeamsTeamIdChannelsSearchPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<Channel>>("/teams/{team_id}/channels/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdChannelsSearchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get unread messages Get the total unread messages and mentions for a channel for a user. ##### Permissions Must be logged in as user and have the &#x60;read_channel&#x60; permission, or have &#x60;edit_other_usrs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ChannelUnread</returns>
        public ChannelUnread UsersUserIdChannelsChannelIdUnreadGet (string userId, string channelId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<ChannelUnread> localVarResponse = UsersUserIdChannelsChannelIdUnreadGetWithHttpInfo(userId, channelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get unread messages Get the total unread messages and mentions for a channel for a user. ##### Permissions Must be logged in as user and have the &#x60;read_channel&#x60; permission, or have &#x60;edit_other_usrs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>ApiResponse of ChannelUnread</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< ChannelUnread > UsersUserIdChannelsChannelIdUnreadGetWithHttpInfo (string userId, string channelId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->UsersUserIdChannelsChannelIdUnreadGet");

            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->UsersUserIdChannelsChannelIdUnreadGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< ChannelUnread >("/users/{user_id}/channels/{channel_id}/unread", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdChannelsChannelIdUnreadGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get unread messages Get the total unread messages and mentions for a channel for a user. ##### Permissions Must be logged in as user and have the &#x60;read_channel&#x60; permission, or have &#x60;edit_other_usrs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ChannelUnread</returns>
        public async System.Threading.Tasks.Task<ChannelUnread> UsersUserIdChannelsChannelIdUnreadGetAsync (string userId, string channelId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<ChannelUnread> localVarResponse = await UsersUserIdChannelsChannelIdUnreadGetAsyncWithHttpInfo(userId, channelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get unread messages Get the total unread messages and mentions for a channel for a user. ##### Permissions Must be logged in as user and have the &#x60;read_channel&#x60; permission, or have &#x60;edit_other_usrs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="channelId">Channel GUID</param>
        /// <returns>Task of ApiResponse (ChannelUnread)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<ChannelUnread>> UsersUserIdChannelsChannelIdUnreadGetAsyncWithHttpInfo (string userId, string channelId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->UsersUserIdChannelsChannelIdUnreadGet");

            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling ChannelsApi->UsersUserIdChannelsChannelIdUnreadGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<ChannelUnread>("/users/{user_id}/channels/{channel_id}/unread", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdChannelsChannelIdUnreadGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get channels for user Get all the channels on a team for a user. ##### Permissions Logged in as the user, or have &#x60;edit_other_users&#x60; permission, and &#x60;view_team&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>List&lt;Channel&gt;</returns>
        public List<Channel> UsersUserIdTeamsTeamIdChannelsGet (string userId, string teamId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>> localVarResponse = UsersUserIdTeamsTeamIdChannelsGetWithHttpInfo(userId, teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get channels for user Get all the channels on a team for a user. ##### Permissions Logged in as the user, or have &#x60;edit_other_users&#x60; permission, and &#x60;view_team&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Channel> > UsersUserIdTeamsTeamIdChannelsGetWithHttpInfo (string userId, string teamId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->UsersUserIdTeamsTeamIdChannelsGet");

            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->UsersUserIdTeamsTeamIdChannelsGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< List<Channel> >("/users/{user_id}/teams/{team_id}/channels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTeamsTeamIdChannelsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get channels for user Get all the channels on a team for a user. ##### Permissions Logged in as the user, or have &#x60;edit_other_users&#x60; permission, and &#x60;view_team&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        public async System.Threading.Tasks.Task<List<Channel>> UsersUserIdTeamsTeamIdChannelsGetAsync (string userId, string teamId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>> localVarResponse = await UsersUserIdTeamsTeamIdChannelsGetAsyncWithHttpInfo(userId, teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get channels for user Get all the channels on a team for a user. ##### Permissions Logged in as the user, or have &#x60;edit_other_users&#x60; permission, and &#x60;view_team&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Channel>>> UsersUserIdTeamsTeamIdChannelsGetAsyncWithHttpInfo (string userId, string teamId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->UsersUserIdTeamsTeamIdChannelsGet");

            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->UsersUserIdTeamsTeamIdChannelsGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Channel>>("/users/{user_id}/teams/{team_id}/channels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTeamsTeamIdChannelsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get channel members for user Get all channel members on a team for a user. ##### Permissions Logged in as the user and &#x60;view_team&#x60; permission for the team. Having &#x60;manage_system&#x60; permission voids the previous requirements. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>List&lt;ChannelMember&gt;</returns>
        public List<ChannelMember> UsersUserIdTeamsTeamIdChannelsMembersGet (string userId, string teamId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<ChannelMember>> localVarResponse = UsersUserIdTeamsTeamIdChannelsMembersGetWithHttpInfo(userId, teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get channel members for user Get all channel members on a team for a user. ##### Permissions Logged in as the user and &#x60;view_team&#x60; permission for the team. Having &#x60;manage_system&#x60; permission voids the previous requirements. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of List&lt;ChannelMember&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<ChannelMember> > UsersUserIdTeamsTeamIdChannelsMembersGetWithHttpInfo (string userId, string teamId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->UsersUserIdTeamsTeamIdChannelsMembersGet");

            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->UsersUserIdTeamsTeamIdChannelsMembersGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< List<ChannelMember> >("/users/{user_id}/teams/{team_id}/channels/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTeamsTeamIdChannelsMembersGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get channel members for user Get all channel members on a team for a user. ##### Permissions Logged in as the user and &#x60;view_team&#x60; permission for the team. Having &#x60;manage_system&#x60; permission voids the previous requirements. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of List&lt;ChannelMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<ChannelMember>> UsersUserIdTeamsTeamIdChannelsMembersGetAsync (string userId, string teamId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<ChannelMember>> localVarResponse = await UsersUserIdTeamsTeamIdChannelsMembersGetAsyncWithHttpInfo(userId, teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get channel members for user Get all channel members on a team for a user. ##### Permissions Logged in as the user and &#x60;view_team&#x60; permission for the team. Having &#x60;manage_system&#x60; permission voids the previous requirements. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse (List&lt;ChannelMember&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<ChannelMember>>> UsersUserIdTeamsTeamIdChannelsMembersGetAsyncWithHttpInfo (string userId, string teamId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ChannelsApi->UsersUserIdTeamsTeamIdChannelsMembersGet");

            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling ChannelsApi->UsersUserIdTeamsTeamIdChannelsMembersGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<ChannelMember>>("/users/{user_id}/teams/{team_id}/channels/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTeamsTeamIdChannelsMembersGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
