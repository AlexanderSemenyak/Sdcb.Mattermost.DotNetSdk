/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatusApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get user statuses by id
        /// </summary>
        /// <remarks>
        /// Get a list of user statuses by id from the server. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="post">List of user ids to fetch</param>
        /// <returns>List&lt;Status&gt;</returns>
        List<Status> UsersStatusIdsPost (List<string> post);

        /// <summary>
        /// Get user statuses by id
        /// </summary>
        /// <remarks>
        /// Get a list of user statuses by id from the server. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="post">List of user ids to fetch</param>
        /// <returns>ApiResponse of List&lt;Status&gt;</returns>
        ApiResponse<List<Status>> UsersStatusIdsPostWithHttpInfo (List<string> post);
        /// <summary>
        /// Get user status
        /// </summary>
        /// <remarks>
        /// Get user status by id from the server. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Status</returns>
        Status UsersUserIdStatusGet (string userId);

        /// <summary>
        /// Get user status
        /// </summary>
        /// <remarks>
        /// Get user status by id from the server. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of Status</returns>
        ApiResponse<Status> UsersUserIdStatusGetWithHttpInfo (string userId);
        /// <summary>
        /// Update user status
        /// </summary>
        /// <remarks>
        /// Manually set a user&#39;s status. When setting a user&#39;s status, the status will remain that value until set \&quot;online\&quot; again, which will return the status to being automatically updated based on user activity. ##### Permissions Must have &#x60;edit_other_users&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="body"></param>
        /// <returns>Status</returns>
        Status UsersUserIdStatusPut (string userId, InlineObject22 body);

        /// <summary>
        /// Update user status
        /// </summary>
        /// <remarks>
        /// Manually set a user&#39;s status. When setting a user&#39;s status, the status will remain that value until set \&quot;online\&quot; again, which will return the status to being automatically updated based on user activity. ##### Permissions Must have &#x60;edit_other_users&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Status</returns>
        ApiResponse<Status> UsersUserIdStatusPutWithHttpInfo (string userId, InlineObject22 body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatusApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get user statuses by id
        /// </summary>
        /// <remarks>
        /// Get a list of user statuses by id from the server. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="post">List of user ids to fetch</param>
        /// <returns>Task of List&lt;Status&gt;</returns>
        System.Threading.Tasks.Task<List<Status>> UsersStatusIdsPostAsync (List<string> post);

        /// <summary>
        /// Get user statuses by id
        /// </summary>
        /// <remarks>
        /// Get a list of user statuses by id from the server. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="post">List of user ids to fetch</param>
        /// <returns>Task of ApiResponse (List&lt;Status&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Status>>> UsersStatusIdsPostAsyncWithHttpInfo (List<string> post);
        /// <summary>
        /// Get user status
        /// </summary>
        /// <remarks>
        /// Get user status by id from the server. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Task of Status</returns>
        System.Threading.Tasks.Task<Status> UsersUserIdStatusGetAsync (string userId);

        /// <summary>
        /// Get user status
        /// </summary>
        /// <remarks>
        /// Get user status by id from the server. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Task of ApiResponse (Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<Status>> UsersUserIdStatusGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Update user status
        /// </summary>
        /// <remarks>
        /// Manually set a user&#39;s status. When setting a user&#39;s status, the status will remain that value until set \&quot;online\&quot; again, which will return the status to being automatically updated based on user activity. ##### Permissions Must have &#x60;edit_other_users&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="body"></param>
        /// <returns>Task of Status</returns>
        System.Threading.Tasks.Task<Status> UsersUserIdStatusPutAsync (string userId, InlineObject22 body);

        /// <summary>
        /// Update user status
        /// </summary>
        /// <remarks>
        /// Manually set a user&#39;s status. When setting a user&#39;s status, the status will remain that value until set \&quot;online\&quot; again, which will return the status to being automatically updated based on user activity. ##### Permissions Must have &#x60;edit_other_users&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<Status>> UsersUserIdStatusPutAsyncWithHttpInfo (string userId, InlineObject22 body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStatusApi : IStatusApiSync, IStatusApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StatusApi : IStatusApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StatusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatusApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatusApi"/> class.
        /// </summary>
        /// <returns></returns>
        public StatusApi(string basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StatusApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public StatusApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public StatusApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get user statuses by id Get a list of user statuses by id from the server. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="post">List of user ids to fetch</param>
        /// <returns>List&lt;Status&gt;</returns>
        public List<Status> UsersStatusIdsPost (List<string> post)
        {
            ApiResponse<List<Status>> localVarResponse = UsersStatusIdsPostWithHttpInfo(post);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user statuses by id Get a list of user statuses by id from the server. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="post">List of user ids to fetch</param>
        /// <returns>ApiResponse of List&lt;Status&gt;</returns>
        public ApiResponse<List<Status>> UsersStatusIdsPostWithHttpInfo (List<string> post)
        {
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling StatusApi->UsersStatusIdsPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = post;


            // make the HTTP request

            var response = this.Client.Post< List<Status> >("/users/status/ids", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersStatusIdsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get user statuses by id Get a list of user statuses by id from the server. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="post">List of user ids to fetch</param>
        /// <returns>Task of List&lt;Status&gt;</returns>
        public async System.Threading.Tasks.Task<List<Status>> UsersStatusIdsPostAsync (List<string> post)
        {
            ApiResponse<List<Status>> localVarResponse = await UsersStatusIdsPostAsyncWithHttpInfo(post);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user statuses by id Get a list of user statuses by id from the server. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="post">List of user ids to fetch</param>
        /// <returns>Task of ApiResponse (List&lt;Status&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Status>>> UsersStatusIdsPostAsyncWithHttpInfo (List<string> post)
        {
            // verify the required parameter 'post' is set
            if (post == null)
                throw new ApiException(400, "Missing required parameter 'post' when calling StatusApi->UsersStatusIdsPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = post;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<Status>>("/users/status/ids", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersStatusIdsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get user status Get user status by id from the server. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Status</returns>
        public Status UsersUserIdStatusGet (string userId)
        {
            ApiResponse<Status> localVarResponse = UsersUserIdStatusGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user status Get user status by id from the server. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>ApiResponse of Status</returns>
        public ApiResponse<Status> UsersUserIdStatusGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling StatusApi->UsersUserIdStatusGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Status >("/users/{user_id}/status", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdStatusGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get user status Get user status by id from the server. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Task of Status</returns>
        public async System.Threading.Tasks.Task<Status> UsersUserIdStatusGetAsync (string userId)
        {
            ApiResponse<Status> localVarResponse = await UsersUserIdStatusGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user status Get user status by id from the server. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <returns>Task of ApiResponse (Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Status>> UsersUserIdStatusGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling StatusApi->UsersUserIdStatusGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Status>("/users/{user_id}/status", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdStatusGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update user status Manually set a user&#39;s status. When setting a user&#39;s status, the status will remain that value until set \&quot;online\&quot; again, which will return the status to being automatically updated based on user activity. ##### Permissions Must have &#x60;edit_other_users&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="body"></param>
        /// <returns>Status</returns>
        public Status UsersUserIdStatusPut (string userId, InlineObject22 body)
        {
            ApiResponse<Status> localVarResponse = UsersUserIdStatusPutWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update user status Manually set a user&#39;s status. When setting a user&#39;s status, the status will remain that value until set \&quot;online\&quot; again, which will return the status to being automatically updated based on user activity. ##### Permissions Must have &#x60;edit_other_users&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Status</returns>
        public ApiResponse<Status> UsersUserIdStatusPutWithHttpInfo (string userId, InlineObject22 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling StatusApi->UsersUserIdStatusPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StatusApi->UsersUserIdStatusPut");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< Status >("/users/{user_id}/status", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdStatusPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update user status Manually set a user&#39;s status. When setting a user&#39;s status, the status will remain that value until set \&quot;online\&quot; again, which will return the status to being automatically updated based on user activity. ##### Permissions Must have &#x60;edit_other_users&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="body"></param>
        /// <returns>Task of Status</returns>
        public async System.Threading.Tasks.Task<Status> UsersUserIdStatusPutAsync (string userId, InlineObject22 body)
        {
            ApiResponse<Status> localVarResponse = await UsersUserIdStatusPutAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update user status Manually set a user&#39;s status. When setting a user&#39;s status, the status will remain that value until set \&quot;online\&quot; again, which will return the status to being automatically updated based on user activity. ##### Permissions Must have &#x60;edit_other_users&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Status>> UsersUserIdStatusPutAsyncWithHttpInfo (string userId, InlineObject22 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling StatusApi->UsersUserIdStatusPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling StatusApi->UsersUserIdStatusPut");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Status>("/users/{user_id}/status", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdStatusPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
