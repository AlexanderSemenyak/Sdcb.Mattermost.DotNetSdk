/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get teams
        /// </summary>
        /// <remarks>
        /// For regular users only returns open teams. Users with the \&quot;manage_system\&quot; permission will return teams regardless of type. The result is based on query string parameters - page and per_page. ##### Permissions Must be authenticated. \&quot;manage_system\&quot; permission is required to show all teams. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of teams per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> TeamsGet (string page = null, string perPage = null);

        /// <summary>
        /// Get teams
        /// </summary>
        /// <remarks>
        /// For regular users only returns open teams. Users with the \&quot;manage_system\&quot; permission will return teams regardless of type. The result is based on query string parameters - page and per_page. ##### Permissions Must be authenticated. \&quot;manage_system\&quot; permission is required to show all teams. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of teams per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> TeamsGetWithHttpInfo (string page = null, string perPage = null);
        /// <summary>
        /// Get invite info for a team
        /// </summary>
        /// <remarks>
        /// Get the &#x60;name&#x60;, &#x60;display_name&#x60;, &#x60;description&#x60; and &#x60;id&#x60; for a team from the invite id.  __Minimum server version__: 4.0  ##### Permissions No authentication required. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteId">Invite id for a team</param>
        /// <returns>InlineResponse2005</returns>
        InlineResponse2005 TeamsInviteInviteIdGet (string inviteId);

        /// <summary>
        /// Get invite info for a team
        /// </summary>
        /// <remarks>
        /// Get the &#x60;name&#x60;, &#x60;display_name&#x60;, &#x60;description&#x60; and &#x60;id&#x60; for a team from the invite id.  __Minimum server version__: 4.0  ##### Permissions No authentication required. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteId">Invite id for a team</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        ApiResponse<InlineResponse2005> TeamsInviteInviteIdGetWithHttpInfo (string inviteId);
        /// <summary>
        /// Invalidate active email invitations
        /// </summary>
        /// <remarks>
        /// Invalidate active email invitations that have not been accepted by the user. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StatusOK</returns>
        StatusOK TeamsInvitesEmailDelete ();

        /// <summary>
        /// Invalidate active email invitations
        /// </summary>
        /// <remarks>
        /// Invalidate active email invitations that have not been accepted by the user. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> TeamsInvitesEmailDeleteWithHttpInfo ();
        /// <summary>
        /// Add user to team from invite
        /// </summary>
        /// <remarks>
        /// Using either an invite id or hash/data pair from an email invite link, add a user to a team. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token id from the invitation</param>
        /// <returns>TeamMember</returns>
        TeamMember TeamsMembersInvitePost (string token);

        /// <summary>
        /// Add user to team from invite
        /// </summary>
        /// <remarks>
        /// Using either an invite id or hash/data pair from an email invite link, add a user to a team. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token id from the invitation</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> TeamsMembersInvitePostWithHttpInfo (string token);
        /// <summary>
        /// Check if team exists
        /// </summary>
        /// <remarks>
        /// Check if the team exists based on a team name. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team Name</param>
        /// <returns>TeamExists</returns>
        TeamExists TeamsNameNameExistsGet (string name);

        /// <summary>
        /// Check if team exists
        /// </summary>
        /// <remarks>
        /// Check if the team exists based on a team name. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team Name</param>
        /// <returns>ApiResponse of TeamExists</returns>
        ApiResponse<TeamExists> TeamsNameNameExistsGetWithHttpInfo (string name);
        /// <summary>
        /// Get a team by name
        /// </summary>
        /// <remarks>
        /// Get a team based on provided name string ##### Permissions Must be authenticated, team type is open and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team Name</param>
        /// <returns>Team</returns>
        Team TeamsNameNameGet (string name);

        /// <summary>
        /// Get a team by name
        /// </summary>
        /// <remarks>
        /// Get a team based on provided name string ##### Permissions Must be authenticated, team type is open and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team Name</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> TeamsNameNameGetWithHttpInfo (string name);
        /// <summary>
        /// Create a team
        /// </summary>
        /// <remarks>
        /// Create a new team on the system. ##### Permissions Must be authenticated and have the &#x60;create_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        Team TeamsPost (InlineObject23 body);

        /// <summary>
        /// Create a team
        /// </summary>
        /// <remarks>
        /// Create a new team on the system. ##### Permissions Must be authenticated and have the &#x60;create_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> TeamsPostWithHttpInfo (InlineObject23 body);
        /// <summary>
        /// Search teams
        /// </summary>
        /// <remarks>
        /// Search teams based on search term provided in the request body. ##### Permissions Logged in user only shows open teams Logged in user with \&quot;manage_system\&quot; permission shows all teams 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> TeamsSearchPost (InlineObject26 body);

        /// <summary>
        /// Search teams
        /// </summary>
        /// <remarks>
        /// Search teams based on search term provided in the request body. ##### Permissions Logged in user only shows open teams Logged in user with \&quot;manage_system\&quot; permission shows all teams 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> TeamsSearchPostWithHttpInfo (InlineObject26 body);
        /// <summary>
        /// Delete a team
        /// </summary>
        /// <remarks>
        /// Soft deletes a team, by marking the team as deleted in the database. Soft deleted teams will not be accessible in the user interface.  Optionally use the permanent query parameter to hard delete the team for compliance reasons. As of server version 5.0, to use this feature &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="permanent">Permanently delete the team, to be used for compliance reasons only. As of server version 5.0, &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. (optional, default to false)</param>
        /// <returns>StatusOK</returns>
        StatusOK TeamsTeamIdDelete (string teamId, bool? permanent = null);

        /// <summary>
        /// Delete a team
        /// </summary>
        /// <remarks>
        /// Soft deletes a team, by marking the team as deleted in the database. Soft deleted teams will not be accessible in the user interface.  Optionally use the permanent query parameter to hard delete the team for compliance reasons. As of server version 5.0, to use this feature &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="permanent">Permanently delete the team, to be used for compliance reasons only. As of server version 5.0, &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. (optional, default to false)</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> TeamsTeamIdDeleteWithHttpInfo (string teamId, bool? permanent = null);
        /// <summary>
        /// Get a team
        /// </summary>
        /// <remarks>
        /// Get a team on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Team</returns>
        Team TeamsTeamIdGet (string teamId);

        /// <summary>
        /// Get a team
        /// </summary>
        /// <remarks>
        /// Get a team on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> TeamsTeamIdGetWithHttpInfo (string teamId);
        /// <summary>
        /// Remove the team icon
        /// </summary>
        /// <remarks>
        /// Remove the team icon for the team.  __Minimum server version__: 4.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>StatusOK</returns>
        StatusOK TeamsTeamIdImageDelete (string teamId);

        /// <summary>
        /// Remove the team icon
        /// </summary>
        /// <remarks>
        /// Remove the team icon for the team.  __Minimum server version__: 4.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> TeamsTeamIdImageDeleteWithHttpInfo (string teamId);
        /// <summary>
        /// Get the team icon
        /// </summary>
        /// <remarks>
        /// Get the team icon of the team.  __Minimum server version__: 4.9  ##### Permissions User must be authenticated. In addition, team must be open or the user must have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns></returns>
        void TeamsTeamIdImageGet (string teamId);

        /// <summary>
        /// Get the team icon
        /// </summary>
        /// <remarks>
        /// Get the team icon of the team.  __Minimum server version__: 4.9  ##### Permissions User must be authenticated. In addition, team must be open or the user must have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamsTeamIdImageGetWithHttpInfo (string teamId);
        /// <summary>
        /// Sets the team icon
        /// </summary>
        /// <remarks>
        /// Sets the team icon for the team.  __Minimum server version__: 4.9  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="image">The image to be uploaded</param>
        /// <returns>StatusOK</returns>
        StatusOK TeamsTeamIdImagePost (string teamId, System.IO.Stream image);

        /// <summary>
        /// Sets the team icon
        /// </summary>
        /// <remarks>
        /// Sets the team icon for the team.  __Minimum server version__: 4.9  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="image">The image to be uploaded</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> TeamsTeamIdImagePostWithHttpInfo (string teamId, System.IO.Stream image);
        /// <summary>
        /// Import a Team from other application
        /// </summary>
        /// <remarks>
        /// Import a team into a existing team. Import users, channels, posts, hooks. ##### Permissions Must have &#x60;permission_import_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="file">A file to be uploaded in zip format.</param>
        /// <param name="filesize">The size of the zip file to be imported.</param>
        /// <param name="importFrom">String that defines from which application the team was exported to be imported into Mattermost.</param>
        /// <returns>InlineResponse2004</returns>
        InlineResponse2004 TeamsTeamIdImportPost (string teamId, System.IO.Stream file, int filesize, string importFrom);

        /// <summary>
        /// Import a Team from other application
        /// </summary>
        /// <remarks>
        /// Import a team into a existing team. Import users, channels, posts, hooks. ##### Permissions Must have &#x60;permission_import_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="file">A file to be uploaded in zip format.</param>
        /// <param name="filesize">The size of the zip file to be imported.</param>
        /// <param name="importFrom">String that defines from which application the team was exported to be imported into Mattermost.</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        ApiResponse<InlineResponse2004> TeamsTeamIdImportPostWithHttpInfo (string teamId, System.IO.Stream file, int filesize, string importFrom);
        /// <summary>
        /// Invite users to the team by email
        /// </summary>
        /// <remarks>
        /// Invite users to the existing team usign the user&#39;s email. ##### Permissions Must have &#x60;invite_to_team&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of user&#39;s email</param>
        /// <returns>StatusOK</returns>
        StatusOK TeamsTeamIdInviteEmailPost (string teamId, List<string> body);

        /// <summary>
        /// Invite users to the team by email
        /// </summary>
        /// <remarks>
        /// Invite users to the existing team usign the user&#39;s email. ##### Permissions Must have &#x60;invite_to_team&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of user&#39;s email</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> TeamsTeamIdInviteEmailPostWithHttpInfo (string teamId, List<string> body);
        /// <summary>
        /// Add multiple users to team
        /// </summary>
        /// <remarks>
        /// Add a number of users to the team by user_id. ##### Permissions Must be authenticated. Authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        List<TeamMember> TeamsTeamIdMembersBatchPost (string teamId, List<TeamMember> body);

        /// <summary>
        /// Add multiple users to team
        /// </summary>
        /// <remarks>
        /// Add a number of users to the team by user_id. ##### Permissions Must be authenticated. Authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        ApiResponse<List<TeamMember>> TeamsTeamIdMembersBatchPostWithHttpInfo (string teamId, List<TeamMember> body);
        /// <summary>
        /// Get team members
        /// </summary>
        /// <remarks>
        /// Get a page team members list based on query string parameters - team id, page and per page. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        List<TeamMember> TeamsTeamIdMembersGet (string teamId, string page = null, string perPage = null);

        /// <summary>
        /// Get team members
        /// </summary>
        /// <remarks>
        /// Get a page team members list based on query string parameters - team id, page and per page. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        ApiResponse<List<TeamMember>> TeamsTeamIdMembersGetWithHttpInfo (string teamId, string page = null, string perPage = null);
        /// <summary>
        /// Get team members by ids
        /// </summary>
        /// <remarks>
        /// Get a list of team members based on a provided array of user ids. ##### Permissions Must have &#x60;view_team&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of user ids</param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        List<TeamMember> TeamsTeamIdMembersIdsPost (string teamId, List<string> body);

        /// <summary>
        /// Get team members by ids
        /// </summary>
        /// <remarks>
        /// Get a list of team members based on a provided array of user ids. ##### Permissions Must have &#x60;view_team&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of user ids</param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        ApiResponse<List<TeamMember>> TeamsTeamIdMembersIdsPostWithHttpInfo (string teamId, List<string> body);
        /// <summary>
        /// Team members minus group members.
        /// </summary>
        /// <remarks>
        /// Get the set of users who are members of the team minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given team.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="groupIds">A comma-separated list of group ids.</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;0&quot;)</param>
        /// <returns></returns>
        void TeamsTeamIdMembersMinusGroupMembersGet (string teamId, string groupIds, string page = null, string perPage = null);

        /// <summary>
        /// Team members minus group members.
        /// </summary>
        /// <remarks>
        /// Get the set of users who are members of the team minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given team.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="groupIds">A comma-separated list of group ids.</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;0&quot;)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> TeamsTeamIdMembersMinusGroupMembersGetWithHttpInfo (string teamId, string groupIds, string page = null, string perPage = null);
        /// <summary>
        /// Add user to team
        /// </summary>
        /// <remarks>
        /// Add user to the team by user_id. ##### Permissions Must be authenticated and team be open to add self. For adding another user, authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>TeamMember</returns>
        TeamMember TeamsTeamIdMembersPost (string teamId, InlineObject27 body);

        /// <summary>
        /// Add user to team
        /// </summary>
        /// <remarks>
        /// Add user to the team by user_id. ##### Permissions Must be authenticated and team be open to add self. For adding another user, authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> TeamsTeamIdMembersPostWithHttpInfo (string teamId, InlineObject27 body);
        /// <summary>
        /// Remove user from team
        /// </summary>
        /// <remarks>
        /// Delete the team member object for a user, effectively removing them from a team. ##### Permissions Must be logged in as the user or have the &#x60;remove_user_from_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>StatusOK</returns>
        StatusOK TeamsTeamIdMembersUserIdDelete (string teamId, string userId);

        /// <summary>
        /// Remove user from team
        /// </summary>
        /// <remarks>
        /// Delete the team member object for a user, effectively removing them from a team. ##### Permissions Must be logged in as the user or have the &#x60;remove_user_from_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> TeamsTeamIdMembersUserIdDeleteWithHttpInfo (string teamId, string userId);
        /// <summary>
        /// Get a team member
        /// </summary>
        /// <remarks>
        /// Get a team member on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>TeamMember</returns>
        TeamMember TeamsTeamIdMembersUserIdGet (string teamId, string userId);

        /// <summary>
        /// Get a team member
        /// </summary>
        /// <remarks>
        /// Get a team member on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of TeamMember</returns>
        ApiResponse<TeamMember> TeamsTeamIdMembersUserIdGetWithHttpInfo (string teamId, string userId);
        /// <summary>
        /// Update a team member roles
        /// </summary>
        /// <remarks>
        /// Update a team member roles. Valid team roles are \&quot;team_user\&quot;, \&quot;team_admin\&quot; or both of them. Overwrites any previously assigned team roles. ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        StatusOK TeamsTeamIdMembersUserIdRolesPut (string teamId, string userId, InlineObject28 body);

        /// <summary>
        /// Update a team member roles
        /// </summary>
        /// <remarks>
        /// Update a team member roles. Valid team roles are \&quot;team_user\&quot;, \&quot;team_admin\&quot; or both of them. Overwrites any previously assigned team roles. ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> TeamsTeamIdMembersUserIdRolesPutWithHttpInfo (string teamId, string userId, InlineObject28 body);
        /// <summary>
        /// Update the scheme-derived roles of a team member.
        /// </summary>
        /// <remarks>
        /// Update a team member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary team member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a team admin.  __Minimum server version__: 5.0  ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        StatusOK TeamsTeamIdMembersUserIdSchemeRolesPut (string teamId, string userId, InlineObject29 body);

        /// <summary>
        /// Update the scheme-derived roles of a team member.
        /// </summary>
        /// <remarks>
        /// Update a team member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary team member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a team admin.  __Minimum server version__: 5.0  ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> TeamsTeamIdMembersUserIdSchemeRolesPutWithHttpInfo (string teamId, string userId, InlineObject29 body);
        /// <summary>
        /// Patch a team
        /// </summary>
        /// <remarks>
        /// Partially update a team by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        Team TeamsTeamIdPatchPut (string teamId, InlineObject25 body);

        /// <summary>
        /// Patch a team
        /// </summary>
        /// <remarks>
        /// Partially update a team by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> TeamsTeamIdPatchPutWithHttpInfo (string teamId, InlineObject25 body);
        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Update a team by providing the team object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        Team TeamsTeamIdPut (string teamId, InlineObject24 body);

        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Update a team by providing the team object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> TeamsTeamIdPutWithHttpInfo (string teamId, InlineObject24 body);
        /// <summary>
        /// Regenerate the Invite ID from a Team
        /// </summary>
        /// <remarks>
        /// Regenerates the invite ID used in invite links of a team ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Team</returns>
        Team TeamsTeamIdRegenerateInviteIdPost (string teamId);

        /// <summary>
        /// Regenerate the Invite ID from a Team
        /// </summary>
        /// <remarks>
        /// Regenerates the invite ID used in invite links of a team ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of Team</returns>
        ApiResponse<Team> TeamsTeamIdRegenerateInviteIdPostWithHttpInfo (string teamId);
        /// <summary>
        /// Set a team&#39;s scheme
        /// </summary>
        /// <remarks>
        /// Set a team&#39;s scheme, more specifically sets the scheme_id value of a team record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        StatusOK TeamsTeamIdSchemePut (string teamId, InlineObject30 body);

        /// <summary>
        /// Set a team&#39;s scheme
        /// </summary>
        /// <remarks>
        /// Set a team&#39;s scheme, more specifically sets the scheme_id value of a team record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> TeamsTeamIdSchemePutWithHttpInfo (string teamId, InlineObject30 body);
        /// <summary>
        /// Get a team stats
        /// </summary>
        /// <remarks>
        /// Get a team stats on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>TeamStats</returns>
        TeamStats TeamsTeamIdStatsGet (string teamId);

        /// <summary>
        /// Get a team stats
        /// </summary>
        /// <remarks>
        /// Get a team stats on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of TeamStats</returns>
        ApiResponse<TeamStats> TeamsTeamIdStatsGetWithHttpInfo (string teamId);
        /// <summary>
        /// Get a user&#39;s teams
        /// </summary>
        /// <remarks>
        /// Get a list of teams that a user is on. ##### Permissions Must be authenticated as the user or have the &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> UsersUserIdTeamsGet (string userId);

        /// <summary>
        /// Get a user&#39;s teams
        /// </summary>
        /// <remarks>
        /// Get a list of teams that a user is on. ##### Permissions Must be authenticated as the user or have the &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> UsersUserIdTeamsGetWithHttpInfo (string userId);
        /// <summary>
        /// Get team members for a user
        /// </summary>
        /// <remarks>
        /// Get a list of team members for a user. Useful for getting the ids of teams the user is on and the roles they have in those teams. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        List<TeamMember> UsersUserIdTeamsMembersGet (string userId);

        /// <summary>
        /// Get team members for a user
        /// </summary>
        /// <remarks>
        /// Get a list of team members for a user. Useful for getting the ids of teams the user is on and the roles they have in those teams. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        ApiResponse<List<TeamMember>> UsersUserIdTeamsMembersGetWithHttpInfo (string userId);
        /// <summary>
        /// Get unreads for a team
        /// </summary>
        /// <remarks>
        /// Get the unread mention and message counts for a team for the specified user. ##### Permissions Must be the user or have &#x60;edit_other_users&#x60; permission and have &#x60;view_team&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>TeamUnread</returns>
        TeamUnread UsersUserIdTeamsTeamIdUnreadGet (string userId, string teamId);

        /// <summary>
        /// Get unreads for a team
        /// </summary>
        /// <remarks>
        /// Get the unread mention and message counts for a team for the specified user. ##### Permissions Must be the user or have &#x60;edit_other_users&#x60; permission and have &#x60;view_team&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of TeamUnread</returns>
        ApiResponse<TeamUnread> UsersUserIdTeamsTeamIdUnreadGetWithHttpInfo (string userId, string teamId);
        /// <summary>
        /// Get team unreads for a user
        /// </summary>
        /// <remarks>
        /// Get the count for unread messages and mentions in the teams the user is a member of. ##### Permissions Must be logged in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="excludeTeam">Optional team id to be excluded from the results</param>
        /// <returns>List&lt;TeamUnread&gt;</returns>
        List<TeamUnread> UsersUserIdTeamsUnreadGet (string userId, string excludeTeam);

        /// <summary>
        /// Get team unreads for a user
        /// </summary>
        /// <remarks>
        /// Get the count for unread messages and mentions in the teams the user is a member of. ##### Permissions Must be logged in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="excludeTeam">Optional team id to be excluded from the results</param>
        /// <returns>ApiResponse of List&lt;TeamUnread&gt;</returns>
        ApiResponse<List<TeamUnread>> UsersUserIdTeamsUnreadGetWithHttpInfo (string userId, string excludeTeam);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get teams
        /// </summary>
        /// <remarks>
        /// For regular users only returns open teams. Users with the \&quot;manage_system\&quot; permission will return teams regardless of type. The result is based on query string parameters - page and per_page. ##### Permissions Must be authenticated. \&quot;manage_system\&quot; permission is required to show all teams. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of teams per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> TeamsGetAsync (string page = null, string perPage = null);

        /// <summary>
        /// Get teams
        /// </summary>
        /// <remarks>
        /// For regular users only returns open teams. Users with the \&quot;manage_system\&quot; permission will return teams regardless of type. The result is based on query string parameters - page and per_page. ##### Permissions Must be authenticated. \&quot;manage_system\&quot; permission is required to show all teams. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of teams per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> TeamsGetAsyncWithHttpInfo (string page = null, string perPage = null);
        /// <summary>
        /// Get invite info for a team
        /// </summary>
        /// <remarks>
        /// Get the &#x60;name&#x60;, &#x60;display_name&#x60;, &#x60;description&#x60; and &#x60;id&#x60; for a team from the invite id.  __Minimum server version__: 4.0  ##### Permissions No authentication required. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteId">Invite id for a team</param>
        /// <returns>Task of InlineResponse2005</returns>
        System.Threading.Tasks.Task<InlineResponse2005> TeamsInviteInviteIdGetAsync (string inviteId);

        /// <summary>
        /// Get invite info for a team
        /// </summary>
        /// <remarks>
        /// Get the &#x60;name&#x60;, &#x60;display_name&#x60;, &#x60;description&#x60; and &#x60;id&#x60; for a team from the invite id.  __Minimum server version__: 4.0  ##### Permissions No authentication required. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteId">Invite id for a team</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2005>> TeamsInviteInviteIdGetAsyncWithHttpInfo (string inviteId);
        /// <summary>
        /// Invalidate active email invitations
        /// </summary>
        /// <remarks>
        /// Invalidate active email invitations that have not been accepted by the user. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> TeamsInvitesEmailDeleteAsync ();

        /// <summary>
        /// Invalidate active email invitations
        /// </summary>
        /// <remarks>
        /// Invalidate active email invitations that have not been accepted by the user. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> TeamsInvitesEmailDeleteAsyncWithHttpInfo ();
        /// <summary>
        /// Add user to team from invite
        /// </summary>
        /// <remarks>
        /// Using either an invite id or hash/data pair from an email invite link, add a user to a team. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token id from the invitation</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> TeamsMembersInvitePostAsync (string token);

        /// <summary>
        /// Add user to team from invite
        /// </summary>
        /// <remarks>
        /// Using either an invite id or hash/data pair from an email invite link, add a user to a team. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token id from the invitation</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> TeamsMembersInvitePostAsyncWithHttpInfo (string token);
        /// <summary>
        /// Check if team exists
        /// </summary>
        /// <remarks>
        /// Check if the team exists based on a team name. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team Name</param>
        /// <returns>Task of TeamExists</returns>
        System.Threading.Tasks.Task<TeamExists> TeamsNameNameExistsGetAsync (string name);

        /// <summary>
        /// Check if team exists
        /// </summary>
        /// <remarks>
        /// Check if the team exists based on a team name. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team Name</param>
        /// <returns>Task of ApiResponse (TeamExists)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamExists>> TeamsNameNameExistsGetAsyncWithHttpInfo (string name);
        /// <summary>
        /// Get a team by name
        /// </summary>
        /// <remarks>
        /// Get a team based on provided name string ##### Permissions Must be authenticated, team type is open and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team Name</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> TeamsNameNameGetAsync (string name);

        /// <summary>
        /// Get a team by name
        /// </summary>
        /// <remarks>
        /// Get a team based on provided name string ##### Permissions Must be authenticated, team type is open and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team Name</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> TeamsNameNameGetAsyncWithHttpInfo (string name);
        /// <summary>
        /// Create a team
        /// </summary>
        /// <remarks>
        /// Create a new team on the system. ##### Permissions Must be authenticated and have the &#x60;create_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> TeamsPostAsync (InlineObject23 body);

        /// <summary>
        /// Create a team
        /// </summary>
        /// <remarks>
        /// Create a new team on the system. ##### Permissions Must be authenticated and have the &#x60;create_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> TeamsPostAsyncWithHttpInfo (InlineObject23 body);
        /// <summary>
        /// Search teams
        /// </summary>
        /// <remarks>
        /// Search teams based on search term provided in the request body. ##### Permissions Logged in user only shows open teams Logged in user with \&quot;manage_system\&quot; permission shows all teams 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> TeamsSearchPostAsync (InlineObject26 body);

        /// <summary>
        /// Search teams
        /// </summary>
        /// <remarks>
        /// Search teams based on search term provided in the request body. ##### Permissions Logged in user only shows open teams Logged in user with \&quot;manage_system\&quot; permission shows all teams 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> TeamsSearchPostAsyncWithHttpInfo (InlineObject26 body);
        /// <summary>
        /// Delete a team
        /// </summary>
        /// <remarks>
        /// Soft deletes a team, by marking the team as deleted in the database. Soft deleted teams will not be accessible in the user interface.  Optionally use the permanent query parameter to hard delete the team for compliance reasons. As of server version 5.0, to use this feature &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="permanent">Permanently delete the team, to be used for compliance reasons only. As of server version 5.0, &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. (optional, default to false)</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> TeamsTeamIdDeleteAsync (string teamId, bool? permanent = null);

        /// <summary>
        /// Delete a team
        /// </summary>
        /// <remarks>
        /// Soft deletes a team, by marking the team as deleted in the database. Soft deleted teams will not be accessible in the user interface.  Optionally use the permanent query parameter to hard delete the team for compliance reasons. As of server version 5.0, to use this feature &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="permanent">Permanently delete the team, to be used for compliance reasons only. As of server version 5.0, &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> TeamsTeamIdDeleteAsyncWithHttpInfo (string teamId, bool? permanent = null);
        /// <summary>
        /// Get a team
        /// </summary>
        /// <remarks>
        /// Get a team on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> TeamsTeamIdGetAsync (string teamId);

        /// <summary>
        /// Get a team
        /// </summary>
        /// <remarks>
        /// Get a team on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> TeamsTeamIdGetAsyncWithHttpInfo (string teamId);
        /// <summary>
        /// Remove the team icon
        /// </summary>
        /// <remarks>
        /// Remove the team icon for the team.  __Minimum server version__: 4.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> TeamsTeamIdImageDeleteAsync (string teamId);

        /// <summary>
        /// Remove the team icon
        /// </summary>
        /// <remarks>
        /// Remove the team icon for the team.  __Minimum server version__: 4.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> TeamsTeamIdImageDeleteAsyncWithHttpInfo (string teamId);
        /// <summary>
        /// Get the team icon
        /// </summary>
        /// <remarks>
        /// Get the team icon of the team.  __Minimum server version__: 4.9  ##### Permissions User must be authenticated. In addition, team must be open or the user must have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamsTeamIdImageGetAsync (string teamId);

        /// <summary>
        /// Get the team icon
        /// </summary>
        /// <remarks>
        /// Get the team icon of the team.  __Minimum server version__: 4.9  ##### Permissions User must be authenticated. In addition, team must be open or the user must have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamsTeamIdImageGetAsyncWithHttpInfo (string teamId);
        /// <summary>
        /// Sets the team icon
        /// </summary>
        /// <remarks>
        /// Sets the team icon for the team.  __Minimum server version__: 4.9  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="image">The image to be uploaded</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> TeamsTeamIdImagePostAsync (string teamId, System.IO.Stream image);

        /// <summary>
        /// Sets the team icon
        /// </summary>
        /// <remarks>
        /// Sets the team icon for the team.  __Minimum server version__: 4.9  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="image">The image to be uploaded</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> TeamsTeamIdImagePostAsyncWithHttpInfo (string teamId, System.IO.Stream image);
        /// <summary>
        /// Import a Team from other application
        /// </summary>
        /// <remarks>
        /// Import a team into a existing team. Import users, channels, posts, hooks. ##### Permissions Must have &#x60;permission_import_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="file">A file to be uploaded in zip format.</param>
        /// <param name="filesize">The size of the zip file to be imported.</param>
        /// <param name="importFrom">String that defines from which application the team was exported to be imported into Mattermost.</param>
        /// <returns>Task of InlineResponse2004</returns>
        System.Threading.Tasks.Task<InlineResponse2004> TeamsTeamIdImportPostAsync (string teamId, System.IO.Stream file, int filesize, string importFrom);

        /// <summary>
        /// Import a Team from other application
        /// </summary>
        /// <remarks>
        /// Import a team into a existing team. Import users, channels, posts, hooks. ##### Permissions Must have &#x60;permission_import_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="file">A file to be uploaded in zip format.</param>
        /// <param name="filesize">The size of the zip file to be imported.</param>
        /// <param name="importFrom">String that defines from which application the team was exported to be imported into Mattermost.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2004>> TeamsTeamIdImportPostAsyncWithHttpInfo (string teamId, System.IO.Stream file, int filesize, string importFrom);
        /// <summary>
        /// Invite users to the team by email
        /// </summary>
        /// <remarks>
        /// Invite users to the existing team usign the user&#39;s email. ##### Permissions Must have &#x60;invite_to_team&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of user&#39;s email</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> TeamsTeamIdInviteEmailPostAsync (string teamId, List<string> body);

        /// <summary>
        /// Invite users to the team by email
        /// </summary>
        /// <remarks>
        /// Invite users to the existing team usign the user&#39;s email. ##### Permissions Must have &#x60;invite_to_team&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of user&#39;s email</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> TeamsTeamIdInviteEmailPostAsyncWithHttpInfo (string teamId, List<string> body);
        /// <summary>
        /// Add multiple users to team
        /// </summary>
        /// <remarks>
        /// Add a number of users to the team by user_id. ##### Permissions Must be authenticated. Authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        System.Threading.Tasks.Task<List<TeamMember>> TeamsTeamIdMembersBatchPostAsync (string teamId, List<TeamMember> body);

        /// <summary>
        /// Add multiple users to team
        /// </summary>
        /// <remarks>
        /// Add a number of users to the team by user_id. ##### Permissions Must be authenticated. Authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamMember>>> TeamsTeamIdMembersBatchPostAsyncWithHttpInfo (string teamId, List<TeamMember> body);
        /// <summary>
        /// Get team members
        /// </summary>
        /// <remarks>
        /// Get a page team members list based on query string parameters - team id, page and per page. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        System.Threading.Tasks.Task<List<TeamMember>> TeamsTeamIdMembersGetAsync (string teamId, string page = null, string perPage = null);

        /// <summary>
        /// Get team members
        /// </summary>
        /// <remarks>
        /// Get a page team members list based on query string parameters - team id, page and per page. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamMember>>> TeamsTeamIdMembersGetAsyncWithHttpInfo (string teamId, string page = null, string perPage = null);
        /// <summary>
        /// Get team members by ids
        /// </summary>
        /// <remarks>
        /// Get a list of team members based on a provided array of user ids. ##### Permissions Must have &#x60;view_team&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of user ids</param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        System.Threading.Tasks.Task<List<TeamMember>> TeamsTeamIdMembersIdsPostAsync (string teamId, List<string> body);

        /// <summary>
        /// Get team members by ids
        /// </summary>
        /// <remarks>
        /// Get a list of team members based on a provided array of user ids. ##### Permissions Must have &#x60;view_team&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of user ids</param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamMember>>> TeamsTeamIdMembersIdsPostAsyncWithHttpInfo (string teamId, List<string> body);
        /// <summary>
        /// Team members minus group members.
        /// </summary>
        /// <remarks>
        /// Get the set of users who are members of the team minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given team.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="groupIds">A comma-separated list of group ids.</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;0&quot;)</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task TeamsTeamIdMembersMinusGroupMembersGetAsync (string teamId, string groupIds, string page = null, string perPage = null);

        /// <summary>
        /// Team members minus group members.
        /// </summary>
        /// <remarks>
        /// Get the set of users who are members of the team minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given team.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="groupIds">A comma-separated list of group ids.</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;0&quot;)</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> TeamsTeamIdMembersMinusGroupMembersGetAsyncWithHttpInfo (string teamId, string groupIds, string page = null, string perPage = null);
        /// <summary>
        /// Add user to team
        /// </summary>
        /// <remarks>
        /// Add user to the team by user_id. ##### Permissions Must be authenticated and team be open to add self. For adding another user, authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> TeamsTeamIdMembersPostAsync (string teamId, InlineObject27 body);

        /// <summary>
        /// Add user to team
        /// </summary>
        /// <remarks>
        /// Add user to the team by user_id. ##### Permissions Must be authenticated and team be open to add self. For adding another user, authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> TeamsTeamIdMembersPostAsyncWithHttpInfo (string teamId, InlineObject27 body);
        /// <summary>
        /// Remove user from team
        /// </summary>
        /// <remarks>
        /// Delete the team member object for a user, effectively removing them from a team. ##### Permissions Must be logged in as the user or have the &#x60;remove_user_from_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> TeamsTeamIdMembersUserIdDeleteAsync (string teamId, string userId);

        /// <summary>
        /// Remove user from team
        /// </summary>
        /// <remarks>
        /// Delete the team member object for a user, effectively removing them from a team. ##### Permissions Must be logged in as the user or have the &#x60;remove_user_from_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> TeamsTeamIdMembersUserIdDeleteAsyncWithHttpInfo (string teamId, string userId);
        /// <summary>
        /// Get a team member
        /// </summary>
        /// <remarks>
        /// Get a team member on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of TeamMember</returns>
        System.Threading.Tasks.Task<TeamMember> TeamsTeamIdMembersUserIdGetAsync (string teamId, string userId);

        /// <summary>
        /// Get a team member
        /// </summary>
        /// <remarks>
        /// Get a team member on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamMember>> TeamsTeamIdMembersUserIdGetAsyncWithHttpInfo (string teamId, string userId);
        /// <summary>
        /// Update a team member roles
        /// </summary>
        /// <remarks>
        /// Update a team member roles. Valid team roles are \&quot;team_user\&quot;, \&quot;team_admin\&quot; or both of them. Overwrites any previously assigned team roles. ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> TeamsTeamIdMembersUserIdRolesPutAsync (string teamId, string userId, InlineObject28 body);

        /// <summary>
        /// Update a team member roles
        /// </summary>
        /// <remarks>
        /// Update a team member roles. Valid team roles are \&quot;team_user\&quot;, \&quot;team_admin\&quot; or both of them. Overwrites any previously assigned team roles. ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> TeamsTeamIdMembersUserIdRolesPutAsyncWithHttpInfo (string teamId, string userId, InlineObject28 body);
        /// <summary>
        /// Update the scheme-derived roles of a team member.
        /// </summary>
        /// <remarks>
        /// Update a team member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary team member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a team admin.  __Minimum server version__: 5.0  ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> TeamsTeamIdMembersUserIdSchemeRolesPutAsync (string teamId, string userId, InlineObject29 body);

        /// <summary>
        /// Update the scheme-derived roles of a team member.
        /// </summary>
        /// <remarks>
        /// Update a team member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary team member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a team admin.  __Minimum server version__: 5.0  ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> TeamsTeamIdMembersUserIdSchemeRolesPutAsyncWithHttpInfo (string teamId, string userId, InlineObject29 body);
        /// <summary>
        /// Patch a team
        /// </summary>
        /// <remarks>
        /// Partially update a team by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> TeamsTeamIdPatchPutAsync (string teamId, InlineObject25 body);

        /// <summary>
        /// Patch a team
        /// </summary>
        /// <remarks>
        /// Partially update a team by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> TeamsTeamIdPatchPutAsyncWithHttpInfo (string teamId, InlineObject25 body);
        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Update a team by providing the team object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> TeamsTeamIdPutAsync (string teamId, InlineObject24 body);

        /// <summary>
        /// Update a team
        /// </summary>
        /// <remarks>
        /// Update a team by providing the team object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> TeamsTeamIdPutAsyncWithHttpInfo (string teamId, InlineObject24 body);
        /// <summary>
        /// Regenerate the Invite ID from a Team
        /// </summary>
        /// <remarks>
        /// Regenerates the invite ID used in invite links of a team ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of Team</returns>
        System.Threading.Tasks.Task<Team> TeamsTeamIdRegenerateInviteIdPostAsync (string teamId);

        /// <summary>
        /// Regenerate the Invite ID from a Team
        /// </summary>
        /// <remarks>
        /// Regenerates the invite ID used in invite links of a team ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        System.Threading.Tasks.Task<ApiResponse<Team>> TeamsTeamIdRegenerateInviteIdPostAsyncWithHttpInfo (string teamId);
        /// <summary>
        /// Set a team&#39;s scheme
        /// </summary>
        /// <remarks>
        /// Set a team&#39;s scheme, more specifically sets the scheme_id value of a team record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> TeamsTeamIdSchemePutAsync (string teamId, InlineObject30 body);

        /// <summary>
        /// Set a team&#39;s scheme
        /// </summary>
        /// <remarks>
        /// Set a team&#39;s scheme, more specifically sets the scheme_id value of a team record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> TeamsTeamIdSchemePutAsyncWithHttpInfo (string teamId, InlineObject30 body);
        /// <summary>
        /// Get a team stats
        /// </summary>
        /// <remarks>
        /// Get a team stats on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of TeamStats</returns>
        System.Threading.Tasks.Task<TeamStats> TeamsTeamIdStatsGetAsync (string teamId);

        /// <summary>
        /// Get a team stats
        /// </summary>
        /// <remarks>
        /// Get a team stats on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse (TeamStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamStats>> TeamsTeamIdStatsGetAsyncWithHttpInfo (string teamId);
        /// <summary>
        /// Get a user&#39;s teams
        /// </summary>
        /// <remarks>
        /// Get a list of teams that a user is on. ##### Permissions Must be authenticated as the user or have the &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> UsersUserIdTeamsGetAsync (string userId);

        /// <summary>
        /// Get a user&#39;s teams
        /// </summary>
        /// <remarks>
        /// Get a list of teams that a user is on. ##### Permissions Must be authenticated as the user or have the &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> UsersUserIdTeamsGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Get team members for a user
        /// </summary>
        /// <remarks>
        /// Get a list of team members for a user. Useful for getting the ids of teams the user is on and the roles they have in those teams. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        System.Threading.Tasks.Task<List<TeamMember>> UsersUserIdTeamsMembersGetAsync (string userId);

        /// <summary>
        /// Get team members for a user
        /// </summary>
        /// <remarks>
        /// Get a list of team members for a user. Useful for getting the ids of teams the user is on and the roles they have in those teams. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamMember>>> UsersUserIdTeamsMembersGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Get unreads for a team
        /// </summary>
        /// <remarks>
        /// Get the unread mention and message counts for a team for the specified user. ##### Permissions Must be the user or have &#x60;edit_other_users&#x60; permission and have &#x60;view_team&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of TeamUnread</returns>
        System.Threading.Tasks.Task<TeamUnread> UsersUserIdTeamsTeamIdUnreadGetAsync (string userId, string teamId);

        /// <summary>
        /// Get unreads for a team
        /// </summary>
        /// <remarks>
        /// Get the unread mention and message counts for a team for the specified user. ##### Permissions Must be the user or have &#x60;edit_other_users&#x60; permission and have &#x60;view_team&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse (TeamUnread)</returns>
        System.Threading.Tasks.Task<ApiResponse<TeamUnread>> UsersUserIdTeamsTeamIdUnreadGetAsyncWithHttpInfo (string userId, string teamId);
        /// <summary>
        /// Get team unreads for a user
        /// </summary>
        /// <remarks>
        /// Get the count for unread messages and mentions in the teams the user is a member of. ##### Permissions Must be logged in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="excludeTeam">Optional team id to be excluded from the results</param>
        /// <returns>Task of List&lt;TeamUnread&gt;</returns>
        System.Threading.Tasks.Task<List<TeamUnread>> UsersUserIdTeamsUnreadGetAsync (string userId, string excludeTeam);

        /// <summary>
        /// Get team unreads for a user
        /// </summary>
        /// <remarks>
        /// Get the count for unread messages and mentions in the teams the user is a member of. ##### Permissions Must be logged in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="excludeTeam">Optional team id to be excluded from the results</param>
        /// <returns>Task of ApiResponse (List&lt;TeamUnread&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<TeamUnread>>> UsersUserIdTeamsUnreadGetAsyncWithHttpInfo (string userId, string excludeTeam);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITeamsApi : ITeamsApiSync, ITeamsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TeamsApi : ITeamsApi
    {
        private Sdcb.Mattermost.DotNetSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TeamsApi(String basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Sdcb.Mattermost.DotNetSdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TeamsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TeamsApi(Sdcb.Mattermost.DotNetSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TeamsApi(Sdcb.Mattermost.DotNetSdk.Client.ISynchronousClient client,Sdcb.Mattermost.DotNetSdk.Client.IAsynchronousClient asyncClient, Sdcb.Mattermost.DotNetSdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sdcb.Mattermost.DotNetSdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get teams For regular users only returns open teams. Users with the \&quot;manage_system\&quot; permission will return teams regardless of type. The result is based on query string parameters - page and per_page. ##### Permissions Must be authenticated. \&quot;manage_system\&quot; permission is required to show all teams. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of teams per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> TeamsGet (string page = null, string perPage = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Team>> localVarResponse = TeamsGetWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get teams For regular users only returns open teams. Users with the \&quot;manage_system\&quot; permission will return teams regardless of type. The result is based on query string parameters - page and per_page. ##### Permissions Must be authenticated. \&quot;manage_system\&quot; permission is required to show all teams. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of teams per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Team> > TeamsGetWithHttpInfo (string page = null, string perPage = null)
        {
            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<Team> >("/teams", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get teams For regular users only returns open teams. Users with the \&quot;manage_system\&quot; permission will return teams regardless of type. The result is based on query string parameters - page and per_page. ##### Permissions Must be authenticated. \&quot;manage_system\&quot; permission is required to show all teams. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of teams per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> TeamsGetAsync (string page = null, string perPage = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Team>> localVarResponse = await TeamsGetAsyncWithHttpInfo(page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get teams For regular users only returns open teams. Users with the \&quot;manage_system\&quot; permission will return teams regardless of type. The result is based on query string parameters - page and per_page. ##### Permissions Must be authenticated. \&quot;manage_system\&quot; permission is required to show all teams. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of teams per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Team>>> TeamsGetAsyncWithHttpInfo (string page = null, string perPage = null)
        {

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Team>>("/teams", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get invite info for a team Get the &#x60;name&#x60;, &#x60;display_name&#x60;, &#x60;description&#x60; and &#x60;id&#x60; for a team from the invite id.  __Minimum server version__: 4.0  ##### Permissions No authentication required. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteId">Invite id for a team</param>
        /// <returns>InlineResponse2005</returns>
        public InlineResponse2005 TeamsInviteInviteIdGet (string inviteId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse2005> localVarResponse = TeamsInviteInviteIdGetWithHttpInfo(inviteId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get invite info for a team Get the &#x60;name&#x60;, &#x60;display_name&#x60;, &#x60;description&#x60; and &#x60;id&#x60; for a team from the invite id.  __Minimum server version__: 4.0  ##### Permissions No authentication required. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteId">Invite id for a team</param>
        /// <returns>ApiResponse of InlineResponse2005</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< InlineResponse2005 > TeamsInviteInviteIdGetWithHttpInfo (string inviteId)
        {
            // verify the required parameter 'inviteId' is set
            if (inviteId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'inviteId' when calling TeamsApi->TeamsInviteInviteIdGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (inviteId != null)
                requestOptions.PathParameters.Add("invite_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(inviteId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< InlineResponse2005 >("/teams/invite/{invite_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsInviteInviteIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get invite info for a team Get the &#x60;name&#x60;, &#x60;display_name&#x60;, &#x60;description&#x60; and &#x60;id&#x60; for a team from the invite id.  __Minimum server version__: 4.0  ##### Permissions No authentication required. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteId">Invite id for a team</param>
        /// <returns>Task of InlineResponse2005</returns>
        public async System.Threading.Tasks.Task<InlineResponse2005> TeamsInviteInviteIdGetAsync (string inviteId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse2005> localVarResponse = await TeamsInviteInviteIdGetAsyncWithHttpInfo(inviteId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get invite info for a team Get the &#x60;name&#x60;, &#x60;display_name&#x60;, &#x60;description&#x60; and &#x60;id&#x60; for a team from the invite id.  __Minimum server version__: 4.0  ##### Permissions No authentication required. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="inviteId">Invite id for a team</param>
        /// <returns>Task of ApiResponse (InlineResponse2005)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse2005>> TeamsInviteInviteIdGetAsyncWithHttpInfo (string inviteId)
        {
            // verify the required parameter 'inviteId' is set
            if (inviteId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'inviteId' when calling TeamsApi->TeamsInviteInviteIdGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (inviteId != null)
                requestOptions.PathParameters.Add("invite_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(inviteId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<InlineResponse2005>("/teams/invite/{invite_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsInviteInviteIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Invalidate active email invitations Invalidate active email invitations that have not been accepted by the user. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>StatusOK</returns>
        public StatusOK TeamsInvitesEmailDelete ()
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = TeamsInvitesEmailDeleteWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Invalidate active email invitations Invalidate active email invitations that have not been accepted by the user. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > TeamsInvitesEmailDeleteWithHttpInfo ()
        {
            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/teams/invites/email", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsInvitesEmailDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Invalidate active email invitations Invalidate active email invitations that have not been accepted by the user. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> TeamsInvitesEmailDeleteAsync ()
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await TeamsInvitesEmailDeleteAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Invalidate active email invitations Invalidate active email invitations that have not been accepted by the user. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> TeamsInvitesEmailDeleteAsyncWithHttpInfo ()
        {

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/teams/invites/email", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsInvitesEmailDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Add user to team from invite Using either an invite id or hash/data pair from an email invite link, add a user to a team. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token id from the invitation</param>
        /// <returns>TeamMember</returns>
        public TeamMember TeamsMembersInvitePost (string token)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamMember> localVarResponse = TeamsMembersInvitePostWithHttpInfo(token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add user to team from invite Using either an invite id or hash/data pair from an email invite link, add a user to a team. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token id from the invitation</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< TeamMember > TeamsMembersInvitePostWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'token' when calling TeamsApi->TeamsMembersInvitePost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (token != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "token", token))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Post< TeamMember >("/teams/members/invite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsMembersInvitePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Add user to team from invite Using either an invite id or hash/data pair from an email invite link, add a user to a team. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token id from the invitation</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> TeamsMembersInvitePostAsync (string token)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamMember> localVarResponse = await TeamsMembersInvitePostAsyncWithHttpInfo(token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add user to team from invite Using either an invite id or hash/data pair from an email invite link, add a user to a team. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="token">Token id from the invitation</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamMember>> TeamsMembersInvitePostAsyncWithHttpInfo (string token)
        {
            // verify the required parameter 'token' is set
            if (token == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'token' when calling TeamsApi->TeamsMembersInvitePost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (token != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "token", token))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<TeamMember>("/teams/members/invite", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsMembersInvitePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Check if team exists Check if the team exists based on a team name. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team Name</param>
        /// <returns>TeamExists</returns>
        public TeamExists TeamsNameNameExistsGet (string name)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamExists> localVarResponse = TeamsNameNameExistsGetWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check if team exists Check if the team exists based on a team name. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team Name</param>
        /// <returns>ApiResponse of TeamExists</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< TeamExists > TeamsNameNameExistsGetWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'name' when calling TeamsApi->TeamsNameNameExistsGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                requestOptions.PathParameters.Add("name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< TeamExists >("/teams/name/{name}/exists", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsNameNameExistsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Check if team exists Check if the team exists based on a team name. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team Name</param>
        /// <returns>Task of TeamExists</returns>
        public async System.Threading.Tasks.Task<TeamExists> TeamsNameNameExistsGetAsync (string name)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamExists> localVarResponse = await TeamsNameNameExistsGetAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check if team exists Check if the team exists based on a team name. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team Name</param>
        /// <returns>Task of ApiResponse (TeamExists)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamExists>> TeamsNameNameExistsGetAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'name' when calling TeamsApi->TeamsNameNameExistsGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (name != null)
                requestOptions.PathParameters.Add("name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<TeamExists>("/teams/name/{name}/exists", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsNameNameExistsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a team by name Get a team based on provided name string ##### Permissions Must be authenticated, team type is open and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team Name</param>
        /// <returns>Team</returns>
        public Team TeamsNameNameGet (string name)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team> localVarResponse = TeamsNameNameGetWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a team by name Get a team based on provided name string ##### Permissions Must be authenticated, team type is open and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team Name</param>
        /// <returns>ApiResponse of Team</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Team > TeamsNameNameGetWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'name' when calling TeamsApi->TeamsNameNameGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
                requestOptions.PathParameters.Add("name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Team >("/teams/name/{name}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsNameNameGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a team by name Get a team based on provided name string ##### Permissions Must be authenticated, team type is open and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team Name</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> TeamsNameNameGetAsync (string name)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team> localVarResponse = await TeamsNameNameGetAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a team by name Get a team based on provided name string ##### Permissions Must be authenticated, team type is open and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Team Name</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team>> TeamsNameNameGetAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'name' when calling TeamsApi->TeamsNameNameGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (name != null)
                requestOptions.PathParameters.Add("name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(name)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Team>("/teams/name/{name}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsNameNameGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a team Create a new team on the system. ##### Permissions Must be authenticated and have the &#x60;create_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        public Team TeamsPost (InlineObject23 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team> localVarResponse = TeamsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a team Create a new team on the system. ##### Permissions Must be authenticated and have the &#x60;create_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Team > TeamsPostWithHttpInfo (InlineObject23 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< Team >("/teams", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a team Create a new team on the system. ##### Permissions Must be authenticated and have the &#x60;create_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> TeamsPostAsync (InlineObject23 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team> localVarResponse = await TeamsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a team Create a new team on the system. ##### Permissions Must be authenticated and have the &#x60;create_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team>> TeamsPostAsyncWithHttpInfo (InlineObject23 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Team>("/teams", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Search teams Search teams based on search term provided in the request body. ##### Permissions Logged in user only shows open teams Logged in user with \&quot;manage_system\&quot; permission shows all teams 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> TeamsSearchPost (InlineObject26 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Team>> localVarResponse = TeamsSearchPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search teams Search teams based on search term provided in the request body. ##### Permissions Logged in user only shows open teams Logged in user with \&quot;manage_system\&quot; permission shows all teams 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Team> > TeamsSearchPostWithHttpInfo (InlineObject26 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsSearchPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< List<Team> >("/teams/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsSearchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Search teams Search teams based on search term provided in the request body. ##### Permissions Logged in user only shows open teams Logged in user with \&quot;manage_system\&quot; permission shows all teams 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> TeamsSearchPostAsync (InlineObject26 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Team>> localVarResponse = await TeamsSearchPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search teams Search teams based on search term provided in the request body. ##### Permissions Logged in user only shows open teams Logged in user with \&quot;manage_system\&quot; permission shows all teams 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Team>>> TeamsSearchPostAsyncWithHttpInfo (InlineObject26 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsSearchPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<Team>>("/teams/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsSearchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete a team Soft deletes a team, by marking the team as deleted in the database. Soft deleted teams will not be accessible in the user interface.  Optionally use the permanent query parameter to hard delete the team for compliance reasons. As of server version 5.0, to use this feature &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="permanent">Permanently delete the team, to be used for compliance reasons only. As of server version 5.0, &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. (optional, default to false)</param>
        /// <returns>StatusOK</returns>
        public StatusOK TeamsTeamIdDelete (string teamId, bool? permanent = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = TeamsTeamIdDeleteWithHttpInfo(teamId, permanent);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a team Soft deletes a team, by marking the team as deleted in the database. Soft deleted teams will not be accessible in the user interface.  Optionally use the permanent query parameter to hard delete the team for compliance reasons. As of server version 5.0, to use this feature &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="permanent">Permanently delete the team, to be used for compliance reasons only. As of server version 5.0, &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. (optional, default to false)</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > TeamsTeamIdDeleteWithHttpInfo (string teamId, bool? permanent = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdDelete");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (permanent != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "permanent", permanent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/teams/{team_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete a team Soft deletes a team, by marking the team as deleted in the database. Soft deleted teams will not be accessible in the user interface.  Optionally use the permanent query parameter to hard delete the team for compliance reasons. As of server version 5.0, to use this feature &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="permanent">Permanently delete the team, to be used for compliance reasons only. As of server version 5.0, &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. (optional, default to false)</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> TeamsTeamIdDeleteAsync (string teamId, bool? permanent = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await TeamsTeamIdDeleteAsyncWithHttpInfo(teamId, permanent);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a team Soft deletes a team, by marking the team as deleted in the database. Soft deleted teams will not be accessible in the user interface.  Optionally use the permanent query parameter to hard delete the team for compliance reasons. As of server version 5.0, to use this feature &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="permanent">Permanently delete the team, to be used for compliance reasons only. As of server version 5.0, &#x60;ServiceSettings.EnableAPITeamDeletion&#x60; must be set to &#x60;true&#x60; in the server&#39;s configuration. (optional, default to false)</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> TeamsTeamIdDeleteAsyncWithHttpInfo (string teamId, bool? permanent = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdDelete");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (permanent != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "permanent", permanent))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/teams/{team_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a team Get a team on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Team</returns>
        public Team TeamsTeamIdGet (string teamId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team> localVarResponse = TeamsTeamIdGetWithHttpInfo(teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a team Get a team on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of Team</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Team > TeamsTeamIdGetWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Team >("/teams/{team_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a team Get a team on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> TeamsTeamIdGetAsync (string teamId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team> localVarResponse = await TeamsTeamIdGetAsyncWithHttpInfo(teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a team Get a team on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team>> TeamsTeamIdGetAsyncWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Team>("/teams/{team_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Remove the team icon Remove the team icon for the team.  __Minimum server version__: 4.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>StatusOK</returns>
        public StatusOK TeamsTeamIdImageDelete (string teamId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = TeamsTeamIdImageDeleteWithHttpInfo(teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove the team icon Remove the team icon for the team.  __Minimum server version__: 4.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > TeamsTeamIdImageDeleteWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdImageDelete");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/teams/{team_id}/image", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdImageDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Remove the team icon Remove the team icon for the team.  __Minimum server version__: 4.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> TeamsTeamIdImageDeleteAsync (string teamId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await TeamsTeamIdImageDeleteAsyncWithHttpInfo(teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove the team icon Remove the team icon for the team.  __Minimum server version__: 4.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> TeamsTeamIdImageDeleteAsyncWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdImageDelete");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/teams/{team_id}/image", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdImageDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get the team icon Get the team icon of the team.  __Minimum server version__: 4.9  ##### Permissions User must be authenticated. In addition, team must be open or the user must have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns></returns>
        public void TeamsTeamIdImageGet (string teamId)
        {
             TeamsTeamIdImageGetWithHttpInfo(teamId);
        }

        /// <summary>
        /// Get the team icon Get the team icon of the team.  __Minimum server version__: 4.9  ##### Permissions User must be authenticated. In addition, team must be open or the user must have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Object> TeamsTeamIdImageGetWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdImageGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get<Object>("/teams/{team_id}/image", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdImageGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get the team icon Get the team icon of the team.  __Minimum server version__: 4.9  ##### Permissions User must be authenticated. In addition, team must be open or the user must have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamsTeamIdImageGetAsync (string teamId)
        {
             await TeamsTeamIdImageGetAsyncWithHttpInfo(teamId);

        }

        /// <summary>
        /// Get the team icon Get the team icon of the team.  __Minimum server version__: 4.9  ##### Permissions User must be authenticated. In addition, team must be open or the user must have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Object>> TeamsTeamIdImageGetAsyncWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdImageGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Object>("/teams/{team_id}/image", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdImageGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Sets the team icon Sets the team icon for the team.  __Minimum server version__: 4.9  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="image">The image to be uploaded</param>
        /// <returns>StatusOK</returns>
        public StatusOK TeamsTeamIdImagePost (string teamId, System.IO.Stream image)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = TeamsTeamIdImagePostWithHttpInfo(teamId, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Sets the team icon Sets the team icon for the team.  __Minimum server version__: 4.9  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="image">The image to be uploaded</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > TeamsTeamIdImagePostWithHttpInfo (string teamId, System.IO.Stream image)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdImagePost");

            // verify the required parameter 'image' is set
            if (image == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'image' when calling TeamsApi->TeamsTeamIdImagePost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (image != null)
            {
                requestOptions.FileParameters.Add("image", image);
            }


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/teams/{team_id}/image", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdImagePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Sets the team icon Sets the team icon for the team.  __Minimum server version__: 4.9  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="image">The image to be uploaded</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> TeamsTeamIdImagePostAsync (string teamId, System.IO.Stream image)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await TeamsTeamIdImagePostAsyncWithHttpInfo(teamId, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Sets the team icon Sets the team icon for the team.  __Minimum server version__: 4.9  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="image">The image to be uploaded</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> TeamsTeamIdImagePostAsyncWithHttpInfo (string teamId, System.IO.Stream image)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdImagePost");

            // verify the required parameter 'image' is set
            if (image == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'image' when calling TeamsApi->TeamsTeamIdImagePost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (image != null)
            {
                requestOptions.FileParameters.Add("image", image);
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/teams/{team_id}/image", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdImagePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Import a Team from other application Import a team into a existing team. Import users, channels, posts, hooks. ##### Permissions Must have &#x60;permission_import_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="file">A file to be uploaded in zip format.</param>
        /// <param name="filesize">The size of the zip file to be imported.</param>
        /// <param name="importFrom">String that defines from which application the team was exported to be imported into Mattermost.</param>
        /// <returns>InlineResponse2004</returns>
        public InlineResponse2004 TeamsTeamIdImportPost (string teamId, System.IO.Stream file, int filesize, string importFrom)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse2004> localVarResponse = TeamsTeamIdImportPostWithHttpInfo(teamId, file, filesize, importFrom);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Import a Team from other application Import a team into a existing team. Import users, channels, posts, hooks. ##### Permissions Must have &#x60;permission_import_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="file">A file to be uploaded in zip format.</param>
        /// <param name="filesize">The size of the zip file to be imported.</param>
        /// <param name="importFrom">String that defines from which application the team was exported to be imported into Mattermost.</param>
        /// <returns>ApiResponse of InlineResponse2004</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< InlineResponse2004 > TeamsTeamIdImportPostWithHttpInfo (string teamId, System.IO.Stream file, int filesize, string importFrom)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdImportPost");

            // verify the required parameter 'file' is set
            if (file == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'file' when calling TeamsApi->TeamsTeamIdImportPost");

            // verify the required parameter 'filesize' is set
            if (filesize == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'filesize' when calling TeamsApi->TeamsTeamIdImportPost");

            // verify the required parameter 'importFrom' is set
            if (importFrom == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'importFrom' when calling TeamsApi->TeamsTeamIdImportPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (file != null)
            {
                requestOptions.FileParameters.Add("file", file);
            }
            if (filesize != null)
            {
                requestOptions.FormParameters.Add("filesize", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(filesize)); // form parameter
            }
            if (importFrom != null)
            {
                requestOptions.FormParameters.Add("importFrom", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(importFrom)); // form parameter
            }


            // make the HTTP request

            var response = this.Client.Post< InlineResponse2004 >("/teams/{team_id}/import", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdImportPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Import a Team from other application Import a team into a existing team. Import users, channels, posts, hooks. ##### Permissions Must have &#x60;permission_import_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="file">A file to be uploaded in zip format.</param>
        /// <param name="filesize">The size of the zip file to be imported.</param>
        /// <param name="importFrom">String that defines from which application the team was exported to be imported into Mattermost.</param>
        /// <returns>Task of InlineResponse2004</returns>
        public async System.Threading.Tasks.Task<InlineResponse2004> TeamsTeamIdImportPostAsync (string teamId, System.IO.Stream file, int filesize, string importFrom)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse2004> localVarResponse = await TeamsTeamIdImportPostAsyncWithHttpInfo(teamId, file, filesize, importFrom);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Import a Team from other application Import a team into a existing team. Import users, channels, posts, hooks. ##### Permissions Must have &#x60;permission_import_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="file">A file to be uploaded in zip format.</param>
        /// <param name="filesize">The size of the zip file to be imported.</param>
        /// <param name="importFrom">String that defines from which application the team was exported to be imported into Mattermost.</param>
        /// <returns>Task of ApiResponse (InlineResponse2004)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<InlineResponse2004>> TeamsTeamIdImportPostAsyncWithHttpInfo (string teamId, System.IO.Stream file, int filesize, string importFrom)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdImportPost");

            // verify the required parameter 'file' is set
            if (file == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'file' when calling TeamsApi->TeamsTeamIdImportPost");

            // verify the required parameter 'filesize' is set
            if (filesize == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'filesize' when calling TeamsApi->TeamsTeamIdImportPost");

            // verify the required parameter 'importFrom' is set
            if (importFrom == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'importFrom' when calling TeamsApi->TeamsTeamIdImportPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (file != null)
            {
                requestOptions.FileParameters.Add("file", file);
            }
            if (filesize != null)
            {
                requestOptions.FormParameters.Add("filesize", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(filesize)); // form parameter
            }
            if (importFrom != null)
            {
                requestOptions.FormParameters.Add("importFrom", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(importFrom)); // form parameter
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<InlineResponse2004>("/teams/{team_id}/import", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdImportPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Invite users to the team by email Invite users to the existing team usign the user&#39;s email. ##### Permissions Must have &#x60;invite_to_team&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of user&#39;s email</param>
        /// <returns>StatusOK</returns>
        public StatusOK TeamsTeamIdInviteEmailPost (string teamId, List<string> body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = TeamsTeamIdInviteEmailPostWithHttpInfo(teamId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Invite users to the team by email Invite users to the existing team usign the user&#39;s email. ##### Permissions Must have &#x60;invite_to_team&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of user&#39;s email</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > TeamsTeamIdInviteEmailPostWithHttpInfo (string teamId, List<string> body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdInviteEmailPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdInviteEmailPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/teams/{team_id}/invite/email", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdInviteEmailPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Invite users to the team by email Invite users to the existing team usign the user&#39;s email. ##### Permissions Must have &#x60;invite_to_team&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of user&#39;s email</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> TeamsTeamIdInviteEmailPostAsync (string teamId, List<string> body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await TeamsTeamIdInviteEmailPostAsyncWithHttpInfo(teamId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Invite users to the team by email Invite users to the existing team usign the user&#39;s email. ##### Permissions Must have &#x60;invite_to_team&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of user&#39;s email</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> TeamsTeamIdInviteEmailPostAsyncWithHttpInfo (string teamId, List<string> body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdInviteEmailPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdInviteEmailPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/teams/{team_id}/invite/email", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdInviteEmailPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Add multiple users to team Add a number of users to the team by user_id. ##### Permissions Must be authenticated. Authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        public List<TeamMember> TeamsTeamIdMembersBatchPost (string teamId, List<TeamMember> body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<TeamMember>> localVarResponse = TeamsTeamIdMembersBatchPostWithHttpInfo(teamId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add multiple users to team Add a number of users to the team by user_id. ##### Permissions Must be authenticated. Authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<TeamMember> > TeamsTeamIdMembersBatchPostWithHttpInfo (string teamId, List<TeamMember> body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersBatchPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdMembersBatchPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< List<TeamMember> >("/teams/{team_id}/members/batch", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersBatchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Add multiple users to team Add a number of users to the team by user_id. ##### Permissions Must be authenticated. Authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamMember>> TeamsTeamIdMembersBatchPostAsync (string teamId, List<TeamMember> body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<TeamMember>> localVarResponse = await TeamsTeamIdMembersBatchPostAsyncWithHttpInfo(teamId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add multiple users to team Add a number of users to the team by user_id. ##### Permissions Must be authenticated. Authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<TeamMember>>> TeamsTeamIdMembersBatchPostAsyncWithHttpInfo (string teamId, List<TeamMember> body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersBatchPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdMembersBatchPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<TeamMember>>("/teams/{team_id}/members/batch", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersBatchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get team members Get a page team members list based on query string parameters - team id, page and per page. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        public List<TeamMember> TeamsTeamIdMembersGet (string teamId, string page = null, string perPage = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<TeamMember>> localVarResponse = TeamsTeamIdMembersGetWithHttpInfo(teamId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get team members Get a page team members list based on query string parameters - team id, page and per page. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<TeamMember> > TeamsTeamIdMembersGetWithHttpInfo (string teamId, string page = null, string perPage = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<TeamMember> >("/teams/{team_id}/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get team members Get a page team members list based on query string parameters - team id, page and per page. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamMember>> TeamsTeamIdMembersGetAsync (string teamId, string page = null, string perPage = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<TeamMember>> localVarResponse = await TeamsTeamIdMembersGetAsyncWithHttpInfo(teamId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get team members Get a page team members list based on query string parameters - team id, page and per page. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<TeamMember>>> TeamsTeamIdMembersGetAsyncWithHttpInfo (string teamId, string page = null, string perPage = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<TeamMember>>("/teams/{team_id}/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get team members by ids Get a list of team members based on a provided array of user ids. ##### Permissions Must have &#x60;view_team&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of user ids</param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        public List<TeamMember> TeamsTeamIdMembersIdsPost (string teamId, List<string> body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<TeamMember>> localVarResponse = TeamsTeamIdMembersIdsPostWithHttpInfo(teamId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get team members by ids Get a list of team members based on a provided array of user ids. ##### Permissions Must have &#x60;view_team&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of user ids</param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<TeamMember> > TeamsTeamIdMembersIdsPostWithHttpInfo (string teamId, List<string> body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersIdsPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdMembersIdsPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< List<TeamMember> >("/teams/{team_id}/members/ids", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersIdsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get team members by ids Get a list of team members based on a provided array of user ids. ##### Permissions Must have &#x60;view_team&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of user ids</param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamMember>> TeamsTeamIdMembersIdsPostAsync (string teamId, List<string> body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<TeamMember>> localVarResponse = await TeamsTeamIdMembersIdsPostAsyncWithHttpInfo(teamId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get team members by ids Get a list of team members based on a provided array of user ids. ##### Permissions Must have &#x60;view_team&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body">List of user ids</param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<TeamMember>>> TeamsTeamIdMembersIdsPostAsyncWithHttpInfo (string teamId, List<string> body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersIdsPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdMembersIdsPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<TeamMember>>("/teams/{team_id}/members/ids", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersIdsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Team members minus group members. Get the set of users who are members of the team minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given team.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="groupIds">A comma-separated list of group ids.</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;0&quot;)</param>
        /// <returns></returns>
        public void TeamsTeamIdMembersMinusGroupMembersGet (string teamId, string groupIds, string page = null, string perPage = null)
        {
             TeamsTeamIdMembersMinusGroupMembersGetWithHttpInfo(teamId, groupIds, page, perPage);
        }

        /// <summary>
        /// Team members minus group members. Get the set of users who are members of the team minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given team.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="groupIds">A comma-separated list of group ids.</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;0&quot;)</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Object> TeamsTeamIdMembersMinusGroupMembersGetWithHttpInfo (string teamId, string groupIds, string page = null, string perPage = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersMinusGroupMembersGet");

            // verify the required parameter 'groupIds' is set
            if (groupIds == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'groupIds' when calling TeamsApi->TeamsTeamIdMembersMinusGroupMembersGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (groupIds != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "group_ids", groupIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get<Object>("/teams/{team_id}/members_minus_group_members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersMinusGroupMembersGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Team members minus group members. Get the set of users who are members of the team minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given team.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="groupIds">A comma-separated list of group ids.</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;0&quot;)</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task TeamsTeamIdMembersMinusGroupMembersGetAsync (string teamId, string groupIds, string page = null, string perPage = null)
        {
             await TeamsTeamIdMembersMinusGroupMembersGetAsyncWithHttpInfo(teamId, groupIds, page, perPage);

        }

        /// <summary>
        /// Team members minus group members. Get the set of users who are members of the team minus the set of users who are members of the given groups. Each user object contains an array of group objects representing the group memberships for that user. Each user object contains the boolean fields &#x60;scheme_guest&#x60;, &#x60;scheme_user&#x60;, and &#x60;scheme_admin&#x60; representing the roles that user has for the given team.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="groupIds">A comma-separated list of group ids.</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;0&quot;)</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Object>> TeamsTeamIdMembersMinusGroupMembersGetAsyncWithHttpInfo (string teamId, string groupIds, string page = null, string perPage = null)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersMinusGroupMembersGet");

            // verify the required parameter 'groupIds' is set
            if (groupIds == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'groupIds' when calling TeamsApi->TeamsTeamIdMembersMinusGroupMembersGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (groupIds != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "group_ids", groupIds))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Object>("/teams/{team_id}/members_minus_group_members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersMinusGroupMembersGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Add user to team Add user to the team by user_id. ##### Permissions Must be authenticated and team be open to add self. For adding another user, authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>TeamMember</returns>
        public TeamMember TeamsTeamIdMembersPost (string teamId, InlineObject27 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamMember> localVarResponse = TeamsTeamIdMembersPostWithHttpInfo(teamId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add user to team Add user to the team by user_id. ##### Permissions Must be authenticated and team be open to add self. For adding another user, authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of TeamMember</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< TeamMember > TeamsTeamIdMembersPostWithHttpInfo (string teamId, InlineObject27 body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdMembersPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< TeamMember >("/teams/{team_id}/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Add user to team Add user to the team by user_id. ##### Permissions Must be authenticated and team be open to add self. For adding another user, authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> TeamsTeamIdMembersPostAsync (string teamId, InlineObject27 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamMember> localVarResponse = await TeamsTeamIdMembersPostAsyncWithHttpInfo(teamId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add user to team Add user to the team by user_id. ##### Permissions Must be authenticated and team be open to add self. For adding another user, authenticated user must have the &#x60;add_user_to_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamMember>> TeamsTeamIdMembersPostAsyncWithHttpInfo (string teamId, InlineObject27 body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdMembersPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<TeamMember>("/teams/{team_id}/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Remove user from team Delete the team member object for a user, effectively removing them from a team. ##### Permissions Must be logged in as the user or have the &#x60;remove_user_from_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>StatusOK</returns>
        public StatusOK TeamsTeamIdMembersUserIdDelete (string teamId, string userId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = TeamsTeamIdMembersUserIdDeleteWithHttpInfo(teamId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove user from team Delete the team member object for a user, effectively removing them from a team. ##### Permissions Must be logged in as the user or have the &#x60;remove_user_from_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > TeamsTeamIdMembersUserIdDeleteWithHttpInfo (string teamId, string userId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersUserIdDelete");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->TeamsTeamIdMembersUserIdDelete");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/teams/{team_id}/members/{user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersUserIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Remove user from team Delete the team member object for a user, effectively removing them from a team. ##### Permissions Must be logged in as the user or have the &#x60;remove_user_from_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> TeamsTeamIdMembersUserIdDeleteAsync (string teamId, string userId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await TeamsTeamIdMembersUserIdDeleteAsyncWithHttpInfo(teamId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove user from team Delete the team member object for a user, effectively removing them from a team. ##### Permissions Must be logged in as the user or have the &#x60;remove_user_from_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> TeamsTeamIdMembersUserIdDeleteAsyncWithHttpInfo (string teamId, string userId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersUserIdDelete");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->TeamsTeamIdMembersUserIdDelete");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/teams/{team_id}/members/{user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersUserIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a team member Get a team member on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>TeamMember</returns>
        public TeamMember TeamsTeamIdMembersUserIdGet (string teamId, string userId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamMember> localVarResponse = TeamsTeamIdMembersUserIdGetWithHttpInfo(teamId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a team member Get a team member on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of TeamMember</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< TeamMember > TeamsTeamIdMembersUserIdGetWithHttpInfo (string teamId, string userId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersUserIdGet");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->TeamsTeamIdMembersUserIdGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< TeamMember >("/teams/{team_id}/members/{user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersUserIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a team member Get a team member on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of TeamMember</returns>
        public async System.Threading.Tasks.Task<TeamMember> TeamsTeamIdMembersUserIdGetAsync (string teamId, string userId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamMember> localVarResponse = await TeamsTeamIdMembersUserIdGetAsyncWithHttpInfo(teamId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a team member Get a team member on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (TeamMember)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamMember>> TeamsTeamIdMembersUserIdGetAsyncWithHttpInfo (string teamId, string userId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersUserIdGet");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->TeamsTeamIdMembersUserIdGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<TeamMember>("/teams/{team_id}/members/{user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersUserIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a team member roles Update a team member roles. Valid team roles are \&quot;team_user\&quot;, \&quot;team_admin\&quot; or both of them. Overwrites any previously assigned team roles. ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        public StatusOK TeamsTeamIdMembersUserIdRolesPut (string teamId, string userId, InlineObject28 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = TeamsTeamIdMembersUserIdRolesPutWithHttpInfo(teamId, userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a team member roles Update a team member roles. Valid team roles are \&quot;team_user\&quot;, \&quot;team_admin\&quot; or both of them. Overwrites any previously assigned team roles. ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > TeamsTeamIdMembersUserIdRolesPutWithHttpInfo (string teamId, string userId, InlineObject28 body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersUserIdRolesPut");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->TeamsTeamIdMembersUserIdRolesPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdMembersUserIdRolesPut");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< StatusOK >("/teams/{team_id}/members/{user_id}/roles", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersUserIdRolesPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a team member roles Update a team member roles. Valid team roles are \&quot;team_user\&quot;, \&quot;team_admin\&quot; or both of them. Overwrites any previously assigned team roles. ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> TeamsTeamIdMembersUserIdRolesPutAsync (string teamId, string userId, InlineObject28 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await TeamsTeamIdMembersUserIdRolesPutAsyncWithHttpInfo(teamId, userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a team member roles Update a team member roles. Valid team roles are \&quot;team_user\&quot;, \&quot;team_admin\&quot; or both of them. Overwrites any previously assigned team roles. ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> TeamsTeamIdMembersUserIdRolesPutAsyncWithHttpInfo (string teamId, string userId, InlineObject28 body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersUserIdRolesPut");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->TeamsTeamIdMembersUserIdRolesPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdMembersUserIdRolesPut");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<StatusOK>("/teams/{team_id}/members/{user_id}/roles", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersUserIdRolesPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update the scheme-derived roles of a team member. Update a team member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary team member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a team admin.  __Minimum server version__: 5.0  ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        public StatusOK TeamsTeamIdMembersUserIdSchemeRolesPut (string teamId, string userId, InlineObject29 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = TeamsTeamIdMembersUserIdSchemeRolesPutWithHttpInfo(teamId, userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update the scheme-derived roles of a team member. Update a team member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary team member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a team admin.  __Minimum server version__: 5.0  ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > TeamsTeamIdMembersUserIdSchemeRolesPutWithHttpInfo (string teamId, string userId, InlineObject29 body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersUserIdSchemeRolesPut");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->TeamsTeamIdMembersUserIdSchemeRolesPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdMembersUserIdSchemeRolesPut");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< StatusOK >("/teams/{team_id}/members/{user_id}/schemeRoles", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersUserIdSchemeRolesPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update the scheme-derived roles of a team member. Update a team member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary team member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a team admin.  __Minimum server version__: 5.0  ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> TeamsTeamIdMembersUserIdSchemeRolesPutAsync (string teamId, string userId, InlineObject29 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await TeamsTeamIdMembersUserIdSchemeRolesPutAsyncWithHttpInfo(teamId, userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update the scheme-derived roles of a team member. Update a team member&#39;s scheme_admin/scheme_user properties. Typically this should either be &#x60;scheme_admin&#x3D;false, scheme_user&#x3D;true&#x60; for ordinary team member, or &#x60;scheme_admin&#x3D;true, scheme_user&#x3D;true&#x60; for a team admin.  __Minimum server version__: 5.0  ##### Permissions Must be authenticated and have the &#x60;manage_team_roles&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> TeamsTeamIdMembersUserIdSchemeRolesPutAsyncWithHttpInfo (string teamId, string userId, InlineObject29 body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdMembersUserIdSchemeRolesPut");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->TeamsTeamIdMembersUserIdSchemeRolesPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdMembersUserIdSchemeRolesPut");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<StatusOK>("/teams/{team_id}/members/{user_id}/schemeRoles", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdMembersUserIdSchemeRolesPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Patch a team Partially update a team by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        public Team TeamsTeamIdPatchPut (string teamId, InlineObject25 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team> localVarResponse = TeamsTeamIdPatchPutWithHttpInfo(teamId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch a team Partially update a team by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Team > TeamsTeamIdPatchPutWithHttpInfo (string teamId, InlineObject25 body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdPatchPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdPatchPut");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< Team >("/teams/{team_id}/patch", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdPatchPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Patch a team Partially update a team by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> TeamsTeamIdPatchPutAsync (string teamId, InlineObject25 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team> localVarResponse = await TeamsTeamIdPatchPutAsyncWithHttpInfo(teamId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch a team Partially update a team by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team>> TeamsTeamIdPatchPutAsyncWithHttpInfo (string teamId, InlineObject25 body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdPatchPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdPatchPut");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Team>("/teams/{team_id}/patch", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdPatchPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a team Update a team by providing the team object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Team</returns>
        public Team TeamsTeamIdPut (string teamId, InlineObject24 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team> localVarResponse = TeamsTeamIdPutWithHttpInfo(teamId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a team Update a team by providing the team object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Team</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Team > TeamsTeamIdPutWithHttpInfo (string teamId, InlineObject24 body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdPut");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< Team >("/teams/{team_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a team Update a team by providing the team object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> TeamsTeamIdPutAsync (string teamId, InlineObject24 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team> localVarResponse = await TeamsTeamIdPutAsyncWithHttpInfo(teamId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a team Update a team by providing the team object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team>> TeamsTeamIdPutAsyncWithHttpInfo (string teamId, InlineObject24 body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdPut");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Team>("/teams/{team_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Regenerate the Invite ID from a Team Regenerates the invite ID used in invite links of a team ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Team</returns>
        public Team TeamsTeamIdRegenerateInviteIdPost (string teamId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team> localVarResponse = TeamsTeamIdRegenerateInviteIdPostWithHttpInfo(teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Regenerate the Invite ID from a Team Regenerates the invite ID used in invite links of a team ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of Team</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Team > TeamsTeamIdRegenerateInviteIdPostWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdRegenerateInviteIdPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = this.Client.Post< Team >("/teams/{team_id}/regenerate_invite_id", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdRegenerateInviteIdPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Regenerate the Invite ID from a Team Regenerates the invite ID used in invite links of a team ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of Team</returns>
        public async System.Threading.Tasks.Task<Team> TeamsTeamIdRegenerateInviteIdPostAsync (string teamId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team> localVarResponse = await TeamsTeamIdRegenerateInviteIdPostAsyncWithHttpInfo(teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Regenerate the Invite ID from a Team Regenerates the invite ID used in invite links of a team ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse (Team)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Team>> TeamsTeamIdRegenerateInviteIdPostAsyncWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdRegenerateInviteIdPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Team>("/teams/{team_id}/regenerate_invite_id", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdRegenerateInviteIdPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Set a team&#39;s scheme Set a team&#39;s scheme, more specifically sets the scheme_id value of a team record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        public StatusOK TeamsTeamIdSchemePut (string teamId, InlineObject30 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = TeamsTeamIdSchemePutWithHttpInfo(teamId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set a team&#39;s scheme Set a team&#39;s scheme, more specifically sets the scheme_id value of a team record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > TeamsTeamIdSchemePutWithHttpInfo (string teamId, InlineObject30 body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdSchemePut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdSchemePut");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< StatusOK >("/teams/{team_id}/scheme", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdSchemePut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Set a team&#39;s scheme Set a team&#39;s scheme, more specifically sets the scheme_id value of a team record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> TeamsTeamIdSchemePutAsync (string teamId, InlineObject30 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await TeamsTeamIdSchemePutAsyncWithHttpInfo(teamId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set a team&#39;s scheme Set a team&#39;s scheme, more specifically sets the scheme_id value of a team record.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> TeamsTeamIdSchemePutAsyncWithHttpInfo (string teamId, InlineObject30 body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdSchemePut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling TeamsApi->TeamsTeamIdSchemePut");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<StatusOK>("/teams/{team_id}/scheme", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdSchemePut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a team stats Get a team stats on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>TeamStats</returns>
        public TeamStats TeamsTeamIdStatsGet (string teamId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamStats> localVarResponse = TeamsTeamIdStatsGetWithHttpInfo(teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a team stats Get a team stats on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of TeamStats</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< TeamStats > TeamsTeamIdStatsGetWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdStatsGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< TeamStats >("/teams/{team_id}/stats", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdStatsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a team stats Get a team stats on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of TeamStats</returns>
        public async System.Threading.Tasks.Task<TeamStats> TeamsTeamIdStatsGetAsync (string teamId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamStats> localVarResponse = await TeamsTeamIdStatsGetAsyncWithHttpInfo(teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a team stats Get a team stats on the system. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse (TeamStats)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamStats>> TeamsTeamIdStatsGetAsyncWithHttpInfo (string teamId)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->TeamsTeamIdStatsGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<TeamStats>("/teams/{team_id}/stats", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdStatsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a user&#39;s teams Get a list of teams that a user is on. ##### Permissions Must be authenticated as the user or have the &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> UsersUserIdTeamsGet (string userId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Team>> localVarResponse = UsersUserIdTeamsGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user&#39;s teams Get a list of teams that a user is on. ##### Permissions Must be authenticated as the user or have the &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Team> > UsersUserIdTeamsGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UsersUserIdTeamsGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< List<Team> >("/users/{user_id}/teams", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTeamsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a user&#39;s teams Get a list of teams that a user is on. ##### Permissions Must be authenticated as the user or have the &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> UsersUserIdTeamsGetAsync (string userId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Team>> localVarResponse = await UsersUserIdTeamsGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user&#39;s teams Get a list of teams that a user is on. ##### Permissions Must be authenticated as the user or have the &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Team>>> UsersUserIdTeamsGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UsersUserIdTeamsGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Team>>("/users/{user_id}/teams", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTeamsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get team members for a user Get a list of team members for a user. Useful for getting the ids of teams the user is on and the roles they have in those teams. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>List&lt;TeamMember&gt;</returns>
        public List<TeamMember> UsersUserIdTeamsMembersGet (string userId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<TeamMember>> localVarResponse = UsersUserIdTeamsMembersGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get team members for a user Get a list of team members for a user. Useful for getting the ids of teams the user is on and the roles they have in those teams. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of List&lt;TeamMember&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<TeamMember> > UsersUserIdTeamsMembersGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UsersUserIdTeamsMembersGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< List<TeamMember> >("/users/{user_id}/teams/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTeamsMembersGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get team members for a user Get a list of team members for a user. Useful for getting the ids of teams the user is on and the roles they have in those teams. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of List&lt;TeamMember&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamMember>> UsersUserIdTeamsMembersGetAsync (string userId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<TeamMember>> localVarResponse = await UsersUserIdTeamsMembersGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get team members for a user Get a list of team members for a user. Useful for getting the ids of teams the user is on and the roles they have in those teams. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (List&lt;TeamMember&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<TeamMember>>> UsersUserIdTeamsMembersGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UsersUserIdTeamsMembersGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<TeamMember>>("/users/{user_id}/teams/members", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTeamsMembersGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get unreads for a team Get the unread mention and message counts for a team for the specified user. ##### Permissions Must be the user or have &#x60;edit_other_users&#x60; permission and have &#x60;view_team&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>TeamUnread</returns>
        public TeamUnread UsersUserIdTeamsTeamIdUnreadGet (string userId, string teamId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamUnread> localVarResponse = UsersUserIdTeamsTeamIdUnreadGetWithHttpInfo(userId, teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get unreads for a team Get the unread mention and message counts for a team for the specified user. ##### Permissions Must be the user or have &#x60;edit_other_users&#x60; permission and have &#x60;view_team&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>ApiResponse of TeamUnread</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< TeamUnread > UsersUserIdTeamsTeamIdUnreadGetWithHttpInfo (string userId, string teamId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UsersUserIdTeamsTeamIdUnreadGet");

            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UsersUserIdTeamsTeamIdUnreadGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< TeamUnread >("/users/{user_id}/teams/{team_id}/unread", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTeamsTeamIdUnreadGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get unreads for a team Get the unread mention and message counts for a team for the specified user. ##### Permissions Must be the user or have &#x60;edit_other_users&#x60; permission and have &#x60;view_team&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of TeamUnread</returns>
        public async System.Threading.Tasks.Task<TeamUnread> UsersUserIdTeamsTeamIdUnreadGetAsync (string userId, string teamId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamUnread> localVarResponse = await UsersUserIdTeamsTeamIdUnreadGetAsyncWithHttpInfo(userId, teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get unreads for a team Get the unread mention and message counts for a team for the specified user. ##### Permissions Must be the user or have &#x60;edit_other_users&#x60; permission and have &#x60;view_team&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="teamId">Team GUID</param>
        /// <returns>Task of ApiResponse (TeamUnread)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<TeamUnread>> UsersUserIdTeamsTeamIdUnreadGetAsyncWithHttpInfo (string userId, string teamId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UsersUserIdTeamsTeamIdUnreadGet");

            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling TeamsApi->UsersUserIdTeamsTeamIdUnreadGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<TeamUnread>("/users/{user_id}/teams/{team_id}/unread", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTeamsTeamIdUnreadGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get team unreads for a user Get the count for unread messages and mentions in the teams the user is a member of. ##### Permissions Must be logged in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="excludeTeam">Optional team id to be excluded from the results</param>
        /// <returns>List&lt;TeamUnread&gt;</returns>
        public List<TeamUnread> UsersUserIdTeamsUnreadGet (string userId, string excludeTeam)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<TeamUnread>> localVarResponse = UsersUserIdTeamsUnreadGetWithHttpInfo(userId, excludeTeam);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get team unreads for a user Get the count for unread messages and mentions in the teams the user is a member of. ##### Permissions Must be logged in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="excludeTeam">Optional team id to be excluded from the results</param>
        /// <returns>ApiResponse of List&lt;TeamUnread&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<TeamUnread> > UsersUserIdTeamsUnreadGetWithHttpInfo (string userId, string excludeTeam)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UsersUserIdTeamsUnreadGet");

            // verify the required parameter 'excludeTeam' is set
            if (excludeTeam == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'excludeTeam' when calling TeamsApi->UsersUserIdTeamsUnreadGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (excludeTeam != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "exclude_team", excludeTeam))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<TeamUnread> >("/users/{user_id}/teams/unread", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTeamsUnreadGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get team unreads for a user Get the count for unread messages and mentions in the teams the user is a member of. ##### Permissions Must be logged in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="excludeTeam">Optional team id to be excluded from the results</param>
        /// <returns>Task of List&lt;TeamUnread&gt;</returns>
        public async System.Threading.Tasks.Task<List<TeamUnread>> UsersUserIdTeamsUnreadGetAsync (string userId, string excludeTeam)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<TeamUnread>> localVarResponse = await UsersUserIdTeamsUnreadGetAsyncWithHttpInfo(userId, excludeTeam);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get team unreads for a user Get the count for unread messages and mentions in the teams the user is a member of. ##### Permissions Must be logged in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="excludeTeam">Optional team id to be excluded from the results</param>
        /// <returns>Task of ApiResponse (List&lt;TeamUnread&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<TeamUnread>>> UsersUserIdTeamsUnreadGetAsyncWithHttpInfo (string userId, string excludeTeam)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling TeamsApi->UsersUserIdTeamsUnreadGet");

            // verify the required parameter 'excludeTeam' is set
            if (excludeTeam == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'excludeTeam' when calling TeamsApi->UsersUserIdTeamsUnreadGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (excludeTeam != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "exclude_team", excludeTeam))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<TeamUnread>>("/users/{user_id}/teams/unread", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTeamsUnreadGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
