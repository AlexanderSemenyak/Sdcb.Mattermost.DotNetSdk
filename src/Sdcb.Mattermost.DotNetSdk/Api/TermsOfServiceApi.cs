/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITermsOfServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Fetches user&#39;s latest terms of service action if the latest action was for acceptance.
        /// </summary>
        /// <remarks>
        /// Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>UserTermsOfService</returns>
        UserTermsOfService UsersUserIdTermsOfServiceGet (string userId);

        /// <summary>
        /// Fetches user&#39;s latest terms of service action if the latest action was for acceptance.
        /// </summary>
        /// <remarks>
        /// Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of UserTermsOfService</returns>
        ApiResponse<UserTermsOfService> UsersUserIdTermsOfServiceGetWithHttpInfo (string userId);
        /// <summary>
        /// Records user action when they accept or decline custom terms of service
        /// </summary>
        /// <remarks>
        /// Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        StatusOK UsersUserIdTermsOfServicePost (string userId, InlineObject21 body);

        /// <summary>
        /// Records user action when they accept or decline custom terms of service
        /// </summary>
        /// <remarks>
        /// Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersUserIdTermsOfServicePostWithHttpInfo (string userId, InlineObject21 body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITermsOfServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Fetches user&#39;s latest terms of service action if the latest action was for acceptance.
        /// </summary>
        /// <remarks>
        /// Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of UserTermsOfService</returns>
        System.Threading.Tasks.Task<UserTermsOfService> UsersUserIdTermsOfServiceGetAsync (string userId);

        /// <summary>
        /// Fetches user&#39;s latest terms of service action if the latest action was for acceptance.
        /// </summary>
        /// <remarks>
        /// Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (UserTermsOfService)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserTermsOfService>> UsersUserIdTermsOfServiceGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Records user action when they accept or decline custom terms of service
        /// </summary>
        /// <remarks>
        /// Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersUserIdTermsOfServicePostAsync (string userId, InlineObject21 body);

        /// <summary>
        /// Records user action when they accept or decline custom terms of service
        /// </summary>
        /// <remarks>
        /// Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdTermsOfServicePostAsyncWithHttpInfo (string userId, InlineObject21 body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ITermsOfServiceApi : ITermsOfServiceApiSync, ITermsOfServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class TermsOfServiceApi : ITermsOfServiceApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="TermsOfServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TermsOfServiceApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TermsOfServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public TermsOfServiceApi(string basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TermsOfServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public TermsOfServiceApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public TermsOfServiceApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Fetches user&#39;s latest terms of service action if the latest action was for acceptance. Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>UserTermsOfService</returns>
        public UserTermsOfService UsersUserIdTermsOfServiceGet (string userId)
        {
            ApiResponse<UserTermsOfService> localVarResponse = UsersUserIdTermsOfServiceGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches user&#39;s latest terms of service action if the latest action was for acceptance. Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of UserTermsOfService</returns>
        public ApiResponse<UserTermsOfService> UsersUserIdTermsOfServiceGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TermsOfServiceApi->UsersUserIdTermsOfServiceGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< UserTermsOfService >("/users/{user_id}/terms_of_service", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTermsOfServiceGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Fetches user&#39;s latest terms of service action if the latest action was for acceptance. Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of UserTermsOfService</returns>
        public async System.Threading.Tasks.Task<UserTermsOfService> UsersUserIdTermsOfServiceGetAsync (string userId)
        {
            ApiResponse<UserTermsOfService> localVarResponse = await UsersUserIdTermsOfServiceGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches user&#39;s latest terms of service action if the latest action was for acceptance. Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (UserTermsOfService)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserTermsOfService>> UsersUserIdTermsOfServiceGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TermsOfServiceApi->UsersUserIdTermsOfServiceGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<UserTermsOfService>("/users/{user_id}/terms_of_service", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTermsOfServiceGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Records user action when they accept or decline custom terms of service Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersUserIdTermsOfServicePost (string userId, InlineObject21 body)
        {
            ApiResponse<StatusOK> localVarResponse = UsersUserIdTermsOfServicePostWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Records user action when they accept or decline custom terms of service Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersUserIdTermsOfServicePostWithHttpInfo (string userId, InlineObject21 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TermsOfServiceApi->UsersUserIdTermsOfServicePost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TermsOfServiceApi->UsersUserIdTermsOfServicePost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/users/{user_id}/terms_of_service", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTermsOfServicePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Records user action when they accept or decline custom terms of service Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersUserIdTermsOfServicePostAsync (string userId, InlineObject21 body)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersUserIdTermsOfServicePostAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Records user action when they accept or decline custom terms of service Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdTermsOfServicePostAsyncWithHttpInfo (string userId, InlineObject21 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling TermsOfServiceApi->UsersUserIdTermsOfServicePost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling TermsOfServiceApi->UsersUserIdTermsOfServicePost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/users/{user_id}/terms_of_service", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTermsOfServicePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
