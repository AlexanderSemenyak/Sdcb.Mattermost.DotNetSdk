/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBotsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Assign a bot to a user
        /// </summary>
        /// <remarks>
        /// Assign a bot to a specified user. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="userId">The user ID to assign the bot to.</param>
        /// <returns>Bot</returns>
        Bot BotsBotUserIdAssignUserIdPost (string botUserId, string userId);

        /// <summary>
        /// Assign a bot to a user
        /// </summary>
        /// <remarks>
        /// Assign a bot to a specified user. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="userId">The user ID to assign the bot to.</param>
        /// <returns>ApiResponse of Bot</returns>
        ApiResponse<Bot> BotsBotUserIdAssignUserIdPostWithHttpInfo (string botUserId, string userId);
        /// <summary>
        /// Disable a bot
        /// </summary>
        /// <remarks>
        /// Disable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Bot</returns>
        Bot BotsBotUserIdDisablePost (string botUserId);

        /// <summary>
        /// Disable a bot
        /// </summary>
        /// <remarks>
        /// Disable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>ApiResponse of Bot</returns>
        ApiResponse<Bot> BotsBotUserIdDisablePostWithHttpInfo (string botUserId);
        /// <summary>
        /// Enable a bot
        /// </summary>
        /// <remarks>
        /// Enable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Bot</returns>
        Bot BotsBotUserIdEnablePost (string botUserId);

        /// <summary>
        /// Enable a bot
        /// </summary>
        /// <remarks>
        /// Enable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>ApiResponse of Bot</returns>
        ApiResponse<Bot> BotsBotUserIdEnablePostWithHttpInfo (string botUserId);
        /// <summary>
        /// Get a bot
        /// </summary>
        /// <remarks>
        /// Get a bot specified by its bot id. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="includeDeleted">If deleted bots should be returned. (optional)</param>
        /// <returns>Bot</returns>
        Bot BotsBotUserIdGet (string botUserId, bool? includeDeleted = null);

        /// <summary>
        /// Get a bot
        /// </summary>
        /// <remarks>
        /// Get a bot specified by its bot id. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="includeDeleted">If deleted bots should be returned. (optional)</param>
        /// <returns>ApiResponse of Bot</returns>
        ApiResponse<Bot> BotsBotUserIdGetWithHttpInfo (string botUserId, bool? includeDeleted = null);
        /// <summary>
        /// Delete bot&#39;s LHS icon image
        /// </summary>
        /// <remarks>
        /// Delete bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>StatusOK</returns>
        StatusOK BotsBotUserIdIconDelete (string botUserId);

        /// <summary>
        /// Delete bot&#39;s LHS icon image
        /// </summary>
        /// <remarks>
        /// Delete bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> BotsBotUserIdIconDeleteWithHttpInfo (string botUserId);
        /// <summary>
        /// Get bot&#39;s LHS icon
        /// </summary>
        /// <remarks>
        /// Get a bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns></returns>
        void BotsBotUserIdIconGet (string botUserId);

        /// <summary>
        /// Get bot&#39;s LHS icon
        /// </summary>
        /// <remarks>
        /// Get a bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BotsBotUserIdIconGetWithHttpInfo (string botUserId);
        /// <summary>
        /// Set bot&#39;s LHS icon image
        /// </summary>
        /// <remarks>
        /// Set a bot&#39;s LHS icon image based on bot_user_id string parameter. Icon image must be SVG format, all other formats are rejected. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="image">SVG icon image to be uploaded</param>
        /// <returns>StatusOK</returns>
        StatusOK BotsBotUserIdIconPost (string botUserId, System.IO.Stream image);

        /// <summary>
        /// Set bot&#39;s LHS icon image
        /// </summary>
        /// <remarks>
        /// Set a bot&#39;s LHS icon image based on bot_user_id string parameter. Icon image must be SVG format, all other formats are rejected. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="image">SVG icon image to be uploaded</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> BotsBotUserIdIconPostWithHttpInfo (string botUserId, System.IO.Stream image);
        /// <summary>
        /// Patch a bot
        /// </summary>
        /// <remarks>
        /// Partially update a bot by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="body"></param>
        /// <returns>Bot</returns>
        Bot BotsBotUserIdPut (string botUserId, InlineObject64 body);

        /// <summary>
        /// Patch a bot
        /// </summary>
        /// <remarks>
        /// Partially update a bot by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Bot</returns>
        ApiResponse<Bot> BotsBotUserIdPutWithHttpInfo (string botUserId, InlineObject64 body);
        /// <summary>
        /// Get bots
        /// </summary>
        /// <remarks>
        /// Get a page of a list of bots. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. There is a maximum limit of 200 users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="includeDeleted">If deleted bots should be returned. (optional)</param>
        /// <param name="onlyOrphaned">When true, only orphaned bots will be returned. A bot is consitered orphaned if it&#39;s owner has been deactivated. (optional)</param>
        /// <returns>List&lt;Bot&gt;</returns>
        List<Bot> BotsGet (string page = null, string perPage = null, bool? includeDeleted = null, bool? onlyOrphaned = null);

        /// <summary>
        /// Get bots
        /// </summary>
        /// <remarks>
        /// Get a page of a list of bots. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. There is a maximum limit of 200 users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="includeDeleted">If deleted bots should be returned. (optional)</param>
        /// <param name="onlyOrphaned">When true, only orphaned bots will be returned. A bot is consitered orphaned if it&#39;s owner has been deactivated. (optional)</param>
        /// <returns>ApiResponse of List&lt;Bot&gt;</returns>
        ApiResponse<List<Bot>> BotsGetWithHttpInfo (string page = null, string perPage = null, bool? includeDeleted = null, bool? onlyOrphaned = null);
        /// <summary>
        /// Create a bot
        /// </summary>
        /// <remarks>
        /// Create a new bot account on the system. Username is required. ##### Permissions Must have &#x60;create_bot&#x60; permission. __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Bot</returns>
        Bot BotsPost (InlineObject63 body);

        /// <summary>
        /// Create a bot
        /// </summary>
        /// <remarks>
        /// Create a new bot account on the system. Username is required. ##### Permissions Must have &#x60;create_bot&#x60; permission. __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Bot</returns>
        ApiResponse<Bot> BotsPostWithHttpInfo (InlineObject63 body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBotsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Assign a bot to a user
        /// </summary>
        /// <remarks>
        /// Assign a bot to a specified user. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="userId">The user ID to assign the bot to.</param>
        /// <returns>Task of Bot</returns>
        System.Threading.Tasks.Task<Bot> BotsBotUserIdAssignUserIdPostAsync (string botUserId, string userId);

        /// <summary>
        /// Assign a bot to a user
        /// </summary>
        /// <remarks>
        /// Assign a bot to a specified user. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="userId">The user ID to assign the bot to.</param>
        /// <returns>Task of ApiResponse (Bot)</returns>
        System.Threading.Tasks.Task<ApiResponse<Bot>> BotsBotUserIdAssignUserIdPostAsyncWithHttpInfo (string botUserId, string userId);
        /// <summary>
        /// Disable a bot
        /// </summary>
        /// <remarks>
        /// Disable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Task of Bot</returns>
        System.Threading.Tasks.Task<Bot> BotsBotUserIdDisablePostAsync (string botUserId);

        /// <summary>
        /// Disable a bot
        /// </summary>
        /// <remarks>
        /// Disable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Task of ApiResponse (Bot)</returns>
        System.Threading.Tasks.Task<ApiResponse<Bot>> BotsBotUserIdDisablePostAsyncWithHttpInfo (string botUserId);
        /// <summary>
        /// Enable a bot
        /// </summary>
        /// <remarks>
        /// Enable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Task of Bot</returns>
        System.Threading.Tasks.Task<Bot> BotsBotUserIdEnablePostAsync (string botUserId);

        /// <summary>
        /// Enable a bot
        /// </summary>
        /// <remarks>
        /// Enable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Task of ApiResponse (Bot)</returns>
        System.Threading.Tasks.Task<ApiResponse<Bot>> BotsBotUserIdEnablePostAsyncWithHttpInfo (string botUserId);
        /// <summary>
        /// Get a bot
        /// </summary>
        /// <remarks>
        /// Get a bot specified by its bot id. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="includeDeleted">If deleted bots should be returned. (optional)</param>
        /// <returns>Task of Bot</returns>
        System.Threading.Tasks.Task<Bot> BotsBotUserIdGetAsync (string botUserId, bool? includeDeleted = null);

        /// <summary>
        /// Get a bot
        /// </summary>
        /// <remarks>
        /// Get a bot specified by its bot id. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="includeDeleted">If deleted bots should be returned. (optional)</param>
        /// <returns>Task of ApiResponse (Bot)</returns>
        System.Threading.Tasks.Task<ApiResponse<Bot>> BotsBotUserIdGetAsyncWithHttpInfo (string botUserId, bool? includeDeleted = null);
        /// <summary>
        /// Delete bot&#39;s LHS icon image
        /// </summary>
        /// <remarks>
        /// Delete bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> BotsBotUserIdIconDeleteAsync (string botUserId);

        /// <summary>
        /// Delete bot&#39;s LHS icon image
        /// </summary>
        /// <remarks>
        /// Delete bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> BotsBotUserIdIconDeleteAsyncWithHttpInfo (string botUserId);
        /// <summary>
        /// Get bot&#39;s LHS icon
        /// </summary>
        /// <remarks>
        /// Get a bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task BotsBotUserIdIconGetAsync (string botUserId);

        /// <summary>
        /// Get bot&#39;s LHS icon
        /// </summary>
        /// <remarks>
        /// Get a bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> BotsBotUserIdIconGetAsyncWithHttpInfo (string botUserId);
        /// <summary>
        /// Set bot&#39;s LHS icon image
        /// </summary>
        /// <remarks>
        /// Set a bot&#39;s LHS icon image based on bot_user_id string parameter. Icon image must be SVG format, all other formats are rejected. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="image">SVG icon image to be uploaded</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> BotsBotUserIdIconPostAsync (string botUserId, System.IO.Stream image);

        /// <summary>
        /// Set bot&#39;s LHS icon image
        /// </summary>
        /// <remarks>
        /// Set a bot&#39;s LHS icon image based on bot_user_id string parameter. Icon image must be SVG format, all other formats are rejected. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="image">SVG icon image to be uploaded</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> BotsBotUserIdIconPostAsyncWithHttpInfo (string botUserId, System.IO.Stream image);
        /// <summary>
        /// Patch a bot
        /// </summary>
        /// <remarks>
        /// Partially update a bot by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="body"></param>
        /// <returns>Task of Bot</returns>
        System.Threading.Tasks.Task<Bot> BotsBotUserIdPutAsync (string botUserId, InlineObject64 body);

        /// <summary>
        /// Patch a bot
        /// </summary>
        /// <remarks>
        /// Partially update a bot by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Bot)</returns>
        System.Threading.Tasks.Task<ApiResponse<Bot>> BotsBotUserIdPutAsyncWithHttpInfo (string botUserId, InlineObject64 body);
        /// <summary>
        /// Get bots
        /// </summary>
        /// <remarks>
        /// Get a page of a list of bots. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. There is a maximum limit of 200 users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="includeDeleted">If deleted bots should be returned. (optional)</param>
        /// <param name="onlyOrphaned">When true, only orphaned bots will be returned. A bot is consitered orphaned if it&#39;s owner has been deactivated. (optional)</param>
        /// <returns>Task of List&lt;Bot&gt;</returns>
        System.Threading.Tasks.Task<List<Bot>> BotsGetAsync (string page = null, string perPage = null, bool? includeDeleted = null, bool? onlyOrphaned = null);

        /// <summary>
        /// Get bots
        /// </summary>
        /// <remarks>
        /// Get a page of a list of bots. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. There is a maximum limit of 200 users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="includeDeleted">If deleted bots should be returned. (optional)</param>
        /// <param name="onlyOrphaned">When true, only orphaned bots will be returned. A bot is consitered orphaned if it&#39;s owner has been deactivated. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Bot&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Bot>>> BotsGetAsyncWithHttpInfo (string page = null, string perPage = null, bool? includeDeleted = null, bool? onlyOrphaned = null);
        /// <summary>
        /// Create a bot
        /// </summary>
        /// <remarks>
        /// Create a new bot account on the system. Username is required. ##### Permissions Must have &#x60;create_bot&#x60; permission. __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Bot</returns>
        System.Threading.Tasks.Task<Bot> BotsPostAsync (InlineObject63 body);

        /// <summary>
        /// Create a bot
        /// </summary>
        /// <remarks>
        /// Create a new bot account on the system. Username is required. ##### Permissions Must have &#x60;create_bot&#x60; permission. __Minimum server version__: 5.10 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Bot)</returns>
        System.Threading.Tasks.Task<ApiResponse<Bot>> BotsPostAsyncWithHttpInfo (InlineObject63 body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBotsApi : IBotsApiSync, IBotsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BotsApi : IBotsApi
    {
        private Sdcb.Mattermost.DotNetSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BotsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BotsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BotsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BotsApi(String basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Sdcb.Mattermost.DotNetSdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BotsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BotsApi(Sdcb.Mattermost.DotNetSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BotsApi(Sdcb.Mattermost.DotNetSdk.Client.ISynchronousClient client,Sdcb.Mattermost.DotNetSdk.Client.IAsynchronousClient asyncClient, Sdcb.Mattermost.DotNetSdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sdcb.Mattermost.DotNetSdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Assign a bot to a user Assign a bot to a specified user. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="userId">The user ID to assign the bot to.</param>
        /// <returns>Bot</returns>
        public Bot BotsBotUserIdAssignUserIdPost (string botUserId, string userId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot> localVarResponse = BotsBotUserIdAssignUserIdPostWithHttpInfo(botUserId, userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Assign a bot to a user Assign a bot to a specified user. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="userId">The user ID to assign the bot to.</param>
        /// <returns>ApiResponse of Bot</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Bot > BotsBotUserIdAssignUserIdPostWithHttpInfo (string botUserId, string userId)
        {
            // verify the required parameter 'botUserId' is set
            if (botUserId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'botUserId' when calling BotsApi->BotsBotUserIdAssignUserIdPost");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling BotsApi->BotsBotUserIdAssignUserIdPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (botUserId != null)
                requestOptions.PathParameters.Add("bot_user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(botUserId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Post< Bot >("/bots/{bot_user_id}/assign/{user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsBotUserIdAssignUserIdPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Assign a bot to a user Assign a bot to a specified user. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="userId">The user ID to assign the bot to.</param>
        /// <returns>Task of Bot</returns>
        public async System.Threading.Tasks.Task<Bot> BotsBotUserIdAssignUserIdPostAsync (string botUserId, string userId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot> localVarResponse = await BotsBotUserIdAssignUserIdPostAsyncWithHttpInfo(botUserId, userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Assign a bot to a user Assign a bot to a specified user. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="userId">The user ID to assign the bot to.</param>
        /// <returns>Task of ApiResponse (Bot)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot>> BotsBotUserIdAssignUserIdPostAsyncWithHttpInfo (string botUserId, string userId)
        {
            // verify the required parameter 'botUserId' is set
            if (botUserId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'botUserId' when calling BotsApi->BotsBotUserIdAssignUserIdPost");

            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling BotsApi->BotsBotUserIdAssignUserIdPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (botUserId != null)
                requestOptions.PathParameters.Add("bot_user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(botUserId)); // path parameter
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Bot>("/bots/{bot_user_id}/assign/{user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsBotUserIdAssignUserIdPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Disable a bot Disable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Bot</returns>
        public Bot BotsBotUserIdDisablePost (string botUserId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot> localVarResponse = BotsBotUserIdDisablePostWithHttpInfo(botUserId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Disable a bot Disable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>ApiResponse of Bot</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Bot > BotsBotUserIdDisablePostWithHttpInfo (string botUserId)
        {
            // verify the required parameter 'botUserId' is set
            if (botUserId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'botUserId' when calling BotsApi->BotsBotUserIdDisablePost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (botUserId != null)
                requestOptions.PathParameters.Add("bot_user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(botUserId)); // path parameter


            // make the HTTP request

            var response = this.Client.Post< Bot >("/bots/{bot_user_id}/disable", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsBotUserIdDisablePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Disable a bot Disable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Task of Bot</returns>
        public async System.Threading.Tasks.Task<Bot> BotsBotUserIdDisablePostAsync (string botUserId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot> localVarResponse = await BotsBotUserIdDisablePostAsyncWithHttpInfo(botUserId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Disable a bot Disable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Task of ApiResponse (Bot)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot>> BotsBotUserIdDisablePostAsyncWithHttpInfo (string botUserId)
        {
            // verify the required parameter 'botUserId' is set
            if (botUserId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'botUserId' when calling BotsApi->BotsBotUserIdDisablePost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (botUserId != null)
                requestOptions.PathParameters.Add("bot_user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(botUserId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Bot>("/bots/{bot_user_id}/disable", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsBotUserIdDisablePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Enable a bot Enable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Bot</returns>
        public Bot BotsBotUserIdEnablePost (string botUserId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot> localVarResponse = BotsBotUserIdEnablePostWithHttpInfo(botUserId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enable a bot Enable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>ApiResponse of Bot</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Bot > BotsBotUserIdEnablePostWithHttpInfo (string botUserId)
        {
            // verify the required parameter 'botUserId' is set
            if (botUserId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'botUserId' when calling BotsApi->BotsBotUserIdEnablePost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (botUserId != null)
                requestOptions.PathParameters.Add("bot_user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(botUserId)); // path parameter


            // make the HTTP request

            var response = this.Client.Post< Bot >("/bots/{bot_user_id}/enable", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsBotUserIdEnablePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Enable a bot Enable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Task of Bot</returns>
        public async System.Threading.Tasks.Task<Bot> BotsBotUserIdEnablePostAsync (string botUserId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot> localVarResponse = await BotsBotUserIdEnablePostAsyncWithHttpInfo(botUserId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enable a bot Enable a bot. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Task of ApiResponse (Bot)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot>> BotsBotUserIdEnablePostAsyncWithHttpInfo (string botUserId)
        {
            // verify the required parameter 'botUserId' is set
            if (botUserId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'botUserId' when calling BotsApi->BotsBotUserIdEnablePost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (botUserId != null)
                requestOptions.PathParameters.Add("bot_user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(botUserId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Bot>("/bots/{bot_user_id}/enable", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsBotUserIdEnablePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a bot Get a bot specified by its bot id. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="includeDeleted">If deleted bots should be returned. (optional)</param>
        /// <returns>Bot</returns>
        public Bot BotsBotUserIdGet (string botUserId, bool? includeDeleted = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot> localVarResponse = BotsBotUserIdGetWithHttpInfo(botUserId, includeDeleted);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a bot Get a bot specified by its bot id. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="includeDeleted">If deleted bots should be returned. (optional)</param>
        /// <returns>ApiResponse of Bot</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Bot > BotsBotUserIdGetWithHttpInfo (string botUserId, bool? includeDeleted = null)
        {
            // verify the required parameter 'botUserId' is set
            if (botUserId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'botUserId' when calling BotsApi->BotsBotUserIdGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (botUserId != null)
                requestOptions.PathParameters.Add("bot_user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(botUserId)); // path parameter
            if (includeDeleted != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "include_deleted", includeDeleted))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< Bot >("/bots/{bot_user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsBotUserIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a bot Get a bot specified by its bot id. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="includeDeleted">If deleted bots should be returned. (optional)</param>
        /// <returns>Task of Bot</returns>
        public async System.Threading.Tasks.Task<Bot> BotsBotUserIdGetAsync (string botUserId, bool? includeDeleted = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot> localVarResponse = await BotsBotUserIdGetAsyncWithHttpInfo(botUserId, includeDeleted);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a bot Get a bot specified by its bot id. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="includeDeleted">If deleted bots should be returned. (optional)</param>
        /// <returns>Task of ApiResponse (Bot)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot>> BotsBotUserIdGetAsyncWithHttpInfo (string botUserId, bool? includeDeleted = null)
        {
            // verify the required parameter 'botUserId' is set
            if (botUserId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'botUserId' when calling BotsApi->BotsBotUserIdGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (botUserId != null)
                requestOptions.PathParameters.Add("bot_user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(botUserId)); // path parameter
            if (includeDeleted != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "include_deleted", includeDeleted))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Bot>("/bots/{bot_user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsBotUserIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete bot&#39;s LHS icon image Delete bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>StatusOK</returns>
        public StatusOK BotsBotUserIdIconDelete (string botUserId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = BotsBotUserIdIconDeleteWithHttpInfo(botUserId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete bot&#39;s LHS icon image Delete bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > BotsBotUserIdIconDeleteWithHttpInfo (string botUserId)
        {
            // verify the required parameter 'botUserId' is set
            if (botUserId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'botUserId' when calling BotsApi->BotsBotUserIdIconDelete");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (botUserId != null)
                requestOptions.PathParameters.Add("bot_user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(botUserId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/bots/{bot_user_id}/icon", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsBotUserIdIconDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete bot&#39;s LHS icon image Delete bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> BotsBotUserIdIconDeleteAsync (string botUserId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await BotsBotUserIdIconDeleteAsyncWithHttpInfo(botUserId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete bot&#39;s LHS icon image Delete bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> BotsBotUserIdIconDeleteAsyncWithHttpInfo (string botUserId)
        {
            // verify the required parameter 'botUserId' is set
            if (botUserId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'botUserId' when calling BotsApi->BotsBotUserIdIconDelete");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (botUserId != null)
                requestOptions.PathParameters.Add("bot_user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(botUserId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/bots/{bot_user_id}/icon", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsBotUserIdIconDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get bot&#39;s LHS icon Get a bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns></returns>
        public void BotsBotUserIdIconGet (string botUserId)
        {
             BotsBotUserIdIconGetWithHttpInfo(botUserId);
        }

        /// <summary>
        /// Get bot&#39;s LHS icon Get a bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Object> BotsBotUserIdIconGetWithHttpInfo (string botUserId)
        {
            // verify the required parameter 'botUserId' is set
            if (botUserId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'botUserId' when calling BotsApi->BotsBotUserIdIconGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (botUserId != null)
                requestOptions.PathParameters.Add("bot_user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(botUserId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get<Object>("/bots/{bot_user_id}/icon", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsBotUserIdIconGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get bot&#39;s LHS icon Get a bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task BotsBotUserIdIconGetAsync (string botUserId)
        {
             await BotsBotUserIdIconGetAsyncWithHttpInfo(botUserId);

        }

        /// <summary>
        /// Get bot&#39;s LHS icon Get a bot&#39;s LHS icon image based on bot_user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Object>> BotsBotUserIdIconGetAsyncWithHttpInfo (string botUserId)
        {
            // verify the required parameter 'botUserId' is set
            if (botUserId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'botUserId' when calling BotsApi->BotsBotUserIdIconGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (botUserId != null)
                requestOptions.PathParameters.Add("bot_user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(botUserId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Object>("/bots/{bot_user_id}/icon", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsBotUserIdIconGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Set bot&#39;s LHS icon image Set a bot&#39;s LHS icon image based on bot_user_id string parameter. Icon image must be SVG format, all other formats are rejected. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="image">SVG icon image to be uploaded</param>
        /// <returns>StatusOK</returns>
        public StatusOK BotsBotUserIdIconPost (string botUserId, System.IO.Stream image)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = BotsBotUserIdIconPostWithHttpInfo(botUserId, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set bot&#39;s LHS icon image Set a bot&#39;s LHS icon image based on bot_user_id string parameter. Icon image must be SVG format, all other formats are rejected. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="image">SVG icon image to be uploaded</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > BotsBotUserIdIconPostWithHttpInfo (string botUserId, System.IO.Stream image)
        {
            // verify the required parameter 'botUserId' is set
            if (botUserId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'botUserId' when calling BotsApi->BotsBotUserIdIconPost");

            // verify the required parameter 'image' is set
            if (image == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'image' when calling BotsApi->BotsBotUserIdIconPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (botUserId != null)
                requestOptions.PathParameters.Add("bot_user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(botUserId)); // path parameter
            if (image != null)
            {
                requestOptions.FileParameters.Add("image", image);
            }


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/bots/{bot_user_id}/icon", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsBotUserIdIconPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Set bot&#39;s LHS icon image Set a bot&#39;s LHS icon image based on bot_user_id string parameter. Icon image must be SVG format, all other formats are rejected. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="image">SVG icon image to be uploaded</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> BotsBotUserIdIconPostAsync (string botUserId, System.IO.Stream image)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await BotsBotUserIdIconPostAsyncWithHttpInfo(botUserId, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set bot&#39;s LHS icon image Set a bot&#39;s LHS icon image based on bot_user_id string parameter. Icon image must be SVG format, all other formats are rejected. ##### Permissions Must have &#x60;manage_bots&#x60; permission. __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="image">SVG icon image to be uploaded</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> BotsBotUserIdIconPostAsyncWithHttpInfo (string botUserId, System.IO.Stream image)
        {
            // verify the required parameter 'botUserId' is set
            if (botUserId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'botUserId' when calling BotsApi->BotsBotUserIdIconPost");

            // verify the required parameter 'image' is set
            if (image == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'image' when calling BotsApi->BotsBotUserIdIconPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (botUserId != null)
                requestOptions.PathParameters.Add("bot_user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(botUserId)); // path parameter
            if (image != null)
            {
                requestOptions.FileParameters.Add("image", image);
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/bots/{bot_user_id}/icon", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsBotUserIdIconPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Patch a bot Partially update a bot by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="body"></param>
        /// <returns>Bot</returns>
        public Bot BotsBotUserIdPut (string botUserId, InlineObject64 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot> localVarResponse = BotsBotUserIdPutWithHttpInfo(botUserId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch a bot Partially update a bot by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Bot</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Bot > BotsBotUserIdPutWithHttpInfo (string botUserId, InlineObject64 body)
        {
            // verify the required parameter 'botUserId' is set
            if (botUserId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'botUserId' when calling BotsApi->BotsBotUserIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling BotsApi->BotsBotUserIdPut");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (botUserId != null)
                requestOptions.PathParameters.Add("bot_user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(botUserId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< Bot >("/bots/{bot_user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsBotUserIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Patch a bot Partially update a bot by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="body"></param>
        /// <returns>Task of Bot</returns>
        public async System.Threading.Tasks.Task<Bot> BotsBotUserIdPutAsync (string botUserId, InlineObject64 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot> localVarResponse = await BotsBotUserIdPutAsyncWithHttpInfo(botUserId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch a bot Partially update a bot by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have &#x60;manage_bots&#x60; permission.  __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="botUserId">Bot user ID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Bot)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot>> BotsBotUserIdPutAsyncWithHttpInfo (string botUserId, InlineObject64 body)
        {
            // verify the required parameter 'botUserId' is set
            if (botUserId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'botUserId' when calling BotsApi->BotsBotUserIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling BotsApi->BotsBotUserIdPut");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (botUserId != null)
                requestOptions.PathParameters.Add("bot_user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(botUserId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Bot>("/bots/{bot_user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsBotUserIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get bots Get a page of a list of bots. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. There is a maximum limit of 200 users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="includeDeleted">If deleted bots should be returned. (optional)</param>
        /// <param name="onlyOrphaned">When true, only orphaned bots will be returned. A bot is consitered orphaned if it&#39;s owner has been deactivated. (optional)</param>
        /// <returns>List&lt;Bot&gt;</returns>
        public List<Bot> BotsGet (string page = null, string perPage = null, bool? includeDeleted = null, bool? onlyOrphaned = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Bot>> localVarResponse = BotsGetWithHttpInfo(page, perPage, includeDeleted, onlyOrphaned);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get bots Get a page of a list of bots. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. There is a maximum limit of 200 users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="includeDeleted">If deleted bots should be returned. (optional)</param>
        /// <param name="onlyOrphaned">When true, only orphaned bots will be returned. A bot is consitered orphaned if it&#39;s owner has been deactivated. (optional)</param>
        /// <returns>ApiResponse of List&lt;Bot&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Bot> > BotsGetWithHttpInfo (string page = null, string perPage = null, bool? includeDeleted = null, bool? onlyOrphaned = null)
        {
            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (includeDeleted != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "include_deleted", includeDeleted))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (onlyOrphaned != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "only_orphaned", onlyOrphaned))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<Bot> >("/bots", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get bots Get a page of a list of bots. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. There is a maximum limit of 200 users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="includeDeleted">If deleted bots should be returned. (optional)</param>
        /// <param name="onlyOrphaned">When true, only orphaned bots will be returned. A bot is consitered orphaned if it&#39;s owner has been deactivated. (optional)</param>
        /// <returns>Task of List&lt;Bot&gt;</returns>
        public async System.Threading.Tasks.Task<List<Bot>> BotsGetAsync (string page = null, string perPage = null, bool? includeDeleted = null, bool? onlyOrphaned = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Bot>> localVarResponse = await BotsGetAsyncWithHttpInfo(page, perPage, includeDeleted, onlyOrphaned);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get bots Get a page of a list of bots. ##### Permissions Must have &#x60;read_bots&#x60; permission for bots you are managing, and &#x60;read_others_bots&#x60; permission for bots others are managing. __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. There is a maximum limit of 200 users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="includeDeleted">If deleted bots should be returned. (optional)</param>
        /// <param name="onlyOrphaned">When true, only orphaned bots will be returned. A bot is consitered orphaned if it&#39;s owner has been deactivated. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;Bot&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Bot>>> BotsGetAsyncWithHttpInfo (string page = null, string perPage = null, bool? includeDeleted = null, bool? onlyOrphaned = null)
        {

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (includeDeleted != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "include_deleted", includeDeleted))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (onlyOrphaned != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "only_orphaned", onlyOrphaned))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Bot>>("/bots", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a bot Create a new bot account on the system. Username is required. ##### Permissions Must have &#x60;create_bot&#x60; permission. __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Bot</returns>
        public Bot BotsPost (InlineObject63 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot> localVarResponse = BotsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a bot Create a new bot account on the system. Username is required. ##### Permissions Must have &#x60;create_bot&#x60; permission. __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Bot</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Bot > BotsPostWithHttpInfo (InlineObject63 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling BotsApi->BotsPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< Bot >("/bots", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a bot Create a new bot account on the system. Username is required. ##### Permissions Must have &#x60;create_bot&#x60; permission. __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Bot</returns>
        public async System.Threading.Tasks.Task<Bot> BotsPostAsync (InlineObject63 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot> localVarResponse = await BotsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a bot Create a new bot account on the system. Username is required. ##### Permissions Must have &#x60;create_bot&#x60; permission. __Minimum server version__: 5.10 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Bot)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Bot>> BotsPostAsyncWithHttpInfo (InlineObject63 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling BotsApi->BotsPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Bot>("/bots", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("BotsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
