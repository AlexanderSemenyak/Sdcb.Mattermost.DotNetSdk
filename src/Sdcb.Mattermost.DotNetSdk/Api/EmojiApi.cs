/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmojiApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Autocomplete custom emoji
        /// </summary>
        /// <remarks>
        /// Get a list of custom emoji with names starting with or matching the provided name. Returns a maximum of 100 results. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The emoji name to search.</param>
        /// <returns>Emoji</returns>
        Emoji EmojiAutocompleteGet (string name);

        /// <summary>
        /// Autocomplete custom emoji
        /// </summary>
        /// <remarks>
        /// Get a list of custom emoji with names starting with or matching the provided name. Returns a maximum of 100 results. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The emoji name to search.</param>
        /// <returns>ApiResponse of Emoji</returns>
        ApiResponse<Emoji> EmojiAutocompleteGetWithHttpInfo (string name);
        /// <summary>
        /// Delete a custom emoji
        /// </summary>
        /// <remarks>
        /// Delete a custom emoji. ##### Permissions Must have the &#x60;manage_team&#x60; or &#x60;manage_system&#x60; permissions or be the user who created the emoji. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>Emoji</returns>
        Emoji EmojiEmojiIdDelete (string emojiId);

        /// <summary>
        /// Delete a custom emoji
        /// </summary>
        /// <remarks>
        /// Delete a custom emoji. ##### Permissions Must have the &#x60;manage_team&#x60; or &#x60;manage_system&#x60; permissions or be the user who created the emoji. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>ApiResponse of Emoji</returns>
        ApiResponse<Emoji> EmojiEmojiIdDeleteWithHttpInfo (string emojiId);
        /// <summary>
        /// Get a custom emoji
        /// </summary>
        /// <remarks>
        /// Get some metadata for a custom emoji. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>Emoji</returns>
        Emoji EmojiEmojiIdGet (string emojiId);

        /// <summary>
        /// Get a custom emoji
        /// </summary>
        /// <remarks>
        /// Get some metadata for a custom emoji. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>ApiResponse of Emoji</returns>
        ApiResponse<Emoji> EmojiEmojiIdGetWithHttpInfo (string emojiId);
        /// <summary>
        /// Get custom emoji image
        /// </summary>
        /// <remarks>
        /// Get the image for a custom emoji. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns></returns>
        void EmojiEmojiIdImageGet (string emojiId);

        /// <summary>
        /// Get custom emoji image
        /// </summary>
        /// <remarks>
        /// Get the image for a custom emoji. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> EmojiEmojiIdImageGetWithHttpInfo (string emojiId);
        /// <summary>
        /// Get a list of custom emoji
        /// </summary>
        /// <remarks>
        /// Get a page of metadata for custom emoji on the system. Since server version 4.7, sort using the &#x60;sort&#x60; query parameter. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="sort">Either blank for no sorting or \&quot;name\&quot; to sort by emoji names. Minimum server version for sorting is 4.7. (optional)</param>
        /// <returns>Emoji</returns>
        Emoji EmojiGet (string page = null, string perPage = null, string sort = null);

        /// <summary>
        /// Get a list of custom emoji
        /// </summary>
        /// <remarks>
        /// Get a page of metadata for custom emoji on the system. Since server version 4.7, sort using the &#x60;sort&#x60; query parameter. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="sort">Either blank for no sorting or \&quot;name\&quot; to sort by emoji names. Minimum server version for sorting is 4.7. (optional)</param>
        /// <returns>ApiResponse of Emoji</returns>
        ApiResponse<Emoji> EmojiGetWithHttpInfo (string page = null, string perPage = null, string sort = null);
        /// <summary>
        /// Get a custom emoji by name
        /// </summary>
        /// <remarks>
        /// Get some metadata for a custom emoji using its name. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiName">Emoji name</param>
        /// <returns>Emoji</returns>
        Emoji EmojiNameEmojiNameGet (string emojiName);

        /// <summary>
        /// Get a custom emoji by name
        /// </summary>
        /// <remarks>
        /// Get some metadata for a custom emoji using its name. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiName">Emoji name</param>
        /// <returns>ApiResponse of Emoji</returns>
        ApiResponse<Emoji> EmojiNameEmojiNameGetWithHttpInfo (string emojiName);
        /// <summary>
        /// Create a custom emoji
        /// </summary>
        /// <remarks>
        /// Create a custom emoji for the team. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">A file to be uploaded</param>
        /// <param name="emoji">A JSON object containing a &#x60;name&#x60; field with the name of the emoji and a &#x60;creator_id&#x60; field with the id of the authenticated user.</param>
        /// <returns>Emoji</returns>
        Emoji EmojiPost (System.IO.Stream image, string emoji);

        /// <summary>
        /// Create a custom emoji
        /// </summary>
        /// <remarks>
        /// Create a custom emoji for the team. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">A file to be uploaded</param>
        /// <param name="emoji">A JSON object containing a &#x60;name&#x60; field with the name of the emoji and a &#x60;creator_id&#x60; field with the id of the authenticated user.</param>
        /// <returns>ApiResponse of Emoji</returns>
        ApiResponse<Emoji> EmojiPostWithHttpInfo (System.IO.Stream image, string emoji);
        /// <summary>
        /// Search custom emoji
        /// </summary>
        /// <remarks>
        /// Search for custom emoji by name based on search criteria provided in the request body. A maximum of 200 results are returned. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;Emoji&gt;</returns>
        List<Emoji> EmojiSearchPost (InlineObject48 body);

        /// <summary>
        /// Search custom emoji
        /// </summary>
        /// <remarks>
        /// Search for custom emoji by name based on search criteria provided in the request body. A maximum of 200 results are returned. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;Emoji&gt;</returns>
        ApiResponse<List<Emoji>> EmojiSearchPostWithHttpInfo (InlineObject48 body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmojiApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Autocomplete custom emoji
        /// </summary>
        /// <remarks>
        /// Get a list of custom emoji with names starting with or matching the provided name. Returns a maximum of 100 results. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The emoji name to search.</param>
        /// <returns>Task of Emoji</returns>
        System.Threading.Tasks.Task<Emoji> EmojiAutocompleteGetAsync (string name);

        /// <summary>
        /// Autocomplete custom emoji
        /// </summary>
        /// <remarks>
        /// Get a list of custom emoji with names starting with or matching the provided name. Returns a maximum of 100 results. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The emoji name to search.</param>
        /// <returns>Task of ApiResponse (Emoji)</returns>
        System.Threading.Tasks.Task<ApiResponse<Emoji>> EmojiAutocompleteGetAsyncWithHttpInfo (string name);
        /// <summary>
        /// Delete a custom emoji
        /// </summary>
        /// <remarks>
        /// Delete a custom emoji. ##### Permissions Must have the &#x60;manage_team&#x60; or &#x60;manage_system&#x60; permissions or be the user who created the emoji. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>Task of Emoji</returns>
        System.Threading.Tasks.Task<Emoji> EmojiEmojiIdDeleteAsync (string emojiId);

        /// <summary>
        /// Delete a custom emoji
        /// </summary>
        /// <remarks>
        /// Delete a custom emoji. ##### Permissions Must have the &#x60;manage_team&#x60; or &#x60;manage_system&#x60; permissions or be the user who created the emoji. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>Task of ApiResponse (Emoji)</returns>
        System.Threading.Tasks.Task<ApiResponse<Emoji>> EmojiEmojiIdDeleteAsyncWithHttpInfo (string emojiId);
        /// <summary>
        /// Get a custom emoji
        /// </summary>
        /// <remarks>
        /// Get some metadata for a custom emoji. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>Task of Emoji</returns>
        System.Threading.Tasks.Task<Emoji> EmojiEmojiIdGetAsync (string emojiId);

        /// <summary>
        /// Get a custom emoji
        /// </summary>
        /// <remarks>
        /// Get some metadata for a custom emoji. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>Task of ApiResponse (Emoji)</returns>
        System.Threading.Tasks.Task<ApiResponse<Emoji>> EmojiEmojiIdGetAsyncWithHttpInfo (string emojiId);
        /// <summary>
        /// Get custom emoji image
        /// </summary>
        /// <remarks>
        /// Get the image for a custom emoji. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task EmojiEmojiIdImageGetAsync (string emojiId);

        /// <summary>
        /// Get custom emoji image
        /// </summary>
        /// <remarks>
        /// Get the image for a custom emoji. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> EmojiEmojiIdImageGetAsyncWithHttpInfo (string emojiId);
        /// <summary>
        /// Get a list of custom emoji
        /// </summary>
        /// <remarks>
        /// Get a page of metadata for custom emoji on the system. Since server version 4.7, sort using the &#x60;sort&#x60; query parameter. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="sort">Either blank for no sorting or \&quot;name\&quot; to sort by emoji names. Minimum server version for sorting is 4.7. (optional)</param>
        /// <returns>Task of Emoji</returns>
        System.Threading.Tasks.Task<Emoji> EmojiGetAsync (string page = null, string perPage = null, string sort = null);

        /// <summary>
        /// Get a list of custom emoji
        /// </summary>
        /// <remarks>
        /// Get a page of metadata for custom emoji on the system. Since server version 4.7, sort using the &#x60;sort&#x60; query parameter. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="sort">Either blank for no sorting or \&quot;name\&quot; to sort by emoji names. Minimum server version for sorting is 4.7. (optional)</param>
        /// <returns>Task of ApiResponse (Emoji)</returns>
        System.Threading.Tasks.Task<ApiResponse<Emoji>> EmojiGetAsyncWithHttpInfo (string page = null, string perPage = null, string sort = null);
        /// <summary>
        /// Get a custom emoji by name
        /// </summary>
        /// <remarks>
        /// Get some metadata for a custom emoji using its name. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiName">Emoji name</param>
        /// <returns>Task of Emoji</returns>
        System.Threading.Tasks.Task<Emoji> EmojiNameEmojiNameGetAsync (string emojiName);

        /// <summary>
        /// Get a custom emoji by name
        /// </summary>
        /// <remarks>
        /// Get some metadata for a custom emoji using its name. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiName">Emoji name</param>
        /// <returns>Task of ApiResponse (Emoji)</returns>
        System.Threading.Tasks.Task<ApiResponse<Emoji>> EmojiNameEmojiNameGetAsyncWithHttpInfo (string emojiName);
        /// <summary>
        /// Create a custom emoji
        /// </summary>
        /// <remarks>
        /// Create a custom emoji for the team. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">A file to be uploaded</param>
        /// <param name="emoji">A JSON object containing a &#x60;name&#x60; field with the name of the emoji and a &#x60;creator_id&#x60; field with the id of the authenticated user.</param>
        /// <returns>Task of Emoji</returns>
        System.Threading.Tasks.Task<Emoji> EmojiPostAsync (System.IO.Stream image, string emoji);

        /// <summary>
        /// Create a custom emoji
        /// </summary>
        /// <remarks>
        /// Create a custom emoji for the team. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">A file to be uploaded</param>
        /// <param name="emoji">A JSON object containing a &#x60;name&#x60; field with the name of the emoji and a &#x60;creator_id&#x60; field with the id of the authenticated user.</param>
        /// <returns>Task of ApiResponse (Emoji)</returns>
        System.Threading.Tasks.Task<ApiResponse<Emoji>> EmojiPostAsyncWithHttpInfo (System.IO.Stream image, string emoji);
        /// <summary>
        /// Search custom emoji
        /// </summary>
        /// <remarks>
        /// Search for custom emoji by name based on search criteria provided in the request body. A maximum of 200 results are returned. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;Emoji&gt;</returns>
        System.Threading.Tasks.Task<List<Emoji>> EmojiSearchPostAsync (InlineObject48 body);

        /// <summary>
        /// Search custom emoji
        /// </summary>
        /// <remarks>
        /// Search for custom emoji by name based on search criteria provided in the request body. A maximum of 200 results are returned. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;Emoji&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Emoji>>> EmojiSearchPostAsyncWithHttpInfo (InlineObject48 body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEmojiApi : IEmojiApiSync, IEmojiApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EmojiApi : IEmojiApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EmojiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmojiApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmojiApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EmojiApi(string basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EmojiApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EmojiApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public EmojiApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Autocomplete custom emoji Get a list of custom emoji with names starting with or matching the provided name. Returns a maximum of 100 results. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The emoji name to search.</param>
        /// <returns>Emoji</returns>
        public Emoji EmojiAutocompleteGet (string name)
        {
            ApiResponse<Emoji> localVarResponse = EmojiAutocompleteGetWithHttpInfo(name);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Autocomplete custom emoji Get a list of custom emoji with names starting with or matching the provided name. Returns a maximum of 100 results. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The emoji name to search.</param>
        /// <returns>ApiResponse of Emoji</returns>
        public ApiResponse<Emoji> EmojiAutocompleteGetWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling EmojiApi->EmojiAutocompleteGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (name != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< Emoji >("/emoji/autocomplete", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmojiAutocompleteGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Autocomplete custom emoji Get a list of custom emoji with names starting with or matching the provided name. Returns a maximum of 100 results. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The emoji name to search.</param>
        /// <returns>Task of Emoji</returns>
        public async System.Threading.Tasks.Task<Emoji> EmojiAutocompleteGetAsync (string name)
        {
            ApiResponse<Emoji> localVarResponse = await EmojiAutocompleteGetAsyncWithHttpInfo(name);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Autocomplete custom emoji Get a list of custom emoji with names starting with or matching the provided name. Returns a maximum of 100 results. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The emoji name to search.</param>
        /// <returns>Task of ApiResponse (Emoji)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Emoji>> EmojiAutocompleteGetAsyncWithHttpInfo (string name)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling EmojiApi->EmojiAutocompleteGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (name != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Emoji>("/emoji/autocomplete", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmojiAutocompleteGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete a custom emoji Delete a custom emoji. ##### Permissions Must have the &#x60;manage_team&#x60; or &#x60;manage_system&#x60; permissions or be the user who created the emoji. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>Emoji</returns>
        public Emoji EmojiEmojiIdDelete (string emojiId)
        {
            ApiResponse<Emoji> localVarResponse = EmojiEmojiIdDeleteWithHttpInfo(emojiId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a custom emoji Delete a custom emoji. ##### Permissions Must have the &#x60;manage_team&#x60; or &#x60;manage_system&#x60; permissions or be the user who created the emoji. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>ApiResponse of Emoji</returns>
        public ApiResponse<Emoji> EmojiEmojiIdDeleteWithHttpInfo (string emojiId)
        {
            // verify the required parameter 'emojiId' is set
            if (emojiId == null)
                throw new ApiException(400, "Missing required parameter 'emojiId' when calling EmojiApi->EmojiEmojiIdDelete");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (emojiId != null)
                requestOptions.PathParameters.Add("emoji_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(emojiId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< Emoji >("/emoji/{emoji_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmojiEmojiIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete a custom emoji Delete a custom emoji. ##### Permissions Must have the &#x60;manage_team&#x60; or &#x60;manage_system&#x60; permissions or be the user who created the emoji. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>Task of Emoji</returns>
        public async System.Threading.Tasks.Task<Emoji> EmojiEmojiIdDeleteAsync (string emojiId)
        {
            ApiResponse<Emoji> localVarResponse = await EmojiEmojiIdDeleteAsyncWithHttpInfo(emojiId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a custom emoji Delete a custom emoji. ##### Permissions Must have the &#x60;manage_team&#x60; or &#x60;manage_system&#x60; permissions or be the user who created the emoji. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>Task of ApiResponse (Emoji)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Emoji>> EmojiEmojiIdDeleteAsyncWithHttpInfo (string emojiId)
        {
            // verify the required parameter 'emojiId' is set
            if (emojiId == null)
                throw new ApiException(400, "Missing required parameter 'emojiId' when calling EmojiApi->EmojiEmojiIdDelete");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (emojiId != null)
                requestOptions.PathParameters.Add("emoji_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(emojiId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<Emoji>("/emoji/{emoji_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmojiEmojiIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a custom emoji Get some metadata for a custom emoji. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>Emoji</returns>
        public Emoji EmojiEmojiIdGet (string emojiId)
        {
            ApiResponse<Emoji> localVarResponse = EmojiEmojiIdGetWithHttpInfo(emojiId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a custom emoji Get some metadata for a custom emoji. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>ApiResponse of Emoji</returns>
        public ApiResponse<Emoji> EmojiEmojiIdGetWithHttpInfo (string emojiId)
        {
            // verify the required parameter 'emojiId' is set
            if (emojiId == null)
                throw new ApiException(400, "Missing required parameter 'emojiId' when calling EmojiApi->EmojiEmojiIdGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (emojiId != null)
                requestOptions.PathParameters.Add("emoji_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(emojiId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Emoji >("/emoji/{emoji_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmojiEmojiIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a custom emoji Get some metadata for a custom emoji. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>Task of Emoji</returns>
        public async System.Threading.Tasks.Task<Emoji> EmojiEmojiIdGetAsync (string emojiId)
        {
            ApiResponse<Emoji> localVarResponse = await EmojiEmojiIdGetAsyncWithHttpInfo(emojiId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a custom emoji Get some metadata for a custom emoji. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>Task of ApiResponse (Emoji)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Emoji>> EmojiEmojiIdGetAsyncWithHttpInfo (string emojiId)
        {
            // verify the required parameter 'emojiId' is set
            if (emojiId == null)
                throw new ApiException(400, "Missing required parameter 'emojiId' when calling EmojiApi->EmojiEmojiIdGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (emojiId != null)
                requestOptions.PathParameters.Add("emoji_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(emojiId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Emoji>("/emoji/{emoji_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmojiEmojiIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get custom emoji image Get the image for a custom emoji. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns></returns>
        public void EmojiEmojiIdImageGet (string emojiId)
        {
             EmojiEmojiIdImageGetWithHttpInfo(emojiId);
        }

        /// <summary>
        /// Get custom emoji image Get the image for a custom emoji. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> EmojiEmojiIdImageGetWithHttpInfo (string emojiId)
        {
            // verify the required parameter 'emojiId' is set
            if (emojiId == null)
                throw new ApiException(400, "Missing required parameter 'emojiId' when calling EmojiApi->EmojiEmojiIdImageGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (emojiId != null)
                requestOptions.PathParameters.Add("emoji_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(emojiId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get<object>("/emoji/{emoji_id}/image", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmojiEmojiIdImageGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get custom emoji image Get the image for a custom emoji. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task EmojiEmojiIdImageGetAsync (string emojiId)
        {
             await EmojiEmojiIdImageGetAsyncWithHttpInfo(emojiId);

        }

        /// <summary>
        /// Get custom emoji image Get the image for a custom emoji. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiId">Emoji GUID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> EmojiEmojiIdImageGetAsyncWithHttpInfo (string emojiId)
        {
            // verify the required parameter 'emojiId' is set
            if (emojiId == null)
                throw new ApiException(400, "Missing required parameter 'emojiId' when calling EmojiApi->EmojiEmojiIdImageGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (emojiId != null)
                requestOptions.PathParameters.Add("emoji_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(emojiId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<object>("/emoji/{emoji_id}/image", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmojiEmojiIdImageGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a list of custom emoji Get a page of metadata for custom emoji on the system. Since server version 4.7, sort using the &#x60;sort&#x60; query parameter. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="sort">Either blank for no sorting or \&quot;name\&quot; to sort by emoji names. Minimum server version for sorting is 4.7. (optional)</param>
        /// <returns>Emoji</returns>
        public Emoji EmojiGet (string page = null, string perPage = null, string sort = null)
        {
            ApiResponse<Emoji> localVarResponse = EmojiGetWithHttpInfo(page, perPage, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of custom emoji Get a page of metadata for custom emoji on the system. Since server version 4.7, sort using the &#x60;sort&#x60; query parameter. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="sort">Either blank for no sorting or \&quot;name\&quot; to sort by emoji names. Minimum server version for sorting is 4.7. (optional)</param>
        /// <returns>ApiResponse of Emoji</returns>
        public ApiResponse<Emoji> EmojiGetWithHttpInfo (string page = null, string perPage = null, string sort = null)
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sort != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< Emoji >("/emoji", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmojiGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a list of custom emoji Get a page of metadata for custom emoji on the system. Since server version 4.7, sort using the &#x60;sort&#x60; query parameter. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="sort">Either blank for no sorting or \&quot;name\&quot; to sort by emoji names. Minimum server version for sorting is 4.7. (optional)</param>
        /// <returns>Task of Emoji</returns>
        public async System.Threading.Tasks.Task<Emoji> EmojiGetAsync (string page = null, string perPage = null, string sort = null)
        {
            ApiResponse<Emoji> localVarResponse = await EmojiGetAsyncWithHttpInfo(page, perPage, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of custom emoji Get a page of metadata for custom emoji on the system. Since server version 4.7, sort using the &#x60;sort&#x60; query parameter. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="sort">Either blank for no sorting or \&quot;name\&quot; to sort by emoji names. Minimum server version for sorting is 4.7. (optional)</param>
        /// <returns>Task of ApiResponse (Emoji)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Emoji>> EmojiGetAsyncWithHttpInfo (string page = null, string perPage = null, string sort = null)
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sort != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Emoji>("/emoji", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmojiGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a custom emoji by name Get some metadata for a custom emoji using its name. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiName">Emoji name</param>
        /// <returns>Emoji</returns>
        public Emoji EmojiNameEmojiNameGet (string emojiName)
        {
            ApiResponse<Emoji> localVarResponse = EmojiNameEmojiNameGetWithHttpInfo(emojiName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a custom emoji by name Get some metadata for a custom emoji using its name. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiName">Emoji name</param>
        /// <returns>ApiResponse of Emoji</returns>
        public ApiResponse<Emoji> EmojiNameEmojiNameGetWithHttpInfo (string emojiName)
        {
            // verify the required parameter 'emojiName' is set
            if (emojiName == null)
                throw new ApiException(400, "Missing required parameter 'emojiName' when calling EmojiApi->EmojiNameEmojiNameGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (emojiName != null)
                requestOptions.PathParameters.Add("emoji_name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(emojiName)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Emoji >("/emoji/name/{emoji_name}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmojiNameEmojiNameGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a custom emoji by name Get some metadata for a custom emoji using its name. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiName">Emoji name</param>
        /// <returns>Task of Emoji</returns>
        public async System.Threading.Tasks.Task<Emoji> EmojiNameEmojiNameGetAsync (string emojiName)
        {
            ApiResponse<Emoji> localVarResponse = await EmojiNameEmojiNameGetAsyncWithHttpInfo(emojiName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a custom emoji by name Get some metadata for a custom emoji using its name. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="emojiName">Emoji name</param>
        /// <returns>Task of ApiResponse (Emoji)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Emoji>> EmojiNameEmojiNameGetAsyncWithHttpInfo (string emojiName)
        {
            // verify the required parameter 'emojiName' is set
            if (emojiName == null)
                throw new ApiException(400, "Missing required parameter 'emojiName' when calling EmojiApi->EmojiNameEmojiNameGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (emojiName != null)
                requestOptions.PathParameters.Add("emoji_name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(emojiName)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Emoji>("/emoji/name/{emoji_name}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmojiNameEmojiNameGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a custom emoji Create a custom emoji for the team. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">A file to be uploaded</param>
        /// <param name="emoji">A JSON object containing a &#x60;name&#x60; field with the name of the emoji and a &#x60;creator_id&#x60; field with the id of the authenticated user.</param>
        /// <returns>Emoji</returns>
        public Emoji EmojiPost (System.IO.Stream image, string emoji)
        {
            ApiResponse<Emoji> localVarResponse = EmojiPostWithHttpInfo(image, emoji);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a custom emoji Create a custom emoji for the team. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">A file to be uploaded</param>
        /// <param name="emoji">A JSON object containing a &#x60;name&#x60; field with the name of the emoji and a &#x60;creator_id&#x60; field with the id of the authenticated user.</param>
        /// <returns>ApiResponse of Emoji</returns>
        public ApiResponse<Emoji> EmojiPostWithHttpInfo (System.IO.Stream image, string emoji)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling EmojiApi->EmojiPost");

            // verify the required parameter 'emoji' is set
            if (emoji == null)
                throw new ApiException(400, "Missing required parameter 'emoji' when calling EmojiApi->EmojiPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (image != null)
            {
                requestOptions.FileParameters.Add("image", image);
            }
            if (emoji != null)
            {
                requestOptions.FormParameters.Add("emoji", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(emoji)); // form parameter
            }


            // make the HTTP request

            var response = this.Client.Post< Emoji >("/emoji", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmojiPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a custom emoji Create a custom emoji for the team. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">A file to be uploaded</param>
        /// <param name="emoji">A JSON object containing a &#x60;name&#x60; field with the name of the emoji and a &#x60;creator_id&#x60; field with the id of the authenticated user.</param>
        /// <returns>Task of Emoji</returns>
        public async System.Threading.Tasks.Task<Emoji> EmojiPostAsync (System.IO.Stream image, string emoji)
        {
            ApiResponse<Emoji> localVarResponse = await EmojiPostAsyncWithHttpInfo(image, emoji);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a custom emoji Create a custom emoji for the team. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="image">A file to be uploaded</param>
        /// <param name="emoji">A JSON object containing a &#x60;name&#x60; field with the name of the emoji and a &#x60;creator_id&#x60; field with the id of the authenticated user.</param>
        /// <returns>Task of ApiResponse (Emoji)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Emoji>> EmojiPostAsyncWithHttpInfo (System.IO.Stream image, string emoji)
        {
            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling EmojiApi->EmojiPost");

            // verify the required parameter 'emoji' is set
            if (emoji == null)
                throw new ApiException(400, "Missing required parameter 'emoji' when calling EmojiApi->EmojiPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (image != null)
            {
                requestOptions.FileParameters.Add("image", image);
            }
            if (emoji != null)
            {
                requestOptions.FormParameters.Add("emoji", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(emoji)); // form parameter
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Emoji>("/emoji", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmojiPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Search custom emoji Search for custom emoji by name based on search criteria provided in the request body. A maximum of 200 results are returned. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;Emoji&gt;</returns>
        public List<Emoji> EmojiSearchPost (InlineObject48 body)
        {
            ApiResponse<List<Emoji>> localVarResponse = EmojiSearchPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search custom emoji Search for custom emoji by name based on search criteria provided in the request body. A maximum of 200 results are returned. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;Emoji&gt;</returns>
        public ApiResponse<List<Emoji>> EmojiSearchPostWithHttpInfo (InlineObject48 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmojiApi->EmojiSearchPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< List<Emoji> >("/emoji/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmojiSearchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Search custom emoji Search for custom emoji by name based on search criteria provided in the request body. A maximum of 200 results are returned. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;Emoji&gt;</returns>
        public async System.Threading.Tasks.Task<List<Emoji>> EmojiSearchPostAsync (InlineObject48 body)
        {
            ApiResponse<List<Emoji>> localVarResponse = await EmojiSearchPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search custom emoji Search for custom emoji by name based on search criteria provided in the request body. A maximum of 200 results are returned. ##### Permissions Must be authenticated.  __Minimum server version__: 4.7 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;Emoji&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Emoji>>> EmojiSearchPostAsyncWithHttpInfo (InlineObject48 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling EmojiApi->EmojiSearchPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<Emoji>>("/emoji/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("EmojiSearchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
