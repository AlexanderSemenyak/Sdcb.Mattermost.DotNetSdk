/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get a role
        /// </summary>
        /// <remarks>
        /// Get a role from the provided role name.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Role Name</param>
        /// <returns>Role</returns>
        Role RolesNameRoleNameGet (string roleName);

        /// <summary>
        /// Get a role
        /// </summary>
        /// <remarks>
        /// Get a role from the provided role name.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Role Name</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> RolesNameRoleNameGetWithHttpInfo (string roleName);
        /// <summary>
        /// Get a list of roles by name
        /// </summary>
        /// <remarks>
        /// Get a list of roles from their names.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of role names</param>
        /// <returns>List&lt;Role&gt;</returns>
        List<Role> RolesNamesPost (List<string> body);

        /// <summary>
        /// Get a list of roles by name
        /// </summary>
        /// <remarks>
        /// Get a list of roles from their names.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of role names</param>
        /// <returns>ApiResponse of List&lt;Role&gt;</returns>
        ApiResponse<List<Role>> RolesNamesPostWithHttpInfo (List<string> body);
        /// <summary>
        /// Get a role
        /// </summary>
        /// <remarks>
        /// Get a role from the provided role id.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Role GUID</param>
        /// <returns>Role</returns>
        Role RolesRoleIdGet (string roleId);

        /// <summary>
        /// Get a role
        /// </summary>
        /// <remarks>
        /// Get a role from the provided role id.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Role GUID</param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> RolesRoleIdGetWithHttpInfo (string roleId);
        /// <summary>
        /// Patch a role
        /// </summary>
        /// <remarks>
        /// Partially update a role by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 4.9 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Role GUID</param>
        /// <param name="body"></param>
        /// <returns>Role</returns>
        Role RolesRoleIdPatchPut (string roleId, InlineObject57 body);

        /// <summary>
        /// Patch a role
        /// </summary>
        /// <remarks>
        /// Partially update a role by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 4.9 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Role GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Role</returns>
        ApiResponse<Role> RolesRoleIdPatchPutWithHttpInfo (string roleId, InlineObject57 body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get a role
        /// </summary>
        /// <remarks>
        /// Get a role from the provided role name.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Role Name</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> RolesNameRoleNameGetAsync (string roleName);

        /// <summary>
        /// Get a role
        /// </summary>
        /// <remarks>
        /// Get a role from the provided role name.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Role Name</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> RolesNameRoleNameGetAsyncWithHttpInfo (string roleName);
        /// <summary>
        /// Get a list of roles by name
        /// </summary>
        /// <remarks>
        /// Get a list of roles from their names.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of role names</param>
        /// <returns>Task of List&lt;Role&gt;</returns>
        System.Threading.Tasks.Task<List<Role>> RolesNamesPostAsync (List<string> body);

        /// <summary>
        /// Get a list of roles by name
        /// </summary>
        /// <remarks>
        /// Get a list of roles from their names.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of role names</param>
        /// <returns>Task of ApiResponse (List&lt;Role&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Role>>> RolesNamesPostAsyncWithHttpInfo (List<string> body);
        /// <summary>
        /// Get a role
        /// </summary>
        /// <remarks>
        /// Get a role from the provided role id.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Role GUID</param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> RolesRoleIdGetAsync (string roleId);

        /// <summary>
        /// Get a role
        /// </summary>
        /// <remarks>
        /// Get a role from the provided role id.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Role GUID</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> RolesRoleIdGetAsyncWithHttpInfo (string roleId);
        /// <summary>
        /// Patch a role
        /// </summary>
        /// <remarks>
        /// Partially update a role by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 4.9 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Role GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of Role</returns>
        System.Threading.Tasks.Task<Role> RolesRoleIdPatchPutAsync (string roleId, InlineObject57 body);

        /// <summary>
        /// Patch a role
        /// </summary>
        /// <remarks>
        /// Partially update a role by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 4.9 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Role GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Role)</returns>
        System.Threading.Tasks.Task<ApiResponse<Role>> RolesRoleIdPatchPutAsyncWithHttpInfo (string roleId, InlineObject57 body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRolesApi : IRolesApiSync, IRolesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RolesApi : IRolesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RolesApi(string basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RolesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RolesApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RolesApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get a role Get a role from the provided role name.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Role Name</param>
        /// <returns>Role</returns>
        public Role RolesNameRoleNameGet (string roleName)
        {
            ApiResponse<Role> localVarResponse = RolesNameRoleNameGetWithHttpInfo(roleName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a role Get a role from the provided role name.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Role Name</param>
        /// <returns>ApiResponse of Role</returns>
        public ApiResponse<Role> RolesNameRoleNameGetWithHttpInfo (string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RolesNameRoleNameGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (roleName != null)
                requestOptions.PathParameters.Add("role_name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Role >("/roles/name/{role_name}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RolesNameRoleNameGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a role Get a role from the provided role name.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Role Name</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> RolesNameRoleNameGetAsync (string roleName)
        {
            ApiResponse<Role> localVarResponse = await RolesNameRoleNameGetAsyncWithHttpInfo(roleName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a role Get a role from the provided role name.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleName">Role Name</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Role>> RolesNameRoleNameGetAsyncWithHttpInfo (string roleName)
        {
            // verify the required parameter 'roleName' is set
            if (roleName == null)
                throw new ApiException(400, "Missing required parameter 'roleName' when calling RolesApi->RolesNameRoleNameGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (roleName != null)
                requestOptions.PathParameters.Add("role_name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(roleName)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Role>("/roles/name/{role_name}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RolesNameRoleNameGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a list of roles by name Get a list of roles from their names.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of role names</param>
        /// <returns>List&lt;Role&gt;</returns>
        public List<Role> RolesNamesPost (List<string> body)
        {
            ApiResponse<List<Role>> localVarResponse = RolesNamesPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of roles by name Get a list of roles from their names.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of role names</param>
        /// <returns>ApiResponse of List&lt;Role&gt;</returns>
        public ApiResponse<List<Role>> RolesNamesPostWithHttpInfo (List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RolesApi->RolesNamesPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< List<Role> >("/roles/names", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RolesNamesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a list of roles by name Get a list of roles from their names.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of role names</param>
        /// <returns>Task of List&lt;Role&gt;</returns>
        public async System.Threading.Tasks.Task<List<Role>> RolesNamesPostAsync (List<string> body)
        {
            ApiResponse<List<Role>> localVarResponse = await RolesNamesPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of roles by name Get a list of roles from their names.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of role names</param>
        /// <returns>Task of ApiResponse (List&lt;Role&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Role>>> RolesNamesPostAsyncWithHttpInfo (List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RolesApi->RolesNamesPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<Role>>("/roles/names", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RolesNamesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a role Get a role from the provided role id.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Role GUID</param>
        /// <returns>Role</returns>
        public Role RolesRoleIdGet (string roleId)
        {
            ApiResponse<Role> localVarResponse = RolesRoleIdGetWithHttpInfo(roleId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a role Get a role from the provided role id.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Role GUID</param>
        /// <returns>ApiResponse of Role</returns>
        public ApiResponse<Role> RolesRoleIdGetWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->RolesRoleIdGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (roleId != null)
                requestOptions.PathParameters.Add("role_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(roleId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Role >("/roles/{role_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RolesRoleIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a role Get a role from the provided role id.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Role GUID</param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> RolesRoleIdGetAsync (string roleId)
        {
            ApiResponse<Role> localVarResponse = await RolesRoleIdGetAsyncWithHttpInfo(roleId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a role Get a role from the provided role id.  ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 4.9 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Role GUID</param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Role>> RolesRoleIdGetAsyncWithHttpInfo (string roleId)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->RolesRoleIdGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (roleId != null)
                requestOptions.PathParameters.Add("role_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(roleId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Role>("/roles/{role_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RolesRoleIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Patch a role Partially update a role by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 4.9 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Role GUID</param>
        /// <param name="body"></param>
        /// <returns>Role</returns>
        public Role RolesRoleIdPatchPut (string roleId, InlineObject57 body)
        {
            ApiResponse<Role> localVarResponse = RolesRoleIdPatchPutWithHttpInfo(roleId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch a role Partially update a role by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 4.9 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Role GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Role</returns>
        public ApiResponse<Role> RolesRoleIdPatchPutWithHttpInfo (string roleId, InlineObject57 body)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->RolesRoleIdPatchPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RolesApi->RolesRoleIdPatchPut");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (roleId != null)
                requestOptions.PathParameters.Add("role_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(roleId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< Role >("/roles/{role_id}/patch", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RolesRoleIdPatchPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Patch a role Partially update a role by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 4.9 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Role GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of Role</returns>
        public async System.Threading.Tasks.Task<Role> RolesRoleIdPatchPutAsync (string roleId, InlineObject57 body)
        {
            ApiResponse<Role> localVarResponse = await RolesRoleIdPatchPutAsyncWithHttpInfo(roleId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch a role Partially update a role by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 4.9 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="roleId">Role GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Role)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Role>> RolesRoleIdPatchPutAsyncWithHttpInfo (string roleId, InlineObject57 body)
        {
            // verify the required parameter 'roleId' is set
            if (roleId == null)
                throw new ApiException(400, "Missing required parameter 'roleId' when calling RolesApi->RolesRoleIdPatchPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling RolesApi->RolesRoleIdPatchPut");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (roleId != null)
                requestOptions.PathParameters.Add("role_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(roleId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Role>("/roles/{role_id}/patch", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("RolesRoleIdPatchPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
