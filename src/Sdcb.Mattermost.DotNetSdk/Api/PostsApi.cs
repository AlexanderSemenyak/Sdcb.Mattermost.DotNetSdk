/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPostsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get posts for a channel
        /// </summary>
        /// <remarks>
        /// Get a page of posts in a channel. Use the query parameters to modify the behaviour of this endpoint. The parameters &#x60;since&#x60;, &#x60;before&#x60; and &#x60;after&#x60; must not be used together. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The channel ID to get the posts for</param>
        /// <param name="page">The page to select (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of posts per page (optional, default to &quot;60&quot;)</param>
        /// <param name="since">Provide a non-zero value in Unix time milliseconds to select posts created after that time (optional)</param>
        /// <param name="before">A post id to select the posts that came before this one (optional)</param>
        /// <param name="after">A post id to select the posts that came after this one (optional)</param>
        /// <returns>PostList</returns>
        PostList ChannelsChannelIdPostsGet (string channelId, string page = null, string perPage = null, int? since = null, string before = null, string after = null);

        /// <summary>
        /// Get posts for a channel
        /// </summary>
        /// <remarks>
        /// Get a page of posts in a channel. Use the query parameters to modify the behaviour of this endpoint. The parameters &#x60;since&#x60;, &#x60;before&#x60; and &#x60;after&#x60; must not be used together. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The channel ID to get the posts for</param>
        /// <param name="page">The page to select (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of posts per page (optional, default to &quot;60&quot;)</param>
        /// <param name="since">Provide a non-zero value in Unix time milliseconds to select posts created after that time (optional)</param>
        /// <param name="before">A post id to select the posts that came before this one (optional)</param>
        /// <param name="after">A post id to select the posts that came after this one (optional)</param>
        /// <returns>ApiResponse of PostList</returns>
        ApiResponse<PostList> ChannelsChannelIdPostsGetWithHttpInfo (string channelId, string page = null, string perPage = null, int? since = null, string before = null, string after = null);
        /// <summary>
        /// Create a ephemeral post
        /// </summary>
        /// <remarks>
        /// Create a new ephemeral post in a channel. ##### Permissions Must have &#x60;create_post_ephemeral&#x60; permission (currently only given to system admin) 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ephemeralPost"></param>
        /// <returns>Post</returns>
        Post PostsEphemeralPost (InlineObject42 ephemeralPost);

        /// <summary>
        /// Create a ephemeral post
        /// </summary>
        /// <remarks>
        /// Create a new ephemeral post in a channel. ##### Permissions Must have &#x60;create_post_ephemeral&#x60; permission (currently only given to system admin) 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ephemeralPost"></param>
        /// <returns>ApiResponse of Post</returns>
        ApiResponse<Post> PostsEphemeralPostWithHttpInfo (InlineObject42 ephemeralPost);
        /// <summary>
        /// Create a post
        /// </summary>
        /// <remarks>
        /// Create a new post in a channel. To create the post as a comment on another post, provide &#x60;root_id&#x60;. ##### Permissions Must have &#x60;create_post&#x60; permission for the channel the post is being created in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="post"></param>
        /// <returns>Post</returns>
        Post PostsPost (InlineObject41 post);

        /// <summary>
        /// Create a post
        /// </summary>
        /// <remarks>
        /// Create a new post in a channel. To create the post as a comment on another post, provide &#x60;root_id&#x60;. ##### Permissions Must have &#x60;create_post&#x60; permission for the channel the post is being created in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="post"></param>
        /// <returns>ApiResponse of Post</returns>
        ApiResponse<Post> PostsPostWithHttpInfo (InlineObject41 post);
        /// <summary>
        /// Perform a post action
        /// </summary>
        /// <remarks>
        /// Perform a post action, which allows users to interact with integrations through posts. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <param name="actionId">Action GUID</param>
        /// <returns>StatusOK</returns>
        StatusOK PostsPostIdActionsActionIdPost (string postId, string actionId);

        /// <summary>
        /// Perform a post action
        /// </summary>
        /// <remarks>
        /// Perform a post action, which allows users to interact with integrations through posts. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <param name="actionId">Action GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> PostsPostIdActionsActionIdPostWithHttpInfo (string postId, string actionId);
        /// <summary>
        /// Delete a post
        /// </summary>
        /// <remarks>
        /// Soft deletes a post, by marking the post as deleted in the database. Soft deleted posts will not be returned in post queries. ##### Permissions Must be logged in as the user or have &#x60;delete_others_posts&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to delete</param>
        /// <returns>StatusOK</returns>
        StatusOK PostsPostIdDelete (string postId);

        /// <summary>
        /// Delete a post
        /// </summary>
        /// <remarks>
        /// Soft deletes a post, by marking the post as deleted in the database. Soft deleted posts will not be returned in post queries. ##### Permissions Must be logged in as the user or have &#x60;delete_others_posts&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to delete</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> PostsPostIdDeleteWithHttpInfo (string postId);
        /// <summary>
        /// Get file info for post
        /// </summary>
        /// <remarks>
        /// Gets a list of file information objects for the files attached to a post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post</param>
        /// <returns>List&lt;FileInfo&gt;</returns>
        List<FileInfo> PostsPostIdFilesInfoGet (string postId);

        /// <summary>
        /// Get file info for post
        /// </summary>
        /// <remarks>
        /// Gets a list of file information objects for the files attached to a post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post</param>
        /// <returns>ApiResponse of List&lt;FileInfo&gt;</returns>
        ApiResponse<List<FileInfo>> PostsPostIdFilesInfoGetWithHttpInfo (string postId);
        /// <summary>
        /// Get a post
        /// </summary>
        /// <remarks>
        /// Get a single post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to get</param>
        /// <returns>Post</returns>
        Post PostsPostIdGet (string postId);

        /// <summary>
        /// Get a post
        /// </summary>
        /// <remarks>
        /// Get a single post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to get</param>
        /// <returns>ApiResponse of Post</returns>
        ApiResponse<Post> PostsPostIdGetWithHttpInfo (string postId);
        /// <summary>
        /// Patch a post
        /// </summary>
        /// <remarks>
        /// Partially update a post by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;edit_post&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <param name="body"></param>
        /// <returns>Post</returns>
        Post PostsPostIdPatchPut (string postId, InlineObject44 body);

        /// <summary>
        /// Patch a post
        /// </summary>
        /// <remarks>
        /// Partially update a post by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;edit_post&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Post</returns>
        ApiResponse<Post> PostsPostIdPatchPutWithHttpInfo (string postId, InlineObject44 body);
        /// <summary>
        /// Pin a post to the channel
        /// </summary>
        /// <remarks>
        /// Pin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <returns>StatusOK</returns>
        StatusOK PostsPostIdPinPost (string postId);

        /// <summary>
        /// Pin a post to the channel
        /// </summary>
        /// <remarks>
        /// Pin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> PostsPostIdPinPostWithHttpInfo (string postId);
        /// <summary>
        /// Update a post
        /// </summary>
        /// <remarks>
        /// Update a post. Only the fields listed below are updatable, omitted fields will be treated as blank. ##### Permissions Must have &#x60;edit_post&#x60; permission for the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to update</param>
        /// <param name="body"></param>
        /// <returns>Post</returns>
        Post PostsPostIdPut (string postId, InlineObject43 body);

        /// <summary>
        /// Update a post
        /// </summary>
        /// <remarks>
        /// Update a post. Only the fields listed below are updatable, omitted fields will be treated as blank. ##### Permissions Must have &#x60;edit_post&#x60; permission for the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to update</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Post</returns>
        ApiResponse<Post> PostsPostIdPutWithHttpInfo (string postId, InlineObject43 body);
        /// <summary>
        /// Get a thread
        /// </summary>
        /// <remarks>
        /// Get a post and the rest of the posts in the same thread. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of a post in the thread</param>
        /// <returns>PostList</returns>
        PostList PostsPostIdThreadGet (string postId);

        /// <summary>
        /// Get a thread
        /// </summary>
        /// <remarks>
        /// Get a post and the rest of the posts in the same thread. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of a post in the thread</param>
        /// <returns>ApiResponse of PostList</returns>
        ApiResponse<PostList> PostsPostIdThreadGetWithHttpInfo (string postId);
        /// <summary>
        /// Unpin a post to the channel
        /// </summary>
        /// <remarks>
        /// Unpin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <returns>StatusOK</returns>
        StatusOK PostsPostIdUnpinPost (string postId);

        /// <summary>
        /// Unpin a post to the channel
        /// </summary>
        /// <remarks>
        /// Unpin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> PostsPostIdUnpinPostWithHttpInfo (string postId);
        /// <summary>
        /// Search for team posts
        /// </summary>
        /// <remarks>
        /// Search posts in the team and from the provided terms string. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>PostListWithSearchMatches</returns>
        PostListWithSearchMatches TeamsTeamIdPostsSearchPost (string teamId, InlineObject45 body);

        /// <summary>
        /// Search for team posts
        /// </summary>
        /// <remarks>
        /// Search posts in the team and from the provided terms string. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PostListWithSearchMatches</returns>
        ApiResponse<PostListWithSearchMatches> TeamsTeamIdPostsSearchPostWithHttpInfo (string teamId, InlineObject45 body);
        /// <summary>
        /// Get posts around last unread
        /// </summary>
        /// <remarks>
        /// Get the oldest unread post in the channel for the given user as well as the posts around it. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission, and must have &#x60;read_channel&#x60; permission for the channel. __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="channelId">The channel ID to get the posts for</param>
        /// <param name="limitBefore">Number of posts before the last unread posts. Maximum is 200 posts if limit is set greater than that. (optional, default to &quot;60&quot;)</param>
        /// <param name="limitAfter">Number of posts after and including the last unread post. Maximum is 200 posts if limit is set greater than that. (optional, default to &quot;60&quot;)</param>
        /// <returns>PostList</returns>
        PostList UsersUserIdChannelsChannelIdPostsUnreadGet (string userId, string channelId, string limitBefore = null, string limitAfter = null);

        /// <summary>
        /// Get posts around last unread
        /// </summary>
        /// <remarks>
        /// Get the oldest unread post in the channel for the given user as well as the posts around it. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission, and must have &#x60;read_channel&#x60; permission for the channel. __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="channelId">The channel ID to get the posts for</param>
        /// <param name="limitBefore">Number of posts before the last unread posts. Maximum is 200 posts if limit is set greater than that. (optional, default to &quot;60&quot;)</param>
        /// <param name="limitAfter">Number of posts after and including the last unread post. Maximum is 200 posts if limit is set greater than that. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of PostList</returns>
        ApiResponse<PostList> UsersUserIdChannelsChannelIdPostsUnreadGetWithHttpInfo (string userId, string channelId, string limitBefore = null, string limitAfter = null);
        /// <summary>
        /// Get a list of flagged posts
        /// </summary>
        /// <remarks>
        /// Get a page of flagged posts of a user provided user id string. Selects from a channel, team or all flagged posts by a user. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="teamId">Team ID (optional)</param>
        /// <param name="channelId">Channel ID (optional)</param>
        /// <param name="page">The page to select (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of posts per page (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;PostList&gt;</returns>
        List<PostList> UsersUserIdPostsFlaggedGet (string userId, string teamId = null, string channelId = null, string page = null, string perPage = null);

        /// <summary>
        /// Get a list of flagged posts
        /// </summary>
        /// <remarks>
        /// Get a page of flagged posts of a user provided user id string. Selects from a channel, team or all flagged posts by a user. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="teamId">Team ID (optional)</param>
        /// <param name="channelId">Channel ID (optional)</param>
        /// <param name="page">The page to select (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of posts per page (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;PostList&gt;</returns>
        ApiResponse<List<PostList>> UsersUserIdPostsFlaggedGetWithHttpInfo (string userId, string teamId = null, string channelId = null, string page = null, string perPage = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPostsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get posts for a channel
        /// </summary>
        /// <remarks>
        /// Get a page of posts in a channel. Use the query parameters to modify the behaviour of this endpoint. The parameters &#x60;since&#x60;, &#x60;before&#x60; and &#x60;after&#x60; must not be used together. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The channel ID to get the posts for</param>
        /// <param name="page">The page to select (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of posts per page (optional, default to &quot;60&quot;)</param>
        /// <param name="since">Provide a non-zero value in Unix time milliseconds to select posts created after that time (optional)</param>
        /// <param name="before">A post id to select the posts that came before this one (optional)</param>
        /// <param name="after">A post id to select the posts that came after this one (optional)</param>
        /// <returns>Task of PostList</returns>
        System.Threading.Tasks.Task<PostList> ChannelsChannelIdPostsGetAsync (string channelId, string page = null, string perPage = null, int? since = null, string before = null, string after = null);

        /// <summary>
        /// Get posts for a channel
        /// </summary>
        /// <remarks>
        /// Get a page of posts in a channel. Use the query parameters to modify the behaviour of this endpoint. The parameters &#x60;since&#x60;, &#x60;before&#x60; and &#x60;after&#x60; must not be used together. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The channel ID to get the posts for</param>
        /// <param name="page">The page to select (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of posts per page (optional, default to &quot;60&quot;)</param>
        /// <param name="since">Provide a non-zero value in Unix time milliseconds to select posts created after that time (optional)</param>
        /// <param name="before">A post id to select the posts that came before this one (optional)</param>
        /// <param name="after">A post id to select the posts that came after this one (optional)</param>
        /// <returns>Task of ApiResponse (PostList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostList>> ChannelsChannelIdPostsGetAsyncWithHttpInfo (string channelId, string page = null, string perPage = null, int? since = null, string before = null, string after = null);
        /// <summary>
        /// Create a ephemeral post
        /// </summary>
        /// <remarks>
        /// Create a new ephemeral post in a channel. ##### Permissions Must have &#x60;create_post_ephemeral&#x60; permission (currently only given to system admin) 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ephemeralPost"></param>
        /// <returns>Task of Post</returns>
        System.Threading.Tasks.Task<Post> PostsEphemeralPostAsync (InlineObject42 ephemeralPost);

        /// <summary>
        /// Create a ephemeral post
        /// </summary>
        /// <remarks>
        /// Create a new ephemeral post in a channel. ##### Permissions Must have &#x60;create_post_ephemeral&#x60; permission (currently only given to system admin) 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ephemeralPost"></param>
        /// <returns>Task of ApiResponse (Post)</returns>
        System.Threading.Tasks.Task<ApiResponse<Post>> PostsEphemeralPostAsyncWithHttpInfo (InlineObject42 ephemeralPost);
        /// <summary>
        /// Create a post
        /// </summary>
        /// <remarks>
        /// Create a new post in a channel. To create the post as a comment on another post, provide &#x60;root_id&#x60;. ##### Permissions Must have &#x60;create_post&#x60; permission for the channel the post is being created in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="post"></param>
        /// <returns>Task of Post</returns>
        System.Threading.Tasks.Task<Post> PostsPostAsync (InlineObject41 post);

        /// <summary>
        /// Create a post
        /// </summary>
        /// <remarks>
        /// Create a new post in a channel. To create the post as a comment on another post, provide &#x60;root_id&#x60;. ##### Permissions Must have &#x60;create_post&#x60; permission for the channel the post is being created in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="post"></param>
        /// <returns>Task of ApiResponse (Post)</returns>
        System.Threading.Tasks.Task<ApiResponse<Post>> PostsPostAsyncWithHttpInfo (InlineObject41 post);
        /// <summary>
        /// Perform a post action
        /// </summary>
        /// <remarks>
        /// Perform a post action, which allows users to interact with integrations through posts. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <param name="actionId">Action GUID</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> PostsPostIdActionsActionIdPostAsync (string postId, string actionId);

        /// <summary>
        /// Perform a post action
        /// </summary>
        /// <remarks>
        /// Perform a post action, which allows users to interact with integrations through posts. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <param name="actionId">Action GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> PostsPostIdActionsActionIdPostAsyncWithHttpInfo (string postId, string actionId);
        /// <summary>
        /// Delete a post
        /// </summary>
        /// <remarks>
        /// Soft deletes a post, by marking the post as deleted in the database. Soft deleted posts will not be returned in post queries. ##### Permissions Must be logged in as the user or have &#x60;delete_others_posts&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to delete</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> PostsPostIdDeleteAsync (string postId);

        /// <summary>
        /// Delete a post
        /// </summary>
        /// <remarks>
        /// Soft deletes a post, by marking the post as deleted in the database. Soft deleted posts will not be returned in post queries. ##### Permissions Must be logged in as the user or have &#x60;delete_others_posts&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to delete</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> PostsPostIdDeleteAsyncWithHttpInfo (string postId);
        /// <summary>
        /// Get file info for post
        /// </summary>
        /// <remarks>
        /// Gets a list of file information objects for the files attached to a post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post</param>
        /// <returns>Task of List&lt;FileInfo&gt;</returns>
        System.Threading.Tasks.Task<List<FileInfo>> PostsPostIdFilesInfoGetAsync (string postId);

        /// <summary>
        /// Get file info for post
        /// </summary>
        /// <remarks>
        /// Gets a list of file information objects for the files attached to a post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post</param>
        /// <returns>Task of ApiResponse (List&lt;FileInfo&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<FileInfo>>> PostsPostIdFilesInfoGetAsyncWithHttpInfo (string postId);
        /// <summary>
        /// Get a post
        /// </summary>
        /// <remarks>
        /// Get a single post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to get</param>
        /// <returns>Task of Post</returns>
        System.Threading.Tasks.Task<Post> PostsPostIdGetAsync (string postId);

        /// <summary>
        /// Get a post
        /// </summary>
        /// <remarks>
        /// Get a single post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to get</param>
        /// <returns>Task of ApiResponse (Post)</returns>
        System.Threading.Tasks.Task<ApiResponse<Post>> PostsPostIdGetAsyncWithHttpInfo (string postId);
        /// <summary>
        /// Patch a post
        /// </summary>
        /// <remarks>
        /// Partially update a post by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;edit_post&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of Post</returns>
        System.Threading.Tasks.Task<Post> PostsPostIdPatchPutAsync (string postId, InlineObject44 body);

        /// <summary>
        /// Patch a post
        /// </summary>
        /// <remarks>
        /// Partially update a post by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;edit_post&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Post)</returns>
        System.Threading.Tasks.Task<ApiResponse<Post>> PostsPostIdPatchPutAsyncWithHttpInfo (string postId, InlineObject44 body);
        /// <summary>
        /// Pin a post to the channel
        /// </summary>
        /// <remarks>
        /// Pin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> PostsPostIdPinPostAsync (string postId);

        /// <summary>
        /// Pin a post to the channel
        /// </summary>
        /// <remarks>
        /// Pin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> PostsPostIdPinPostAsyncWithHttpInfo (string postId);
        /// <summary>
        /// Update a post
        /// </summary>
        /// <remarks>
        /// Update a post. Only the fields listed below are updatable, omitted fields will be treated as blank. ##### Permissions Must have &#x60;edit_post&#x60; permission for the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to update</param>
        /// <param name="body"></param>
        /// <returns>Task of Post</returns>
        System.Threading.Tasks.Task<Post> PostsPostIdPutAsync (string postId, InlineObject43 body);

        /// <summary>
        /// Update a post
        /// </summary>
        /// <remarks>
        /// Update a post. Only the fields listed below are updatable, omitted fields will be treated as blank. ##### Permissions Must have &#x60;edit_post&#x60; permission for the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to update</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Post)</returns>
        System.Threading.Tasks.Task<ApiResponse<Post>> PostsPostIdPutAsyncWithHttpInfo (string postId, InlineObject43 body);
        /// <summary>
        /// Get a thread
        /// </summary>
        /// <remarks>
        /// Get a post and the rest of the posts in the same thread. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of a post in the thread</param>
        /// <returns>Task of PostList</returns>
        System.Threading.Tasks.Task<PostList> PostsPostIdThreadGetAsync (string postId);

        /// <summary>
        /// Get a thread
        /// </summary>
        /// <remarks>
        /// Get a post and the rest of the posts in the same thread. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of a post in the thread</param>
        /// <returns>Task of ApiResponse (PostList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostList>> PostsPostIdThreadGetAsyncWithHttpInfo (string postId);
        /// <summary>
        /// Unpin a post to the channel
        /// </summary>
        /// <remarks>
        /// Unpin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> PostsPostIdUnpinPostAsync (string postId);

        /// <summary>
        /// Unpin a post to the channel
        /// </summary>
        /// <remarks>
        /// Unpin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> PostsPostIdUnpinPostAsyncWithHttpInfo (string postId);
        /// <summary>
        /// Search for team posts
        /// </summary>
        /// <remarks>
        /// Search posts in the team and from the provided terms string. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of PostListWithSearchMatches</returns>
        System.Threading.Tasks.Task<PostListWithSearchMatches> TeamsTeamIdPostsSearchPostAsync (string teamId, InlineObject45 body);

        /// <summary>
        /// Search for team posts
        /// </summary>
        /// <remarks>
        /// Search posts in the team and from the provided terms string. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PostListWithSearchMatches)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostListWithSearchMatches>> TeamsTeamIdPostsSearchPostAsyncWithHttpInfo (string teamId, InlineObject45 body);
        /// <summary>
        /// Get posts around last unread
        /// </summary>
        /// <remarks>
        /// Get the oldest unread post in the channel for the given user as well as the posts around it. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission, and must have &#x60;read_channel&#x60; permission for the channel. __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="channelId">The channel ID to get the posts for</param>
        /// <param name="limitBefore">Number of posts before the last unread posts. Maximum is 200 posts if limit is set greater than that. (optional, default to &quot;60&quot;)</param>
        /// <param name="limitAfter">Number of posts after and including the last unread post. Maximum is 200 posts if limit is set greater than that. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of PostList</returns>
        System.Threading.Tasks.Task<PostList> UsersUserIdChannelsChannelIdPostsUnreadGetAsync (string userId, string channelId, string limitBefore = null, string limitAfter = null);

        /// <summary>
        /// Get posts around last unread
        /// </summary>
        /// <remarks>
        /// Get the oldest unread post in the channel for the given user as well as the posts around it. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission, and must have &#x60;read_channel&#x60; permission for the channel. __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="channelId">The channel ID to get the posts for</param>
        /// <param name="limitBefore">Number of posts before the last unread posts. Maximum is 200 posts if limit is set greater than that. (optional, default to &quot;60&quot;)</param>
        /// <param name="limitAfter">Number of posts after and including the last unread post. Maximum is 200 posts if limit is set greater than that. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (PostList)</returns>
        System.Threading.Tasks.Task<ApiResponse<PostList>> UsersUserIdChannelsChannelIdPostsUnreadGetAsyncWithHttpInfo (string userId, string channelId, string limitBefore = null, string limitAfter = null);
        /// <summary>
        /// Get a list of flagged posts
        /// </summary>
        /// <remarks>
        /// Get a page of flagged posts of a user provided user id string. Selects from a channel, team or all flagged posts by a user. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="teamId">Team ID (optional)</param>
        /// <param name="channelId">Channel ID (optional)</param>
        /// <param name="page">The page to select (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of posts per page (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;PostList&gt;</returns>
        System.Threading.Tasks.Task<List<PostList>> UsersUserIdPostsFlaggedGetAsync (string userId, string teamId = null, string channelId = null, string page = null, string perPage = null);

        /// <summary>
        /// Get a list of flagged posts
        /// </summary>
        /// <remarks>
        /// Get a page of flagged posts of a user provided user id string. Selects from a channel, team or all flagged posts by a user. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="teamId">Team ID (optional)</param>
        /// <param name="channelId">Channel ID (optional)</param>
        /// <param name="page">The page to select (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of posts per page (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;PostList&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PostList>>> UsersUserIdPostsFlaggedGetAsyncWithHttpInfo (string userId, string teamId = null, string channelId = null, string page = null, string perPage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPostsApi : IPostsApiSync, IPostsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PostsApi : IPostsApi
    {
        private Sdcb.Mattermost.DotNetSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PostsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PostsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PostsApi(String basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Sdcb.Mattermost.DotNetSdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PostsApi(Sdcb.Mattermost.DotNetSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PostsApi(Sdcb.Mattermost.DotNetSdk.Client.ISynchronousClient client,Sdcb.Mattermost.DotNetSdk.Client.IAsynchronousClient asyncClient, Sdcb.Mattermost.DotNetSdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sdcb.Mattermost.DotNetSdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get posts for a channel Get a page of posts in a channel. Use the query parameters to modify the behaviour of this endpoint. The parameters &#x60;since&#x60;, &#x60;before&#x60; and &#x60;after&#x60; must not be used together. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The channel ID to get the posts for</param>
        /// <param name="page">The page to select (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of posts per page (optional, default to &quot;60&quot;)</param>
        /// <param name="since">Provide a non-zero value in Unix time milliseconds to select posts created after that time (optional)</param>
        /// <param name="before">A post id to select the posts that came before this one (optional)</param>
        /// <param name="after">A post id to select the posts that came after this one (optional)</param>
        /// <returns>PostList</returns>
        public PostList ChannelsChannelIdPostsGet (string channelId, string page = null, string perPage = null, int? since = null, string before = null, string after = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<PostList> localVarResponse = ChannelsChannelIdPostsGetWithHttpInfo(channelId, page, perPage, since, before, after);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get posts for a channel Get a page of posts in a channel. Use the query parameters to modify the behaviour of this endpoint. The parameters &#x60;since&#x60;, &#x60;before&#x60; and &#x60;after&#x60; must not be used together. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The channel ID to get the posts for</param>
        /// <param name="page">The page to select (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of posts per page (optional, default to &quot;60&quot;)</param>
        /// <param name="since">Provide a non-zero value in Unix time milliseconds to select posts created after that time (optional)</param>
        /// <param name="before">A post id to select the posts that came before this one (optional)</param>
        /// <param name="after">A post id to select the posts that came after this one (optional)</param>
        /// <returns>ApiResponse of PostList</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< PostList > ChannelsChannelIdPostsGetWithHttpInfo (string channelId, string page = null, string perPage = null, int? since = null, string before = null, string after = null)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling PostsApi->ChannelsChannelIdPostsGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (since != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "since", since))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (before != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "before", before))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (after != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "after", after))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< PostList >("/channels/{channel_id}/posts", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdPostsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get posts for a channel Get a page of posts in a channel. Use the query parameters to modify the behaviour of this endpoint. The parameters &#x60;since&#x60;, &#x60;before&#x60; and &#x60;after&#x60; must not be used together. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The channel ID to get the posts for</param>
        /// <param name="page">The page to select (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of posts per page (optional, default to &quot;60&quot;)</param>
        /// <param name="since">Provide a non-zero value in Unix time milliseconds to select posts created after that time (optional)</param>
        /// <param name="before">A post id to select the posts that came before this one (optional)</param>
        /// <param name="after">A post id to select the posts that came after this one (optional)</param>
        /// <returns>Task of PostList</returns>
        public async System.Threading.Tasks.Task<PostList> ChannelsChannelIdPostsGetAsync (string channelId, string page = null, string perPage = null, int? since = null, string before = null, string after = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<PostList> localVarResponse = await ChannelsChannelIdPostsGetAsyncWithHttpInfo(channelId, page, perPage, since, before, after);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get posts for a channel Get a page of posts in a channel. Use the query parameters to modify the behaviour of this endpoint. The parameters &#x60;since&#x60;, &#x60;before&#x60; and &#x60;after&#x60; must not be used together. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="channelId">The channel ID to get the posts for</param>
        /// <param name="page">The page to select (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of posts per page (optional, default to &quot;60&quot;)</param>
        /// <param name="since">Provide a non-zero value in Unix time milliseconds to select posts created after that time (optional)</param>
        /// <param name="before">A post id to select the posts that came before this one (optional)</param>
        /// <param name="after">A post id to select the posts that came after this one (optional)</param>
        /// <returns>Task of ApiResponse (PostList)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<PostList>> ChannelsChannelIdPostsGetAsyncWithHttpInfo (string channelId, string page = null, string perPage = null, int? since = null, string before = null, string after = null)
        {
            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling PostsApi->ChannelsChannelIdPostsGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (since != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "since", since))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (before != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "before", before))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (after != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "after", after))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PostList>("/channels/{channel_id}/posts", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ChannelsChannelIdPostsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a ephemeral post Create a new ephemeral post in a channel. ##### Permissions Must have &#x60;create_post_ephemeral&#x60; permission (currently only given to system admin) 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ephemeralPost"></param>
        /// <returns>Post</returns>
        public Post PostsEphemeralPost (InlineObject42 ephemeralPost)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Post> localVarResponse = PostsEphemeralPostWithHttpInfo(ephemeralPost);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a ephemeral post Create a new ephemeral post in a channel. ##### Permissions Must have &#x60;create_post_ephemeral&#x60; permission (currently only given to system admin) 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ephemeralPost"></param>
        /// <returns>ApiResponse of Post</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Post > PostsEphemeralPostWithHttpInfo (InlineObject42 ephemeralPost)
        {
            // verify the required parameter 'ephemeralPost' is set
            if (ephemeralPost == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'ephemeralPost' when calling PostsApi->PostsEphemeralPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = ephemeralPost;


            // make the HTTP request

            var response = this.Client.Post< Post >("/posts/ephemeral", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsEphemeralPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a ephemeral post Create a new ephemeral post in a channel. ##### Permissions Must have &#x60;create_post_ephemeral&#x60; permission (currently only given to system admin) 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ephemeralPost"></param>
        /// <returns>Task of Post</returns>
        public async System.Threading.Tasks.Task<Post> PostsEphemeralPostAsync (InlineObject42 ephemeralPost)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Post> localVarResponse = await PostsEphemeralPostAsyncWithHttpInfo(ephemeralPost);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a ephemeral post Create a new ephemeral post in a channel. ##### Permissions Must have &#x60;create_post_ephemeral&#x60; permission (currently only given to system admin) 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="ephemeralPost"></param>
        /// <returns>Task of ApiResponse (Post)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Post>> PostsEphemeralPostAsyncWithHttpInfo (InlineObject42 ephemeralPost)
        {
            // verify the required parameter 'ephemeralPost' is set
            if (ephemeralPost == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'ephemeralPost' when calling PostsApi->PostsEphemeralPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = ephemeralPost;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Post>("/posts/ephemeral", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsEphemeralPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a post Create a new post in a channel. To create the post as a comment on another post, provide &#x60;root_id&#x60;. ##### Permissions Must have &#x60;create_post&#x60; permission for the channel the post is being created in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="post"></param>
        /// <returns>Post</returns>
        public Post PostsPost (InlineObject41 post)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Post> localVarResponse = PostsPostWithHttpInfo(post);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a post Create a new post in a channel. To create the post as a comment on another post, provide &#x60;root_id&#x60;. ##### Permissions Must have &#x60;create_post&#x60; permission for the channel the post is being created in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="post"></param>
        /// <returns>ApiResponse of Post</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Post > PostsPostWithHttpInfo (InlineObject41 post)
        {
            // verify the required parameter 'post' is set
            if (post == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'post' when calling PostsApi->PostsPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = post;


            // make the HTTP request

            var response = this.Client.Post< Post >("/posts", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a post Create a new post in a channel. To create the post as a comment on another post, provide &#x60;root_id&#x60;. ##### Permissions Must have &#x60;create_post&#x60; permission for the channel the post is being created in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="post"></param>
        /// <returns>Task of Post</returns>
        public async System.Threading.Tasks.Task<Post> PostsPostAsync (InlineObject41 post)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Post> localVarResponse = await PostsPostAsyncWithHttpInfo(post);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a post Create a new post in a channel. To create the post as a comment on another post, provide &#x60;root_id&#x60;. ##### Permissions Must have &#x60;create_post&#x60; permission for the channel the post is being created in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="post"></param>
        /// <returns>Task of ApiResponse (Post)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Post>> PostsPostAsyncWithHttpInfo (InlineObject41 post)
        {
            // verify the required parameter 'post' is set
            if (post == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'post' when calling PostsApi->PostsPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = post;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Post>("/posts", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Perform a post action Perform a post action, which allows users to interact with integrations through posts. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <param name="actionId">Action GUID</param>
        /// <returns>StatusOK</returns>
        public StatusOK PostsPostIdActionsActionIdPost (string postId, string actionId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = PostsPostIdActionsActionIdPostWithHttpInfo(postId, actionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform a post action Perform a post action, which allows users to interact with integrations through posts. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <param name="actionId">Action GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > PostsPostIdActionsActionIdPostWithHttpInfo (string postId, string actionId)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdActionsActionIdPost");

            // verify the required parameter 'actionId' is set
            if (actionId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'actionId' when calling PostsApi->PostsPostIdActionsActionIdPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter
            if (actionId != null)
                requestOptions.PathParameters.Add("action_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(actionId)); // path parameter


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/posts/{post_id}/actions/{action_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdActionsActionIdPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Perform a post action Perform a post action, which allows users to interact with integrations through posts. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <param name="actionId">Action GUID</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> PostsPostIdActionsActionIdPostAsync (string postId, string actionId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await PostsPostIdActionsActionIdPostAsyncWithHttpInfo(postId, actionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform a post action Perform a post action, which allows users to interact with integrations through posts. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <param name="actionId">Action GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> PostsPostIdActionsActionIdPostAsyncWithHttpInfo (string postId, string actionId)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdActionsActionIdPost");

            // verify the required parameter 'actionId' is set
            if (actionId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'actionId' when calling PostsApi->PostsPostIdActionsActionIdPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter
            if (actionId != null)
                requestOptions.PathParameters.Add("action_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(actionId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/posts/{post_id}/actions/{action_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdActionsActionIdPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete a post Soft deletes a post, by marking the post as deleted in the database. Soft deleted posts will not be returned in post queries. ##### Permissions Must be logged in as the user or have &#x60;delete_others_posts&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to delete</param>
        /// <returns>StatusOK</returns>
        public StatusOK PostsPostIdDelete (string postId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = PostsPostIdDeleteWithHttpInfo(postId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a post Soft deletes a post, by marking the post as deleted in the database. Soft deleted posts will not be returned in post queries. ##### Permissions Must be logged in as the user or have &#x60;delete_others_posts&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to delete</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > PostsPostIdDeleteWithHttpInfo (string postId)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdDelete");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/posts/{post_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete a post Soft deletes a post, by marking the post as deleted in the database. Soft deleted posts will not be returned in post queries. ##### Permissions Must be logged in as the user or have &#x60;delete_others_posts&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to delete</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> PostsPostIdDeleteAsync (string postId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await PostsPostIdDeleteAsyncWithHttpInfo(postId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a post Soft deletes a post, by marking the post as deleted in the database. Soft deleted posts will not be returned in post queries. ##### Permissions Must be logged in as the user or have &#x60;delete_others_posts&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to delete</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> PostsPostIdDeleteAsyncWithHttpInfo (string postId)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdDelete");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/posts/{post_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get file info for post Gets a list of file information objects for the files attached to a post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post</param>
        /// <returns>List&lt;FileInfo&gt;</returns>
        public List<FileInfo> PostsPostIdFilesInfoGet (string postId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<FileInfo>> localVarResponse = PostsPostIdFilesInfoGetWithHttpInfo(postId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get file info for post Gets a list of file information objects for the files attached to a post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post</param>
        /// <returns>ApiResponse of List&lt;FileInfo&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<FileInfo> > PostsPostIdFilesInfoGetWithHttpInfo (string postId)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdFilesInfoGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< List<FileInfo> >("/posts/{post_id}/files/info", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdFilesInfoGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get file info for post Gets a list of file information objects for the files attached to a post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post</param>
        /// <returns>Task of List&lt;FileInfo&gt;</returns>
        public async System.Threading.Tasks.Task<List<FileInfo>> PostsPostIdFilesInfoGetAsync (string postId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<FileInfo>> localVarResponse = await PostsPostIdFilesInfoGetAsyncWithHttpInfo(postId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get file info for post Gets a list of file information objects for the files attached to a post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post</param>
        /// <returns>Task of ApiResponse (List&lt;FileInfo&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<FileInfo>>> PostsPostIdFilesInfoGetAsyncWithHttpInfo (string postId)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdFilesInfoGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<FileInfo>>("/posts/{post_id}/files/info", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdFilesInfoGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a post Get a single post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to get</param>
        /// <returns>Post</returns>
        public Post PostsPostIdGet (string postId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Post> localVarResponse = PostsPostIdGetWithHttpInfo(postId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a post Get a single post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to get</param>
        /// <returns>ApiResponse of Post</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Post > PostsPostIdGetWithHttpInfo (string postId)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Post >("/posts/{post_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a post Get a single post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to get</param>
        /// <returns>Task of Post</returns>
        public async System.Threading.Tasks.Task<Post> PostsPostIdGetAsync (string postId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Post> localVarResponse = await PostsPostIdGetAsyncWithHttpInfo(postId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a post Get a single post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to get</param>
        /// <returns>Task of ApiResponse (Post)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Post>> PostsPostIdGetAsyncWithHttpInfo (string postId)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Post>("/posts/{post_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Patch a post Partially update a post by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;edit_post&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <param name="body"></param>
        /// <returns>Post</returns>
        public Post PostsPostIdPatchPut (string postId, InlineObject44 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Post> localVarResponse = PostsPostIdPatchPutWithHttpInfo(postId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch a post Partially update a post by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;edit_post&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Post</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Post > PostsPostIdPatchPutWithHttpInfo (string postId, InlineObject44 body)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdPatchPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling PostsApi->PostsPostIdPatchPut");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< Post >("/posts/{post_id}/patch", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdPatchPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Patch a post Partially update a post by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;edit_post&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of Post</returns>
        public async System.Threading.Tasks.Task<Post> PostsPostIdPatchPutAsync (string postId, InlineObject44 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Post> localVarResponse = await PostsPostIdPatchPutAsyncWithHttpInfo(postId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch a post Partially update a post by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must have the &#x60;edit_post&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Post)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Post>> PostsPostIdPatchPutAsyncWithHttpInfo (string postId, InlineObject44 body)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdPatchPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling PostsApi->PostsPostIdPatchPut");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Post>("/posts/{post_id}/patch", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdPatchPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Pin a post to the channel Pin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <returns>StatusOK</returns>
        public StatusOK PostsPostIdPinPost (string postId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = PostsPostIdPinPostWithHttpInfo(postId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Pin a post to the channel Pin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > PostsPostIdPinPostWithHttpInfo (string postId)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdPinPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/posts/{post_id}/pin", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdPinPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Pin a post to the channel Pin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> PostsPostIdPinPostAsync (string postId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await PostsPostIdPinPostAsyncWithHttpInfo(postId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Pin a post to the channel Pin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> PostsPostIdPinPostAsyncWithHttpInfo (string postId)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdPinPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/posts/{post_id}/pin", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdPinPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a post Update a post. Only the fields listed below are updatable, omitted fields will be treated as blank. ##### Permissions Must have &#x60;edit_post&#x60; permission for the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to update</param>
        /// <param name="body"></param>
        /// <returns>Post</returns>
        public Post PostsPostIdPut (string postId, InlineObject43 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Post> localVarResponse = PostsPostIdPutWithHttpInfo(postId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a post Update a post. Only the fields listed below are updatable, omitted fields will be treated as blank. ##### Permissions Must have &#x60;edit_post&#x60; permission for the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to update</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Post</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Post > PostsPostIdPutWithHttpInfo (string postId, InlineObject43 body)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling PostsApi->PostsPostIdPut");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< Post >("/posts/{post_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a post Update a post. Only the fields listed below are updatable, omitted fields will be treated as blank. ##### Permissions Must have &#x60;edit_post&#x60; permission for the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to update</param>
        /// <param name="body"></param>
        /// <returns>Task of Post</returns>
        public async System.Threading.Tasks.Task<Post> PostsPostIdPutAsync (string postId, InlineObject43 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Post> localVarResponse = await PostsPostIdPutAsyncWithHttpInfo(postId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a post Update a post. Only the fields listed below are updatable, omitted fields will be treated as blank. ##### Permissions Must have &#x60;edit_post&#x60; permission for the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of the post to update</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Post)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Post>> PostsPostIdPutAsyncWithHttpInfo (string postId, InlineObject43 body)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling PostsApi->PostsPostIdPut");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Post>("/posts/{post_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a thread Get a post and the rest of the posts in the same thread. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of a post in the thread</param>
        /// <returns>PostList</returns>
        public PostList PostsPostIdThreadGet (string postId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<PostList> localVarResponse = PostsPostIdThreadGetWithHttpInfo(postId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a thread Get a post and the rest of the posts in the same thread. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of a post in the thread</param>
        /// <returns>ApiResponse of PostList</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< PostList > PostsPostIdThreadGetWithHttpInfo (string postId)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdThreadGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< PostList >("/posts/{post_id}/thread", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdThreadGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a thread Get a post and the rest of the posts in the same thread. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of a post in the thread</param>
        /// <returns>Task of PostList</returns>
        public async System.Threading.Tasks.Task<PostList> PostsPostIdThreadGetAsync (string postId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<PostList> localVarResponse = await PostsPostIdThreadGetAsyncWithHttpInfo(postId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a thread Get a post and the rest of the posts in the same thread. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in or if the channel is public, have the &#x60;read_public_channels&#x60; permission for the team. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of a post in the thread</param>
        /// <returns>Task of ApiResponse (PostList)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<PostList>> PostsPostIdThreadGetAsyncWithHttpInfo (string postId)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdThreadGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PostList>("/posts/{post_id}/thread", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdThreadGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Unpin a post to the channel Unpin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <returns>StatusOK</returns>
        public StatusOK PostsPostIdUnpinPost (string postId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = PostsPostIdUnpinPostWithHttpInfo(postId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Unpin a post to the channel Unpin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > PostsPostIdUnpinPostWithHttpInfo (string postId)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdUnpinPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/posts/{post_id}/unpin", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdUnpinPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Unpin a post to the channel Unpin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> PostsPostIdUnpinPostAsync (string postId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await PostsPostIdUnpinPostAsyncWithHttpInfo(postId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Unpin a post to the channel Unpin a post to a channel it is in based from the provided post id string. ##### Permissions Must be authenticated and have the &#x60;read_channel&#x60; permission to the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">Post GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> PostsPostIdUnpinPostAsyncWithHttpInfo (string postId)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling PostsApi->PostsPostIdUnpinPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/posts/{post_id}/unpin", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdUnpinPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Search for team posts Search posts in the team and from the provided terms string. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>PostListWithSearchMatches</returns>
        public PostListWithSearchMatches TeamsTeamIdPostsSearchPost (string teamId, InlineObject45 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<PostListWithSearchMatches> localVarResponse = TeamsTeamIdPostsSearchPostWithHttpInfo(teamId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search for team posts Search posts in the team and from the provided terms string. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of PostListWithSearchMatches</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< PostListWithSearchMatches > TeamsTeamIdPostsSearchPostWithHttpInfo (string teamId, InlineObject45 body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling PostsApi->TeamsTeamIdPostsSearchPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling PostsApi->TeamsTeamIdPostsSearchPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< PostListWithSearchMatches >("/teams/{team_id}/posts/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdPostsSearchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Search for team posts Search posts in the team and from the provided terms string. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of PostListWithSearchMatches</returns>
        public async System.Threading.Tasks.Task<PostListWithSearchMatches> TeamsTeamIdPostsSearchPostAsync (string teamId, InlineObject45 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<PostListWithSearchMatches> localVarResponse = await TeamsTeamIdPostsSearchPostAsyncWithHttpInfo(teamId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search for team posts Search posts in the team and from the provided terms string. ##### Permissions Must be authenticated and have the &#x60;view_team&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="teamId">Team GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (PostListWithSearchMatches)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<PostListWithSearchMatches>> TeamsTeamIdPostsSearchPostAsyncWithHttpInfo (string teamId, InlineObject45 body)
        {
            // verify the required parameter 'teamId' is set
            if (teamId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'teamId' when calling PostsApi->TeamsTeamIdPostsSearchPost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling PostsApi->TeamsTeamIdPostsSearchPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
                requestOptions.PathParameters.Add("team_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(teamId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<PostListWithSearchMatches>("/teams/{team_id}/posts/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("TeamsTeamIdPostsSearchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get posts around last unread Get the oldest unread post in the channel for the given user as well as the posts around it. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission, and must have &#x60;read_channel&#x60; permission for the channel. __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="channelId">The channel ID to get the posts for</param>
        /// <param name="limitBefore">Number of posts before the last unread posts. Maximum is 200 posts if limit is set greater than that. (optional, default to &quot;60&quot;)</param>
        /// <param name="limitAfter">Number of posts after and including the last unread post. Maximum is 200 posts if limit is set greater than that. (optional, default to &quot;60&quot;)</param>
        /// <returns>PostList</returns>
        public PostList UsersUserIdChannelsChannelIdPostsUnreadGet (string userId, string channelId, string limitBefore = null, string limitAfter = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<PostList> localVarResponse = UsersUserIdChannelsChannelIdPostsUnreadGetWithHttpInfo(userId, channelId, limitBefore, limitAfter);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get posts around last unread Get the oldest unread post in the channel for the given user as well as the posts around it. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission, and must have &#x60;read_channel&#x60; permission for the channel. __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="channelId">The channel ID to get the posts for</param>
        /// <param name="limitBefore">Number of posts before the last unread posts. Maximum is 200 posts if limit is set greater than that. (optional, default to &quot;60&quot;)</param>
        /// <param name="limitAfter">Number of posts after and including the last unread post. Maximum is 200 posts if limit is set greater than that. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of PostList</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< PostList > UsersUserIdChannelsChannelIdPostsUnreadGetWithHttpInfo (string userId, string channelId, string limitBefore = null, string limitAfter = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling PostsApi->UsersUserIdChannelsChannelIdPostsUnreadGet");

            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling PostsApi->UsersUserIdChannelsChannelIdPostsUnreadGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (limitBefore != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "limit_before", limitBefore))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limitAfter != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "limit_after", limitAfter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< PostList >("/users/{user_id}/channels/{channel_id}/posts/unread", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdChannelsChannelIdPostsUnreadGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get posts around last unread Get the oldest unread post in the channel for the given user as well as the posts around it. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission, and must have &#x60;read_channel&#x60; permission for the channel. __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="channelId">The channel ID to get the posts for</param>
        /// <param name="limitBefore">Number of posts before the last unread posts. Maximum is 200 posts if limit is set greater than that. (optional, default to &quot;60&quot;)</param>
        /// <param name="limitAfter">Number of posts after and including the last unread post. Maximum is 200 posts if limit is set greater than that. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of PostList</returns>
        public async System.Threading.Tasks.Task<PostList> UsersUserIdChannelsChannelIdPostsUnreadGetAsync (string userId, string channelId, string limitBefore = null, string limitAfter = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<PostList> localVarResponse = await UsersUserIdChannelsChannelIdPostsUnreadGetAsyncWithHttpInfo(userId, channelId, limitBefore, limitAfter);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get posts around last unread Get the oldest unread post in the channel for the given user as well as the posts around it. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission, and must have &#x60;read_channel&#x60; permission for the channel. __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="channelId">The channel ID to get the posts for</param>
        /// <param name="limitBefore">Number of posts before the last unread posts. Maximum is 200 posts if limit is set greater than that. (optional, default to &quot;60&quot;)</param>
        /// <param name="limitAfter">Number of posts after and including the last unread post. Maximum is 200 posts if limit is set greater than that. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (PostList)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<PostList>> UsersUserIdChannelsChannelIdPostsUnreadGetAsyncWithHttpInfo (string userId, string channelId, string limitBefore = null, string limitAfter = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling PostsApi->UsersUserIdChannelsChannelIdPostsUnreadGet");

            // verify the required parameter 'channelId' is set
            if (channelId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'channelId' when calling PostsApi->UsersUserIdChannelsChannelIdPostsUnreadGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (channelId != null)
                requestOptions.PathParameters.Add("channel_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(channelId)); // path parameter
            if (limitBefore != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "limit_before", limitBefore))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limitAfter != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "limit_after", limitAfter))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<PostList>("/users/{user_id}/channels/{channel_id}/posts/unread", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdChannelsChannelIdPostsUnreadGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a list of flagged posts Get a page of flagged posts of a user provided user id string. Selects from a channel, team or all flagged posts by a user. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="teamId">Team ID (optional)</param>
        /// <param name="channelId">Channel ID (optional)</param>
        /// <param name="page">The page to select (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of posts per page (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;PostList&gt;</returns>
        public List<PostList> UsersUserIdPostsFlaggedGet (string userId, string teamId = null, string channelId = null, string page = null, string perPage = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<PostList>> localVarResponse = UsersUserIdPostsFlaggedGetWithHttpInfo(userId, teamId, channelId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of flagged posts Get a page of flagged posts of a user provided user id string. Selects from a channel, team or all flagged posts by a user. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="teamId">Team ID (optional)</param>
        /// <param name="channelId">Channel ID (optional)</param>
        /// <param name="page">The page to select (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of posts per page (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;PostList&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<PostList> > UsersUserIdPostsFlaggedGetWithHttpInfo (string userId, string teamId = null, string channelId = null, string page = null, string perPage = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling PostsApi->UsersUserIdPostsFlaggedGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (teamId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "team_id", teamId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (channelId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "channel_id", channelId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<PostList> >("/users/{user_id}/posts/flagged", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPostsFlaggedGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a list of flagged posts Get a page of flagged posts of a user provided user id string. Selects from a channel, team or all flagged posts by a user. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="teamId">Team ID (optional)</param>
        /// <param name="channelId">Channel ID (optional)</param>
        /// <param name="page">The page to select (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of posts per page (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;PostList&gt;</returns>
        public async System.Threading.Tasks.Task<List<PostList>> UsersUserIdPostsFlaggedGetAsync (string userId, string teamId = null, string channelId = null, string page = null, string perPage = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<PostList>> localVarResponse = await UsersUserIdPostsFlaggedGetAsyncWithHttpInfo(userId, teamId, channelId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of flagged posts Get a page of flagged posts of a user provided user id string. Selects from a channel, team or all flagged posts by a user. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="teamId">Team ID (optional)</param>
        /// <param name="channelId">Channel ID (optional)</param>
        /// <param name="page">The page to select (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of posts per page (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;PostList&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<PostList>>> UsersUserIdPostsFlaggedGetAsyncWithHttpInfo (string userId, string teamId = null, string channelId = null, string page = null, string perPage = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling PostsApi->UsersUserIdPostsFlaggedGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (teamId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "team_id", teamId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (channelId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "channel_id", channelId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<PostList>>("/users/{user_id}/posts/flagged", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPostsFlaggedGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
