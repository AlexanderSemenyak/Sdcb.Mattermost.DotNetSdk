/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPluginsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get plugins
        /// </summary>
        /// <remarks>
        /// Get a list of inactive and a list of active plugin manifests. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2009</returns>
        InlineResponse2009 PluginsGet ();

        /// <summary>
        /// Get plugins
        /// </summary>
        /// <remarks>
        /// Get a list of inactive and a list of active plugin manifests. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        ApiResponse<InlineResponse2009> PluginsGetWithHttpInfo ();
        /// <summary>
        /// Remove plugin
        /// </summary>
        /// <remarks>
        /// Remove the plugin with the provided ID from the server. All plugin files are deleted. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>StatusOK</returns>
        StatusOK PluginsPluginIdDelete (string pluginId);

        /// <summary>
        /// Remove plugin
        /// </summary>
        /// <remarks>
        /// Remove the plugin with the provided ID from the server. All plugin files are deleted. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> PluginsPluginIdDeleteWithHttpInfo (string pluginId);
        /// <summary>
        /// Disable plugin
        /// </summary>
        /// <remarks>
        /// Disable a previously enabled plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>StatusOK</returns>
        StatusOK PluginsPluginIdDisablePost (string pluginId);

        /// <summary>
        /// Disable plugin
        /// </summary>
        /// <remarks>
        /// Disable a previously enabled plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> PluginsPluginIdDisablePostWithHttpInfo (string pluginId);
        /// <summary>
        /// Enable plugin
        /// </summary>
        /// <remarks>
        /// Enable a previously uploaded plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>StatusOK</returns>
        StatusOK PluginsPluginIdEnablePost (string pluginId);

        /// <summary>
        /// Enable plugin
        /// </summary>
        /// <remarks>
        /// Enable a previously uploaded plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> PluginsPluginIdEnablePostWithHttpInfo (string pluginId);
        /// <summary>
        /// Upload plugin
        /// </summary>
        /// <remarks>
        /// Upload a plugin compressed in a .tar.gz file. Plugins and plugin uploads must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="plugin">The plugin image to be uploaded</param>
        /// <param name="force">Set to &#39;true&#39; to overwrite a previously installed plugin with the same ID, if any (optional)</param>
        /// <returns>StatusOK</returns>
        StatusOK PluginsPost (System.IO.Stream plugin, string force = null);

        /// <summary>
        /// Upload plugin
        /// </summary>
        /// <remarks>
        /// Upload a plugin compressed in a .tar.gz file. Plugins and plugin uploads must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="plugin">The plugin image to be uploaded</param>
        /// <param name="force">Set to &#39;true&#39; to overwrite a previously installed plugin with the same ID, if any (optional)</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> PluginsPostWithHttpInfo (System.IO.Stream plugin, string force = null);
        /// <summary>
        /// Get webapp plugins
        /// </summary>
        /// <remarks>
        /// Get a list of web app plugins installed and activated on the server.  ##### Permissions No permissions required.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PluginManifestWebapp&gt;</returns>
        List<PluginManifestWebapp> PluginsWebappGet ();

        /// <summary>
        /// Get webapp plugins
        /// </summary>
        /// <remarks>
        /// Get a list of web app plugins installed and activated on the server.  ##### Permissions No permissions required.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PluginManifestWebapp&gt;</returns>
        ApiResponse<List<PluginManifestWebapp>> PluginsWebappGetWithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPluginsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get plugins
        /// </summary>
        /// <remarks>
        /// Get a list of inactive and a list of active plugin manifests. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2009</returns>
        System.Threading.Tasks.Task<InlineResponse2009> PluginsGetAsync ();

        /// <summary>
        /// Get plugins
        /// </summary>
        /// <remarks>
        /// Get a list of inactive and a list of active plugin manifests. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> PluginsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Remove plugin
        /// </summary>
        /// <remarks>
        /// Remove the plugin with the provided ID from the server. All plugin files are deleted. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> PluginsPluginIdDeleteAsync (string pluginId);

        /// <summary>
        /// Remove plugin
        /// </summary>
        /// <remarks>
        /// Remove the plugin with the provided ID from the server. All plugin files are deleted. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> PluginsPluginIdDeleteAsyncWithHttpInfo (string pluginId);
        /// <summary>
        /// Disable plugin
        /// </summary>
        /// <remarks>
        /// Disable a previously enabled plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> PluginsPluginIdDisablePostAsync (string pluginId);

        /// <summary>
        /// Disable plugin
        /// </summary>
        /// <remarks>
        /// Disable a previously enabled plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> PluginsPluginIdDisablePostAsyncWithHttpInfo (string pluginId);
        /// <summary>
        /// Enable plugin
        /// </summary>
        /// <remarks>
        /// Enable a previously uploaded plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> PluginsPluginIdEnablePostAsync (string pluginId);

        /// <summary>
        /// Enable plugin
        /// </summary>
        /// <remarks>
        /// Enable a previously uploaded plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> PluginsPluginIdEnablePostAsyncWithHttpInfo (string pluginId);
        /// <summary>
        /// Upload plugin
        /// </summary>
        /// <remarks>
        /// Upload a plugin compressed in a .tar.gz file. Plugins and plugin uploads must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="plugin">The plugin image to be uploaded</param>
        /// <param name="force">Set to &#39;true&#39; to overwrite a previously installed plugin with the same ID, if any (optional)</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> PluginsPostAsync (System.IO.Stream plugin, string force = null);

        /// <summary>
        /// Upload plugin
        /// </summary>
        /// <remarks>
        /// Upload a plugin compressed in a .tar.gz file. Plugins and plugin uploads must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="plugin">The plugin image to be uploaded</param>
        /// <param name="force">Set to &#39;true&#39; to overwrite a previously installed plugin with the same ID, if any (optional)</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> PluginsPostAsyncWithHttpInfo (System.IO.Stream plugin, string force = null);
        /// <summary>
        /// Get webapp plugins
        /// </summary>
        /// <remarks>
        /// Get a list of web app plugins installed and activated on the server.  ##### Permissions No permissions required.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PluginManifestWebapp&gt;</returns>
        System.Threading.Tasks.Task<List<PluginManifestWebapp>> PluginsWebappGetAsync ();

        /// <summary>
        /// Get webapp plugins
        /// </summary>
        /// <remarks>
        /// Get a list of web app plugins installed and activated on the server.  ##### Permissions No permissions required.  __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PluginManifestWebapp&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<PluginManifestWebapp>>> PluginsWebappGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPluginsApi : IPluginsApiSync, IPluginsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PluginsApi : IPluginsApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PluginsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PluginsApi(string basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PluginsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PluginsApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PluginsApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get plugins Get a list of inactive and a list of active plugin manifests. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>InlineResponse2009</returns>
        public InlineResponse2009 PluginsGet ()
        {
            ApiResponse<InlineResponse2009> localVarResponse = PluginsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get plugins Get a list of inactive and a list of active plugin manifests. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of InlineResponse2009</returns>
        public ApiResponse<InlineResponse2009> PluginsGetWithHttpInfo ()
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var response = this.Client.Get< InlineResponse2009 >("/plugins", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PluginsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get plugins Get a list of inactive and a list of active plugin manifests. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of InlineResponse2009</returns>
        public async System.Threading.Tasks.Task<InlineResponse2009> PluginsGetAsync ()
        {
            ApiResponse<InlineResponse2009> localVarResponse = await PluginsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get plugins Get a list of inactive and a list of active plugin manifests. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (InlineResponse2009)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2009>> PluginsGetAsyncWithHttpInfo ()
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<InlineResponse2009>("/plugins", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PluginsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Remove plugin Remove the plugin with the provided ID from the server. All plugin files are deleted. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>StatusOK</returns>
        public StatusOK PluginsPluginIdDelete (string pluginId)
        {
            ApiResponse<StatusOK> localVarResponse = PluginsPluginIdDeleteWithHttpInfo(pluginId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove plugin Remove the plugin with the provided ID from the server. All plugin files are deleted. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> PluginsPluginIdDeleteWithHttpInfo (string pluginId)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->PluginsPluginIdDelete");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pluginId != null)
                requestOptions.PathParameters.Add("plugin_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(pluginId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/plugins/{plugin_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PluginsPluginIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Remove plugin Remove the plugin with the provided ID from the server. All plugin files are deleted. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> PluginsPluginIdDeleteAsync (string pluginId)
        {
            ApiResponse<StatusOK> localVarResponse = await PluginsPluginIdDeleteAsyncWithHttpInfo(pluginId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove plugin Remove the plugin with the provided ID from the server. All plugin files are deleted. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> PluginsPluginIdDeleteAsyncWithHttpInfo (string pluginId)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->PluginsPluginIdDelete");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (pluginId != null)
                requestOptions.PathParameters.Add("plugin_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(pluginId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/plugins/{plugin_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PluginsPluginIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Disable plugin Disable a previously enabled plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>StatusOK</returns>
        public StatusOK PluginsPluginIdDisablePost (string pluginId)
        {
            ApiResponse<StatusOK> localVarResponse = PluginsPluginIdDisablePostWithHttpInfo(pluginId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Disable plugin Disable a previously enabled plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> PluginsPluginIdDisablePostWithHttpInfo (string pluginId)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->PluginsPluginIdDisablePost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pluginId != null)
                requestOptions.PathParameters.Add("plugin_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(pluginId)); // path parameter


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/plugins/{plugin_id}/disable", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PluginsPluginIdDisablePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Disable plugin Disable a previously enabled plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> PluginsPluginIdDisablePostAsync (string pluginId)
        {
            ApiResponse<StatusOK> localVarResponse = await PluginsPluginIdDisablePostAsyncWithHttpInfo(pluginId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Disable plugin Disable a previously enabled plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> PluginsPluginIdDisablePostAsyncWithHttpInfo (string pluginId)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->PluginsPluginIdDisablePost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (pluginId != null)
                requestOptions.PathParameters.Add("plugin_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(pluginId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/plugins/{plugin_id}/disable", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PluginsPluginIdDisablePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Enable plugin Enable a previously uploaded plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>StatusOK</returns>
        public StatusOK PluginsPluginIdEnablePost (string pluginId)
        {
            ApiResponse<StatusOK> localVarResponse = PluginsPluginIdEnablePostWithHttpInfo(pluginId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enable plugin Enable a previously uploaded plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> PluginsPluginIdEnablePostWithHttpInfo (string pluginId)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->PluginsPluginIdEnablePost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pluginId != null)
                requestOptions.PathParameters.Add("plugin_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(pluginId)); // path parameter


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/plugins/{plugin_id}/enable", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PluginsPluginIdEnablePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Enable plugin Enable a previously uploaded plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> PluginsPluginIdEnablePostAsync (string pluginId)
        {
            ApiResponse<StatusOK> localVarResponse = await PluginsPluginIdEnablePostAsyncWithHttpInfo(pluginId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enable plugin Enable a previously uploaded plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="pluginId"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> PluginsPluginIdEnablePostAsyncWithHttpInfo (string pluginId)
        {
            // verify the required parameter 'pluginId' is set
            if (pluginId == null)
                throw new ApiException(400, "Missing required parameter 'pluginId' when calling PluginsApi->PluginsPluginIdEnablePost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (pluginId != null)
                requestOptions.PathParameters.Add("plugin_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(pluginId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/plugins/{plugin_id}/enable", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PluginsPluginIdEnablePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Upload plugin Upload a plugin compressed in a .tar.gz file. Plugins and plugin uploads must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="plugin">The plugin image to be uploaded</param>
        /// <param name="force">Set to &#39;true&#39; to overwrite a previously installed plugin with the same ID, if any (optional)</param>
        /// <returns>StatusOK</returns>
        public StatusOK PluginsPost (System.IO.Stream plugin, string force = null)
        {
            ApiResponse<StatusOK> localVarResponse = PluginsPostWithHttpInfo(plugin, force);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload plugin Upload a plugin compressed in a .tar.gz file. Plugins and plugin uploads must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="plugin">The plugin image to be uploaded</param>
        /// <param name="force">Set to &#39;true&#39; to overwrite a previously installed plugin with the same ID, if any (optional)</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> PluginsPostWithHttpInfo (System.IO.Stream plugin, string force = null)
        {
            // verify the required parameter 'plugin' is set
            if (plugin == null)
                throw new ApiException(400, "Missing required parameter 'plugin' when calling PluginsApi->PluginsPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (plugin != null)
            {
                requestOptions.FileParameters.Add("plugin", plugin);
            }
            if (force != null)
            {
                requestOptions.FormParameters.Add("force", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(force)); // form parameter
            }


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/plugins", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PluginsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Upload plugin Upload a plugin compressed in a .tar.gz file. Plugins and plugin uploads must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="plugin">The plugin image to be uploaded</param>
        /// <param name="force">Set to &#39;true&#39; to overwrite a previously installed plugin with the same ID, if any (optional)</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> PluginsPostAsync (System.IO.Stream plugin, string force = null)
        {
            ApiResponse<StatusOK> localVarResponse = await PluginsPostAsyncWithHttpInfo(plugin, force);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload plugin Upload a plugin compressed in a .tar.gz file. Plugins and plugin uploads must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="plugin">The plugin image to be uploaded</param>
        /// <param name="force">Set to &#39;true&#39; to overwrite a previously installed plugin with the same ID, if any (optional)</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> PluginsPostAsyncWithHttpInfo (System.IO.Stream plugin, string force = null)
        {
            // verify the required parameter 'plugin' is set
            if (plugin == null)
                throw new ApiException(400, "Missing required parameter 'plugin' when calling PluginsApi->PluginsPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (plugin != null)
            {
                requestOptions.FileParameters.Add("plugin", plugin);
            }
            if (force != null)
            {
                requestOptions.FormParameters.Add("force", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(force)); // form parameter
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/plugins", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PluginsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get webapp plugins Get a list of web app plugins installed and activated on the server.  ##### Permissions No permissions required.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;PluginManifestWebapp&gt;</returns>
        public List<PluginManifestWebapp> PluginsWebappGet ()
        {
            ApiResponse<List<PluginManifestWebapp>> localVarResponse = PluginsWebappGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get webapp plugins Get a list of web app plugins installed and activated on the server.  ##### Permissions No permissions required.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;PluginManifestWebapp&gt;</returns>
        public ApiResponse<List<PluginManifestWebapp>> PluginsWebappGetWithHttpInfo ()
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var response = this.Client.Get< List<PluginManifestWebapp> >("/plugins/webapp", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PluginsWebappGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get webapp plugins Get a list of web app plugins installed and activated on the server.  ##### Permissions No permissions required.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;PluginManifestWebapp&gt;</returns>
        public async System.Threading.Tasks.Task<List<PluginManifestWebapp>> PluginsWebappGetAsync ()
        {
            ApiResponse<List<PluginManifestWebapp>> localVarResponse = await PluginsWebappGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get webapp plugins Get a list of web app plugins installed and activated on the server.  ##### Permissions No permissions required.  __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;PluginManifestWebapp&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<PluginManifestWebapp>>> PluginsWebappGetAsyncWithHttpInfo ()
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<PluginManifestWebapp>>("/plugins/webapp", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PluginsWebappGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
