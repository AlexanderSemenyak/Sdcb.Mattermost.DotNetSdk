/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISAMLApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Remove IDP certificate
        /// </summary>
        /// <remarks>
        /// Delete the current IDP certificate being used with your SAML configuration. This will also disable SAML on your system as this certificate is required for SAML. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>StatusOK</returns>
        StatusOK SamlCertificateIdpDelete ();

        /// <summary>
        /// Remove IDP certificate
        /// </summary>
        /// <remarks>
        /// Delete the current IDP certificate being used with your SAML configuration. This will also disable SAML on your system as this certificate is required for SAML. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> SamlCertificateIdpDeleteWithHttpInfo ();
        /// <summary>
        /// Upload IDP certificate
        /// </summary>
        /// <remarks>
        /// Upload the IDP certificate to be used with your SAML configuration. The server will pick a hard-coded filename for the IdpCertificateFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The IDP certificate file</param>
        /// <returns>StatusOK</returns>
        StatusOK SamlCertificateIdpPost (System.IO.Stream certificate);

        /// <summary>
        /// Upload IDP certificate
        /// </summary>
        /// <remarks>
        /// Upload the IDP certificate to be used with your SAML configuration. The server will pick a hard-coded filename for the IdpCertificateFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The IDP certificate file</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> SamlCertificateIdpPostWithHttpInfo (System.IO.Stream certificate);
        /// <summary>
        /// Remove private key
        /// </summary>
        /// <remarks>
        /// Delete the current private key being used with your SAML configuration. This will also disable encryption for SAML on your system as this key is required for that. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>StatusOK</returns>
        StatusOK SamlCertificatePrivateDelete ();

        /// <summary>
        /// Remove private key
        /// </summary>
        /// <remarks>
        /// Delete the current private key being used with your SAML configuration. This will also disable encryption for SAML on your system as this key is required for that. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> SamlCertificatePrivateDeleteWithHttpInfo ();
        /// <summary>
        /// Upload private key
        /// </summary>
        /// <remarks>
        /// Upload the private key to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PrivateKeyFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The private key file</param>
        /// <returns>StatusOK</returns>
        StatusOK SamlCertificatePrivatePost (System.IO.Stream certificate);

        /// <summary>
        /// Upload private key
        /// </summary>
        /// <remarks>
        /// Upload the private key to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PrivateKeyFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The private key file</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> SamlCertificatePrivatePostWithHttpInfo (System.IO.Stream certificate);
        /// <summary>
        /// Remove public certificate
        /// </summary>
        /// <remarks>
        /// Delete the current public certificate being used with your SAML configuration. This will also disable encryption for SAML on your system as this certificate is required for that. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>StatusOK</returns>
        StatusOK SamlCertificatePublicDelete ();

        /// <summary>
        /// Remove public certificate
        /// </summary>
        /// <remarks>
        /// Delete the current public certificate being used with your SAML configuration. This will also disable encryption for SAML on your system as this certificate is required for that. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> SamlCertificatePublicDeleteWithHttpInfo ();
        /// <summary>
        /// Upload public certificate
        /// </summary>
        /// <remarks>
        /// Upload the public certificate to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PublicCertificateFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The public certificate file</param>
        /// <returns>StatusOK</returns>
        StatusOK SamlCertificatePublicPost (System.IO.Stream certificate);

        /// <summary>
        /// Upload public certificate
        /// </summary>
        /// <remarks>
        /// Upload the public certificate to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PublicCertificateFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The public certificate file</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> SamlCertificatePublicPostWithHttpInfo (System.IO.Stream certificate);
        /// <summary>
        /// Get certificate status
        /// </summary>
        /// <remarks>
        /// Get the status of the uploaded certificates and keys in use by your SAML configuration. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>SamlCertificateStatus</returns>
        SamlCertificateStatus SamlCertificateStatusGet ();

        /// <summary>
        /// Get certificate status
        /// </summary>
        /// <remarks>
        /// Get the status of the uploaded certificates and keys in use by your SAML configuration. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SamlCertificateStatus</returns>
        ApiResponse<SamlCertificateStatus> SamlCertificateStatusGetWithHttpInfo ();
        /// <summary>
        /// Get metadata
        /// </summary>
        /// <remarks>
        /// Get SAML metadata from the server. SAML must be configured properly. ##### Permissions No permission required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        string SamlMetadataGet ();

        /// <summary>
        /// Get metadata
        /// </summary>
        /// <remarks>
        /// Get SAML metadata from the server. SAML must be configured properly. ##### Permissions No permission required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> SamlMetadataGetWithHttpInfo ();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISAMLApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Remove IDP certificate
        /// </summary>
        /// <remarks>
        /// Delete the current IDP certificate being used with your SAML configuration. This will also disable SAML on your system as this certificate is required for SAML. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> SamlCertificateIdpDeleteAsync ();

        /// <summary>
        /// Remove IDP certificate
        /// </summary>
        /// <remarks>
        /// Delete the current IDP certificate being used with your SAML configuration. This will also disable SAML on your system as this certificate is required for SAML. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> SamlCertificateIdpDeleteAsyncWithHttpInfo ();
        /// <summary>
        /// Upload IDP certificate
        /// </summary>
        /// <remarks>
        /// Upload the IDP certificate to be used with your SAML configuration. The server will pick a hard-coded filename for the IdpCertificateFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The IDP certificate file</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> SamlCertificateIdpPostAsync (System.IO.Stream certificate);

        /// <summary>
        /// Upload IDP certificate
        /// </summary>
        /// <remarks>
        /// Upload the IDP certificate to be used with your SAML configuration. The server will pick a hard-coded filename for the IdpCertificateFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The IDP certificate file</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> SamlCertificateIdpPostAsyncWithHttpInfo (System.IO.Stream certificate);
        /// <summary>
        /// Remove private key
        /// </summary>
        /// <remarks>
        /// Delete the current private key being used with your SAML configuration. This will also disable encryption for SAML on your system as this key is required for that. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> SamlCertificatePrivateDeleteAsync ();

        /// <summary>
        /// Remove private key
        /// </summary>
        /// <remarks>
        /// Delete the current private key being used with your SAML configuration. This will also disable encryption for SAML on your system as this key is required for that. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> SamlCertificatePrivateDeleteAsyncWithHttpInfo ();
        /// <summary>
        /// Upload private key
        /// </summary>
        /// <remarks>
        /// Upload the private key to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PrivateKeyFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The private key file</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> SamlCertificatePrivatePostAsync (System.IO.Stream certificate);

        /// <summary>
        /// Upload private key
        /// </summary>
        /// <remarks>
        /// Upload the private key to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PrivateKeyFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The private key file</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> SamlCertificatePrivatePostAsyncWithHttpInfo (System.IO.Stream certificate);
        /// <summary>
        /// Remove public certificate
        /// </summary>
        /// <remarks>
        /// Delete the current public certificate being used with your SAML configuration. This will also disable encryption for SAML on your system as this certificate is required for that. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> SamlCertificatePublicDeleteAsync ();

        /// <summary>
        /// Remove public certificate
        /// </summary>
        /// <remarks>
        /// Delete the current public certificate being used with your SAML configuration. This will also disable encryption for SAML on your system as this certificate is required for that. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> SamlCertificatePublicDeleteAsyncWithHttpInfo ();
        /// <summary>
        /// Upload public certificate
        /// </summary>
        /// <remarks>
        /// Upload the public certificate to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PublicCertificateFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The public certificate file</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> SamlCertificatePublicPostAsync (System.IO.Stream certificate);

        /// <summary>
        /// Upload public certificate
        /// </summary>
        /// <remarks>
        /// Upload the public certificate to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PublicCertificateFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The public certificate file</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> SamlCertificatePublicPostAsyncWithHttpInfo (System.IO.Stream certificate);
        /// <summary>
        /// Get certificate status
        /// </summary>
        /// <remarks>
        /// Get the status of the uploaded certificates and keys in use by your SAML configuration. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SamlCertificateStatus</returns>
        System.Threading.Tasks.Task<SamlCertificateStatus> SamlCertificateStatusGetAsync ();

        /// <summary>
        /// Get certificate status
        /// </summary>
        /// <remarks>
        /// Get the status of the uploaded certificates and keys in use by your SAML configuration. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SamlCertificateStatus)</returns>
        System.Threading.Tasks.Task<ApiResponse<SamlCertificateStatus>> SamlCertificateStatusGetAsyncWithHttpInfo ();
        /// <summary>
        /// Get metadata
        /// </summary>
        /// <remarks>
        /// Get SAML metadata from the server. SAML must be configured properly. ##### Permissions No permission required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> SamlMetadataGetAsync ();

        /// <summary>
        /// Get metadata
        /// </summary>
        /// <remarks>
        /// Get SAML metadata from the server. SAML must be configured properly. ##### Permissions No permission required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> SamlMetadataGetAsyncWithHttpInfo ();
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISAMLApi : ISAMLApiSync, ISAMLApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SAMLApi : ISAMLApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SAMLApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SAMLApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SAMLApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SAMLApi(string basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SAMLApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SAMLApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SAMLApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Remove IDP certificate Delete the current IDP certificate being used with your SAML configuration. This will also disable SAML on your system as this certificate is required for SAML. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>StatusOK</returns>
        public StatusOK SamlCertificateIdpDelete ()
        {
            ApiResponse<StatusOK> localVarResponse = SamlCertificateIdpDeleteWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove IDP certificate Delete the current IDP certificate being used with your SAML configuration. This will also disable SAML on your system as this certificate is required for SAML. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> SamlCertificateIdpDeleteWithHttpInfo ()
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/saml/certificate/idp", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SamlCertificateIdpDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Remove IDP certificate Delete the current IDP certificate being used with your SAML configuration. This will also disable SAML on your system as this certificate is required for SAML. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> SamlCertificateIdpDeleteAsync ()
        {
            ApiResponse<StatusOK> localVarResponse = await SamlCertificateIdpDeleteAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove IDP certificate Delete the current IDP certificate being used with your SAML configuration. This will also disable SAML on your system as this certificate is required for SAML. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> SamlCertificateIdpDeleteAsyncWithHttpInfo ()
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/saml/certificate/idp", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SamlCertificateIdpDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Upload IDP certificate Upload the IDP certificate to be used with your SAML configuration. The server will pick a hard-coded filename for the IdpCertificateFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The IDP certificate file</param>
        /// <returns>StatusOK</returns>
        public StatusOK SamlCertificateIdpPost (System.IO.Stream certificate)
        {
            ApiResponse<StatusOK> localVarResponse = SamlCertificateIdpPostWithHttpInfo(certificate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload IDP certificate Upload the IDP certificate to be used with your SAML configuration. The server will pick a hard-coded filename for the IdpCertificateFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The IDP certificate file</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> SamlCertificateIdpPostWithHttpInfo (System.IO.Stream certificate)
        {
            // verify the required parameter 'certificate' is set
            if (certificate == null)
                throw new ApiException(400, "Missing required parameter 'certificate' when calling SAMLApi->SamlCertificateIdpPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (certificate != null)
            {
                requestOptions.FileParameters.Add("certificate", certificate);
            }


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/saml/certificate/idp", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SamlCertificateIdpPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Upload IDP certificate Upload the IDP certificate to be used with your SAML configuration. The server will pick a hard-coded filename for the IdpCertificateFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The IDP certificate file</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> SamlCertificateIdpPostAsync (System.IO.Stream certificate)
        {
            ApiResponse<StatusOK> localVarResponse = await SamlCertificateIdpPostAsyncWithHttpInfo(certificate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload IDP certificate Upload the IDP certificate to be used with your SAML configuration. The server will pick a hard-coded filename for the IdpCertificateFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The IDP certificate file</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> SamlCertificateIdpPostAsyncWithHttpInfo (System.IO.Stream certificate)
        {
            // verify the required parameter 'certificate' is set
            if (certificate == null)
                throw new ApiException(400, "Missing required parameter 'certificate' when calling SAMLApi->SamlCertificateIdpPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (certificate != null)
            {
                requestOptions.FileParameters.Add("certificate", certificate);
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/saml/certificate/idp", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SamlCertificateIdpPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Remove private key Delete the current private key being used with your SAML configuration. This will also disable encryption for SAML on your system as this key is required for that. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>StatusOK</returns>
        public StatusOK SamlCertificatePrivateDelete ()
        {
            ApiResponse<StatusOK> localVarResponse = SamlCertificatePrivateDeleteWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove private key Delete the current private key being used with your SAML configuration. This will also disable encryption for SAML on your system as this key is required for that. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> SamlCertificatePrivateDeleteWithHttpInfo ()
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/saml/certificate/private", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SamlCertificatePrivateDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Remove private key Delete the current private key being used with your SAML configuration. This will also disable encryption for SAML on your system as this key is required for that. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> SamlCertificatePrivateDeleteAsync ()
        {
            ApiResponse<StatusOK> localVarResponse = await SamlCertificatePrivateDeleteAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove private key Delete the current private key being used with your SAML configuration. This will also disable encryption for SAML on your system as this key is required for that. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> SamlCertificatePrivateDeleteAsyncWithHttpInfo ()
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/saml/certificate/private", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SamlCertificatePrivateDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Upload private key Upload the private key to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PrivateKeyFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The private key file</param>
        /// <returns>StatusOK</returns>
        public StatusOK SamlCertificatePrivatePost (System.IO.Stream certificate)
        {
            ApiResponse<StatusOK> localVarResponse = SamlCertificatePrivatePostWithHttpInfo(certificate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload private key Upload the private key to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PrivateKeyFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The private key file</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> SamlCertificatePrivatePostWithHttpInfo (System.IO.Stream certificate)
        {
            // verify the required parameter 'certificate' is set
            if (certificate == null)
                throw new ApiException(400, "Missing required parameter 'certificate' when calling SAMLApi->SamlCertificatePrivatePost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (certificate != null)
            {
                requestOptions.FileParameters.Add("certificate", certificate);
            }


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/saml/certificate/private", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SamlCertificatePrivatePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Upload private key Upload the private key to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PrivateKeyFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The private key file</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> SamlCertificatePrivatePostAsync (System.IO.Stream certificate)
        {
            ApiResponse<StatusOK> localVarResponse = await SamlCertificatePrivatePostAsyncWithHttpInfo(certificate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload private key Upload the private key to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PrivateKeyFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The private key file</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> SamlCertificatePrivatePostAsyncWithHttpInfo (System.IO.Stream certificate)
        {
            // verify the required parameter 'certificate' is set
            if (certificate == null)
                throw new ApiException(400, "Missing required parameter 'certificate' when calling SAMLApi->SamlCertificatePrivatePost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (certificate != null)
            {
                requestOptions.FileParameters.Add("certificate", certificate);
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/saml/certificate/private", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SamlCertificatePrivatePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Remove public certificate Delete the current public certificate being used with your SAML configuration. This will also disable encryption for SAML on your system as this certificate is required for that. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>StatusOK</returns>
        public StatusOK SamlCertificatePublicDelete ()
        {
            ApiResponse<StatusOK> localVarResponse = SamlCertificatePublicDeleteWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove public certificate Delete the current public certificate being used with your SAML configuration. This will also disable encryption for SAML on your system as this certificate is required for that. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> SamlCertificatePublicDeleteWithHttpInfo ()
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/saml/certificate/public", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SamlCertificatePublicDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Remove public certificate Delete the current public certificate being used with your SAML configuration. This will also disable encryption for SAML on your system as this certificate is required for that. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> SamlCertificatePublicDeleteAsync ()
        {
            ApiResponse<StatusOK> localVarResponse = await SamlCertificatePublicDeleteAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove public certificate Delete the current public certificate being used with your SAML configuration. This will also disable encryption for SAML on your system as this certificate is required for that. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> SamlCertificatePublicDeleteAsyncWithHttpInfo ()
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/saml/certificate/public", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SamlCertificatePublicDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Upload public certificate Upload the public certificate to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PublicCertificateFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The public certificate file</param>
        /// <returns>StatusOK</returns>
        public StatusOK SamlCertificatePublicPost (System.IO.Stream certificate)
        {
            ApiResponse<StatusOK> localVarResponse = SamlCertificatePublicPostWithHttpInfo(certificate);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Upload public certificate Upload the public certificate to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PublicCertificateFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The public certificate file</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> SamlCertificatePublicPostWithHttpInfo (System.IO.Stream certificate)
        {
            // verify the required parameter 'certificate' is set
            if (certificate == null)
                throw new ApiException(400, "Missing required parameter 'certificate' when calling SAMLApi->SamlCertificatePublicPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (certificate != null)
            {
                requestOptions.FileParameters.Add("certificate", certificate);
            }


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/saml/certificate/public", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SamlCertificatePublicPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Upload public certificate Upload the public certificate to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PublicCertificateFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The public certificate file</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> SamlCertificatePublicPostAsync (System.IO.Stream certificate)
        {
            ApiResponse<StatusOK> localVarResponse = await SamlCertificatePublicPostAsyncWithHttpInfo(certificate);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Upload public certificate Upload the public certificate to be used for encryption with your SAML configuration. The server will pick a hard-coded filename for the PublicCertificateFile setting in your &#x60;config.json&#x60;. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="certificate">The public certificate file</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> SamlCertificatePublicPostAsyncWithHttpInfo (System.IO.Stream certificate)
        {
            // verify the required parameter 'certificate' is set
            if (certificate == null)
                throw new ApiException(400, "Missing required parameter 'certificate' when calling SAMLApi->SamlCertificatePublicPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (certificate != null)
            {
                requestOptions.FileParameters.Add("certificate", certificate);
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/saml/certificate/public", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SamlCertificatePublicPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get certificate status Get the status of the uploaded certificates and keys in use by your SAML configuration. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>SamlCertificateStatus</returns>
        public SamlCertificateStatus SamlCertificateStatusGet ()
        {
            ApiResponse<SamlCertificateStatus> localVarResponse = SamlCertificateStatusGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get certificate status Get the status of the uploaded certificates and keys in use by your SAML configuration. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of SamlCertificateStatus</returns>
        public ApiResponse<SamlCertificateStatus> SamlCertificateStatusGetWithHttpInfo ()
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var response = this.Client.Get< SamlCertificateStatus >("/saml/certificate/status", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SamlCertificateStatusGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get certificate status Get the status of the uploaded certificates and keys in use by your SAML configuration. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of SamlCertificateStatus</returns>
        public async System.Threading.Tasks.Task<SamlCertificateStatus> SamlCertificateStatusGetAsync ()
        {
            ApiResponse<SamlCertificateStatus> localVarResponse = await SamlCertificateStatusGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get certificate status Get the status of the uploaded certificates and keys in use by your SAML configuration. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (SamlCertificateStatus)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<SamlCertificateStatus>> SamlCertificateStatusGetAsyncWithHttpInfo ()
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<SamlCertificateStatus>("/saml/certificate/status", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SamlCertificateStatusGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get metadata Get SAML metadata from the server. SAML must be configured properly. ##### Permissions No permission required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>string</returns>
        public string SamlMetadataGet ()
        {
            ApiResponse<string> localVarResponse = SamlMetadataGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get metadata Get SAML metadata from the server. SAML must be configured properly. ##### Permissions No permission required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse<string> SamlMetadataGetWithHttpInfo ()
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var response = this.Client.Get< string >("/saml/metadata", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SamlMetadataGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get metadata Get SAML metadata from the server. SAML must be configured properly. ##### Permissions No permission required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> SamlMetadataGetAsync ()
        {
            ApiResponse<string> localVarResponse = await SamlMetadataGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get metadata Get SAML metadata from the server. SAML must be configured properly. ##### Permissions No permission required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> SamlMetadataGetAsyncWithHttpInfo ()
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<string>("/saml/metadata", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SamlMetadataGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
