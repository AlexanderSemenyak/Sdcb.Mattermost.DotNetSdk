/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the jobs.
        /// </summary>
        /// <remarks>
        /// Get a page of jobs. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of jobs per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Job&gt;</returns>
        List<Job> JobsGet (string page = null, string perPage = null);

        /// <summary>
        /// Get the jobs.
        /// </summary>
        /// <remarks>
        /// Get a page of jobs. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of jobs per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Job&gt;</returns>
        ApiResponse<List<Job>> JobsGetWithHttpInfo (string page = null, string perPage = null);
        /// <summary>
        /// Cancel a job.
        /// </summary>
        /// <remarks>
        /// Cancel a job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job GUID</param>
        /// <returns>StatusOK</returns>
        StatusOK JobsJobIdCancelPost (string jobId);

        /// <summary>
        /// Cancel a job.
        /// </summary>
        /// <remarks>
        /// Cancel a job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> JobsJobIdCancelPostWithHttpInfo (string jobId);
        /// <summary>
        /// Get a job.
        /// </summary>
        /// <remarks>
        /// Gets a single job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job GUID</param>
        /// <returns>Job</returns>
        Job JobsJobIdGet (string jobId);

        /// <summary>
        /// Get a job.
        /// </summary>
        /// <remarks>
        /// Gets a single job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job GUID</param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> JobsJobIdGetWithHttpInfo (string jobId);
        /// <summary>
        /// Create a new job.
        /// </summary>
        /// <remarks>
        /// Create a new job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Job</returns>
        Job JobsPost (InlineObject46 body);

        /// <summary>
        /// Create a new job.
        /// </summary>
        /// <remarks>
        /// Create a new job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Job</returns>
        ApiResponse<Job> JobsPostWithHttpInfo (InlineObject46 body);
        /// <summary>
        /// Get the jobs of the given type.
        /// </summary>
        /// <remarks>
        /// Get a page of jobs of the given type. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Job type</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of jobs per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Job&gt;</returns>
        List<Job> JobsTypeTypeGet (string type, string page = null, string perPage = null);

        /// <summary>
        /// Get the jobs of the given type.
        /// </summary>
        /// <remarks>
        /// Get a page of jobs of the given type. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Job type</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of jobs per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Job&gt;</returns>
        ApiResponse<List<Job>> JobsTypeTypeGetWithHttpInfo (string type, string page = null, string perPage = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the jobs.
        /// </summary>
        /// <remarks>
        /// Get a page of jobs. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of jobs per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Job&gt;</returns>
        System.Threading.Tasks.Task<List<Job>> JobsGetAsync (string page = null, string perPage = null);

        /// <summary>
        /// Get the jobs.
        /// </summary>
        /// <remarks>
        /// Get a page of jobs. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of jobs per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Job&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Job>>> JobsGetAsyncWithHttpInfo (string page = null, string perPage = null);
        /// <summary>
        /// Cancel a job.
        /// </summary>
        /// <remarks>
        /// Cancel a job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job GUID</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> JobsJobIdCancelPostAsync (string jobId);

        /// <summary>
        /// Cancel a job.
        /// </summary>
        /// <remarks>
        /// Cancel a job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> JobsJobIdCancelPostAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Get a job.
        /// </summary>
        /// <remarks>
        /// Gets a single job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job GUID</param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> JobsJobIdGetAsync (string jobId);

        /// <summary>
        /// Get a job.
        /// </summary>
        /// <remarks>
        /// Gets a single job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job GUID</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> JobsJobIdGetAsyncWithHttpInfo (string jobId);
        /// <summary>
        /// Create a new job.
        /// </summary>
        /// <remarks>
        /// Create a new job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Job</returns>
        System.Threading.Tasks.Task<Job> JobsPostAsync (InlineObject46 body);

        /// <summary>
        /// Create a new job.
        /// </summary>
        /// <remarks>
        /// Create a new job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Job)</returns>
        System.Threading.Tasks.Task<ApiResponse<Job>> JobsPostAsyncWithHttpInfo (InlineObject46 body);
        /// <summary>
        /// Get the jobs of the given type.
        /// </summary>
        /// <remarks>
        /// Get a page of jobs of the given type. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Job type</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of jobs per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Job&gt;</returns>
        System.Threading.Tasks.Task<List<Job>> JobsTypeTypeGetAsync (string type, string page = null, string perPage = null);

        /// <summary>
        /// Get the jobs of the given type.
        /// </summary>
        /// <remarks>
        /// Get a page of jobs of the given type. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Job type</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of jobs per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Job&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Job>>> JobsTypeTypeGetAsyncWithHttpInfo (string type, string page = null, string perPage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IJobsApi : IJobsApiSync, IJobsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class JobsApi : IJobsApi
    {
        private Sdcb.Mattermost.DotNetSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public JobsApi(String basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Sdcb.Mattermost.DotNetSdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="JobsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public JobsApi(Sdcb.Mattermost.DotNetSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public JobsApi(Sdcb.Mattermost.DotNetSdk.Client.ISynchronousClient client,Sdcb.Mattermost.DotNetSdk.Client.IAsynchronousClient asyncClient, Sdcb.Mattermost.DotNetSdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sdcb.Mattermost.DotNetSdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the jobs. Get a page of jobs. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of jobs per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Job&gt;</returns>
        public List<Job> JobsGet (string page = null, string perPage = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Job>> localVarResponse = JobsGetWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the jobs. Get a page of jobs. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of jobs per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Job&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Job> > JobsGetWithHttpInfo (string page = null, string perPage = null)
        {
            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<Job> >("/jobs", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("JobsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get the jobs. Get a page of jobs. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of jobs per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Job&gt;</returns>
        public async System.Threading.Tasks.Task<List<Job>> JobsGetAsync (string page = null, string perPage = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Job>> localVarResponse = await JobsGetAsyncWithHttpInfo(page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the jobs. Get a page of jobs. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of jobs per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Job&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Job>>> JobsGetAsyncWithHttpInfo (string page = null, string perPage = null)
        {

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Job>>("/jobs", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("JobsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Cancel a job. Cancel a job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job GUID</param>
        /// <returns>StatusOK</returns>
        public StatusOK JobsJobIdCancelPost (string jobId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = JobsJobIdCancelPostWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Cancel a job. Cancel a job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > JobsJobIdCancelPostWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->JobsJobIdCancelPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobId != null)
                requestOptions.PathParameters.Add("job_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(jobId)); // path parameter


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/jobs/{job_id}/cancel", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("JobsJobIdCancelPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Cancel a job. Cancel a job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job GUID</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> JobsJobIdCancelPostAsync (string jobId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await JobsJobIdCancelPostAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Cancel a job. Cancel a job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> JobsJobIdCancelPostAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->JobsJobIdCancelPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (jobId != null)
                requestOptions.PathParameters.Add("job_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(jobId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/jobs/{job_id}/cancel", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("JobsJobIdCancelPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a job. Gets a single job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job GUID</param>
        /// <returns>Job</returns>
        public Job JobsJobIdGet (string jobId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Job> localVarResponse = JobsJobIdGetWithHttpInfo(jobId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a job. Gets a single job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job GUID</param>
        /// <returns>ApiResponse of Job</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Job > JobsJobIdGetWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->JobsJobIdGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (jobId != null)
                requestOptions.PathParameters.Add("job_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(jobId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Job >("/jobs/{job_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("JobsJobIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a job. Gets a single job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job GUID</param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> JobsJobIdGetAsync (string jobId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Job> localVarResponse = await JobsJobIdGetAsyncWithHttpInfo(jobId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a job. Gets a single job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="jobId">Job GUID</param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Job>> JobsJobIdGetAsyncWithHttpInfo (string jobId)
        {
            // verify the required parameter 'jobId' is set
            if (jobId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'jobId' when calling JobsApi->JobsJobIdGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (jobId != null)
                requestOptions.PathParameters.Add("job_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(jobId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Job>("/jobs/{job_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("JobsJobIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a new job. Create a new job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Job</returns>
        public Job JobsPost (InlineObject46 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Job> localVarResponse = JobsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new job. Create a new job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Job</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Job > JobsPostWithHttpInfo (InlineObject46 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling JobsApi->JobsPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< Job >("/jobs", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("JobsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a new job. Create a new job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of Job</returns>
        public async System.Threading.Tasks.Task<Job> JobsPostAsync (InlineObject46 body)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Job> localVarResponse = await JobsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new job. Create a new job. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Job)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Job>> JobsPostAsyncWithHttpInfo (InlineObject46 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'body' when calling JobsApi->JobsPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Job>("/jobs", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("JobsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get the jobs of the given type. Get a page of jobs of the given type. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Job type</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of jobs per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Job&gt;</returns>
        public List<Job> JobsTypeTypeGet (string type, string page = null, string perPage = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Job>> localVarResponse = JobsTypeTypeGetWithHttpInfo(type, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the jobs of the given type. Get a page of jobs of the given type. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Job type</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of jobs per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Job&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Job> > JobsTypeTypeGetWithHttpInfo (string type, string page = null, string perPage = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'type' when calling JobsApi->JobsTypeTypeGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (type != null)
                requestOptions.PathParameters.Add("type", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<Job> >("/jobs/type/{type}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("JobsTypeTypeGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get the jobs of the given type. Get a page of jobs of the given type. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Job type</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of jobs per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Job&gt;</returns>
        public async System.Threading.Tasks.Task<List<Job>> JobsTypeTypeGetAsync (string type, string page = null, string perPage = null)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Job>> localVarResponse = await JobsTypeTypeGetAsyncWithHttpInfo(type, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the jobs of the given type. Get a page of jobs of the given type. Use the query parameters to modify the behaviour of this endpoint. __Minimum server version: 4.1__ ##### Permissions Must have &#x60;manage_jobs&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="type">Job type</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of jobs per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Job&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Job>>> JobsTypeTypeGetAsyncWithHttpInfo (string type, string page = null, string perPage = null)
        {
            // verify the required parameter 'type' is set
            if (type == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'type' when calling JobsApi->JobsTypeTypeGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (type != null)
                requestOptions.PathParameters.Add("type", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(type)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Job>>("/jobs/type/{type}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("JobsTypeTypeGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
