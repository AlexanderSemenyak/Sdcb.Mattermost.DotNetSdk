/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComplianceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get reports
        /// </summary>
        /// <remarks>
        /// Get a list of compliance reports previously created by page, selected with &#x60;page&#x60; and &#x60;per_page&#x60; query parameters. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of reports per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Compliance&gt;</returns>
        List<Compliance> ComplianceReportsGet (string page = null, string perPage = null);

        /// <summary>
        /// Get reports
        /// </summary>
        /// <remarks>
        /// Get a list of compliance reports previously created by page, selected with &#x60;page&#x60; and &#x60;per_page&#x60; query parameters. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of reports per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Compliance&gt;</returns>
        ApiResponse<List<Compliance>> ComplianceReportsGetWithHttpInfo (string page = null, string perPage = null);
        /// <summary>
        /// Create report
        /// </summary>
        /// <remarks>
        /// Create and save a compliance report. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Compliance</returns>
        Compliance ComplianceReportsPost ();

        /// <summary>
        /// Create report
        /// </summary>
        /// <remarks>
        /// Create and save a compliance report. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Compliance</returns>
        ApiResponse<Compliance> ComplianceReportsPostWithHttpInfo ();
        /// <summary>
        /// Download a report
        /// </summary>
        /// <remarks>
        /// Download the full contents of a report as a file. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">Compliance report GUID</param>
        /// <returns></returns>
        void ComplianceReportsReportIdDownloadGet (string reportId);

        /// <summary>
        /// Download a report
        /// </summary>
        /// <remarks>
        /// Download the full contents of a report as a file. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">Compliance report GUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> ComplianceReportsReportIdDownloadGetWithHttpInfo (string reportId);
        /// <summary>
        /// Get a report
        /// </summary>
        /// <remarks>
        /// Get a compliance reports previously created. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">Compliance report GUID</param>
        /// <returns>Compliance</returns>
        Compliance ComplianceReportsReportIdGet (string reportId);

        /// <summary>
        /// Get a report
        /// </summary>
        /// <remarks>
        /// Get a compliance reports previously created. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">Compliance report GUID</param>
        /// <returns>ApiResponse of Compliance</returns>
        ApiResponse<Compliance> ComplianceReportsReportIdGetWithHttpInfo (string reportId);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComplianceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get reports
        /// </summary>
        /// <remarks>
        /// Get a list of compliance reports previously created by page, selected with &#x60;page&#x60; and &#x60;per_page&#x60; query parameters. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of reports per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Compliance&gt;</returns>
        System.Threading.Tasks.Task<List<Compliance>> ComplianceReportsGetAsync (string page = null, string perPage = null);

        /// <summary>
        /// Get reports
        /// </summary>
        /// <remarks>
        /// Get a list of compliance reports previously created by page, selected with &#x60;page&#x60; and &#x60;per_page&#x60; query parameters. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of reports per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Compliance&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Compliance>>> ComplianceReportsGetAsyncWithHttpInfo (string page = null, string perPage = null);
        /// <summary>
        /// Create report
        /// </summary>
        /// <remarks>
        /// Create and save a compliance report. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Compliance</returns>
        System.Threading.Tasks.Task<Compliance> ComplianceReportsPostAsync ();

        /// <summary>
        /// Create report
        /// </summary>
        /// <remarks>
        /// Create and save a compliance report. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Compliance)</returns>
        System.Threading.Tasks.Task<ApiResponse<Compliance>> ComplianceReportsPostAsyncWithHttpInfo ();
        /// <summary>
        /// Download a report
        /// </summary>
        /// <remarks>
        /// Download the full contents of a report as a file. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">Compliance report GUID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task ComplianceReportsReportIdDownloadGetAsync (string reportId);

        /// <summary>
        /// Download a report
        /// </summary>
        /// <remarks>
        /// Download the full contents of a report as a file. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">Compliance report GUID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> ComplianceReportsReportIdDownloadGetAsyncWithHttpInfo (string reportId);
        /// <summary>
        /// Get a report
        /// </summary>
        /// <remarks>
        /// Get a compliance reports previously created. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">Compliance report GUID</param>
        /// <returns>Task of Compliance</returns>
        System.Threading.Tasks.Task<Compliance> ComplianceReportsReportIdGetAsync (string reportId);

        /// <summary>
        /// Get a report
        /// </summary>
        /// <remarks>
        /// Get a compliance reports previously created. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">Compliance report GUID</param>
        /// <returns>Task of ApiResponse (Compliance)</returns>
        System.Threading.Tasks.Task<ApiResponse<Compliance>> ComplianceReportsReportIdGetAsyncWithHttpInfo (string reportId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IComplianceApi : IComplianceApiSync, IComplianceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ComplianceApi : IComplianceApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComplianceApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ComplianceApi(string basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ComplianceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ComplianceApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ComplianceApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get reports Get a list of compliance reports previously created by page, selected with &#x60;page&#x60; and &#x60;per_page&#x60; query parameters. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of reports per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Compliance&gt;</returns>
        public List<Compliance> ComplianceReportsGet (string page = null, string perPage = null)
        {
            ApiResponse<List<Compliance>> localVarResponse = ComplianceReportsGetWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get reports Get a list of compliance reports previously created by page, selected with &#x60;page&#x60; and &#x60;per_page&#x60; query parameters. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of reports per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Compliance&gt;</returns>
        public ApiResponse<List<Compliance>> ComplianceReportsGetWithHttpInfo (string page = null, string perPage = null)
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<Compliance> >("/compliance/reports", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ComplianceReportsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get reports Get a list of compliance reports previously created by page, selected with &#x60;page&#x60; and &#x60;per_page&#x60; query parameters. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of reports per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Compliance&gt;</returns>
        public async System.Threading.Tasks.Task<List<Compliance>> ComplianceReportsGetAsync (string page = null, string perPage = null)
        {
            ApiResponse<List<Compliance>> localVarResponse = await ComplianceReportsGetAsyncWithHttpInfo(page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get reports Get a list of compliance reports previously created by page, selected with &#x60;page&#x60; and &#x60;per_page&#x60; query parameters. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of reports per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Compliance&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Compliance>>> ComplianceReportsGetAsyncWithHttpInfo (string page = null, string perPage = null)
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Compliance>>("/compliance/reports", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ComplianceReportsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create report Create and save a compliance report. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Compliance</returns>
        public Compliance ComplianceReportsPost ()
        {
            ApiResponse<Compliance> localVarResponse = ComplianceReportsPostWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create report Create and save a compliance report. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Compliance</returns>
        public ApiResponse<Compliance> ComplianceReportsPostWithHttpInfo ()
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var response = this.Client.Post< Compliance >("/compliance/reports", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ComplianceReportsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create report Create and save a compliance report. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of Compliance</returns>
        public async System.Threading.Tasks.Task<Compliance> ComplianceReportsPostAsync ()
        {
            ApiResponse<Compliance> localVarResponse = await ComplianceReportsPostAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create report Create and save a compliance report. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (Compliance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Compliance>> ComplianceReportsPostAsyncWithHttpInfo ()
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Compliance>("/compliance/reports", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ComplianceReportsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Download a report Download the full contents of a report as a file. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">Compliance report GUID</param>
        /// <returns></returns>
        public void ComplianceReportsReportIdDownloadGet (string reportId)
        {
             ComplianceReportsReportIdDownloadGetWithHttpInfo(reportId);
        }

        /// <summary>
        /// Download a report Download the full contents of a report as a file. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">Compliance report GUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> ComplianceReportsReportIdDownloadGetWithHttpInfo (string reportId)
        {
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ComplianceApi->ComplianceReportsReportIdDownloadGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (reportId != null)
                requestOptions.PathParameters.Add("report_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(reportId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get<object>("/compliance/reports/{report_id}/download", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ComplianceReportsReportIdDownloadGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Download a report Download the full contents of a report as a file. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">Compliance report GUID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task ComplianceReportsReportIdDownloadGetAsync (string reportId)
        {
             await ComplianceReportsReportIdDownloadGetAsyncWithHttpInfo(reportId);

        }

        /// <summary>
        /// Download a report Download the full contents of a report as a file. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">Compliance report GUID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> ComplianceReportsReportIdDownloadGetAsyncWithHttpInfo (string reportId)
        {
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ComplianceApi->ComplianceReportsReportIdDownloadGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (reportId != null)
                requestOptions.PathParameters.Add("report_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(reportId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<object>("/compliance/reports/{report_id}/download", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ComplianceReportsReportIdDownloadGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a report Get a compliance reports previously created. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">Compliance report GUID</param>
        /// <returns>Compliance</returns>
        public Compliance ComplianceReportsReportIdGet (string reportId)
        {
            ApiResponse<Compliance> localVarResponse = ComplianceReportsReportIdGetWithHttpInfo(reportId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a report Get a compliance reports previously created. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">Compliance report GUID</param>
        /// <returns>ApiResponse of Compliance</returns>
        public ApiResponse<Compliance> ComplianceReportsReportIdGetWithHttpInfo (string reportId)
        {
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ComplianceApi->ComplianceReportsReportIdGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (reportId != null)
                requestOptions.PathParameters.Add("report_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(reportId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Compliance >("/compliance/reports/{report_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ComplianceReportsReportIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a report Get a compliance reports previously created. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">Compliance report GUID</param>
        /// <returns>Task of Compliance</returns>
        public async System.Threading.Tasks.Task<Compliance> ComplianceReportsReportIdGetAsync (string reportId)
        {
            ApiResponse<Compliance> localVarResponse = await ComplianceReportsReportIdGetAsyncWithHttpInfo(reportId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a report Get a compliance reports previously created. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="reportId">Compliance report GUID</param>
        /// <returns>Task of ApiResponse (Compliance)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Compliance>> ComplianceReportsReportIdGetAsyncWithHttpInfo (string reportId)
        {
            // verify the required parameter 'reportId' is set
            if (reportId == null)
                throw new ApiException(400, "Missing required parameter 'reportId' when calling ComplianceApi->ComplianceReportsReportIdGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (reportId != null)
                requestOptions.PathParameters.Add("report_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(reportId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Compliance>("/compliance/reports/{report_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ComplianceReportsReportIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
