/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuthApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete an OAuth app
        /// </summary>
        /// <remarks>
        /// Delete and unregister an OAuth 2.0 client application  ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>StatusOK</returns>
        StatusOK OauthAppsAppIdDelete (string appId);

        /// <summary>
        /// Delete an OAuth app
        /// </summary>
        /// <remarks>
        /// Delete and unregister an OAuth 2.0 client application  ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> OauthAppsAppIdDeleteWithHttpInfo (string appId);
        /// <summary>
        /// Get an OAuth app
        /// </summary>
        /// <remarks>
        /// Get an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>OAuthApp</returns>
        OAuthApp OauthAppsAppIdGet (string appId);

        /// <summary>
        /// Get an OAuth app
        /// </summary>
        /// <remarks>
        /// Get an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>ApiResponse of OAuthApp</returns>
        ApiResponse<OAuthApp> OauthAppsAppIdGetWithHttpInfo (string appId);
        /// <summary>
        /// Get info on an OAuth app
        /// </summary>
        /// <remarks>
        /// Get public information about an OAuth 2.0 client application registered with Mattermost. The application&#39;s client secret will be blanked out. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>OAuthApp</returns>
        OAuthApp OauthAppsAppIdInfoGet (string appId);

        /// <summary>
        /// Get info on an OAuth app
        /// </summary>
        /// <remarks>
        /// Get public information about an OAuth 2.0 client application registered with Mattermost. The application&#39;s client secret will be blanked out. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>ApiResponse of OAuthApp</returns>
        ApiResponse<OAuthApp> OauthAppsAppIdInfoGetWithHttpInfo (string appId);
        /// <summary>
        /// Update an OAuth app
        /// </summary>
        /// <remarks>
        /// Update an OAuth 2.0 client application based on OAuth struct. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <param name="body"></param>
        /// <returns>OAuthApp</returns>
        OAuthApp OauthAppsAppIdPut (string appId, InlineObject56 body);

        /// <summary>
        /// Update an OAuth app
        /// </summary>
        /// <remarks>
        /// Update an OAuth 2.0 client application based on OAuth struct. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of OAuthApp</returns>
        ApiResponse<OAuthApp> OauthAppsAppIdPutWithHttpInfo (string appId, InlineObject56 body);
        /// <summary>
        /// Regenerate OAuth app secret
        /// </summary>
        /// <remarks>
        /// Regenerate the client secret for an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>OAuthApp</returns>
        OAuthApp OauthAppsAppIdRegenSecretPost (string appId);

        /// <summary>
        /// Regenerate OAuth app secret
        /// </summary>
        /// <remarks>
        /// Regenerate the client secret for an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>ApiResponse of OAuthApp</returns>
        ApiResponse<OAuthApp> OauthAppsAppIdRegenSecretPostWithHttpInfo (string appId);
        /// <summary>
        /// Get OAuth apps
        /// </summary>
        /// <remarks>
        /// Get a page of OAuth 2.0 client applications registered with Mattermost. ##### Permissions With &#x60;manage_oauth&#x60; permission, the apps registered by the logged in user are returned. With &#x60;manage_system_wide_oauth&#x60; permission, all apps regardless of creator are returned. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of apps per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;OAuthApp&gt;</returns>
        List<OAuthApp> OauthAppsGet (string page = null, string perPage = null);

        /// <summary>
        /// Get OAuth apps
        /// </summary>
        /// <remarks>
        /// Get a page of OAuth 2.0 client applications registered with Mattermost. ##### Permissions With &#x60;manage_oauth&#x60; permission, the apps registered by the logged in user are returned. With &#x60;manage_system_wide_oauth&#x60; permission, all apps regardless of creator are returned. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of apps per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;OAuthApp&gt;</returns>
        ApiResponse<List<OAuthApp>> OauthAppsGetWithHttpInfo (string page = null, string perPage = null);
        /// <summary>
        /// Register OAuth app
        /// </summary>
        /// <remarks>
        /// Register an OAuth 2.0 client application with Mattermost as the service provider. ##### Permissions Must have &#x60;manage_oauth&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>OAuthApp</returns>
        OAuthApp OauthAppsPost (InlineObject55 body);

        /// <summary>
        /// Register OAuth app
        /// </summary>
        /// <remarks>
        /// Register an OAuth 2.0 client application with Mattermost as the service provider. ##### Permissions Must have &#x60;manage_oauth&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of OAuthApp</returns>
        ApiResponse<OAuthApp> OauthAppsPostWithHttpInfo (InlineObject55 body);
        /// <summary>
        /// Get authorized OAuth apps
        /// </summary>
        /// <remarks>
        /// Get a page of OAuth 2.0 client applications authorized to access a user&#39;s account. ##### Permissions Must be authenticated as the user or have &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of apps per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;OAuthApp&gt;</returns>
        List<OAuthApp> UsersUserIdOauthAppsAuthorizedGet (string userId, string page = null, string perPage = null);

        /// <summary>
        /// Get authorized OAuth apps
        /// </summary>
        /// <remarks>
        /// Get a page of OAuth 2.0 client applications authorized to access a user&#39;s account. ##### Permissions Must be authenticated as the user or have &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of apps per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;OAuthApp&gt;</returns>
        ApiResponse<List<OAuthApp>> UsersUserIdOauthAppsAuthorizedGetWithHttpInfo (string userId, string page = null, string perPage = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuthApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete an OAuth app
        /// </summary>
        /// <remarks>
        /// Delete and unregister an OAuth 2.0 client application  ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> OauthAppsAppIdDeleteAsync (string appId);

        /// <summary>
        /// Delete an OAuth app
        /// </summary>
        /// <remarks>
        /// Delete and unregister an OAuth 2.0 client application  ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> OauthAppsAppIdDeleteAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Get an OAuth app
        /// </summary>
        /// <remarks>
        /// Get an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>Task of OAuthApp</returns>
        System.Threading.Tasks.Task<OAuthApp> OauthAppsAppIdGetAsync (string appId);

        /// <summary>
        /// Get an OAuth app
        /// </summary>
        /// <remarks>
        /// Get an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>Task of ApiResponse (OAuthApp)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuthApp>> OauthAppsAppIdGetAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Get info on an OAuth app
        /// </summary>
        /// <remarks>
        /// Get public information about an OAuth 2.0 client application registered with Mattermost. The application&#39;s client secret will be blanked out. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>Task of OAuthApp</returns>
        System.Threading.Tasks.Task<OAuthApp> OauthAppsAppIdInfoGetAsync (string appId);

        /// <summary>
        /// Get info on an OAuth app
        /// </summary>
        /// <remarks>
        /// Get public information about an OAuth 2.0 client application registered with Mattermost. The application&#39;s client secret will be blanked out. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>Task of ApiResponse (OAuthApp)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuthApp>> OauthAppsAppIdInfoGetAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Update an OAuth app
        /// </summary>
        /// <remarks>
        /// Update an OAuth 2.0 client application based on OAuth struct. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <param name="body"></param>
        /// <returns>Task of OAuthApp</returns>
        System.Threading.Tasks.Task<OAuthApp> OauthAppsAppIdPutAsync (string appId, InlineObject56 body);

        /// <summary>
        /// Update an OAuth app
        /// </summary>
        /// <remarks>
        /// Update an OAuth 2.0 client application based on OAuth struct. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (OAuthApp)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuthApp>> OauthAppsAppIdPutAsyncWithHttpInfo (string appId, InlineObject56 body);
        /// <summary>
        /// Regenerate OAuth app secret
        /// </summary>
        /// <remarks>
        /// Regenerate the client secret for an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>Task of OAuthApp</returns>
        System.Threading.Tasks.Task<OAuthApp> OauthAppsAppIdRegenSecretPostAsync (string appId);

        /// <summary>
        /// Regenerate OAuth app secret
        /// </summary>
        /// <remarks>
        /// Regenerate the client secret for an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>Task of ApiResponse (OAuthApp)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuthApp>> OauthAppsAppIdRegenSecretPostAsyncWithHttpInfo (string appId);
        /// <summary>
        /// Get OAuth apps
        /// </summary>
        /// <remarks>
        /// Get a page of OAuth 2.0 client applications registered with Mattermost. ##### Permissions With &#x60;manage_oauth&#x60; permission, the apps registered by the logged in user are returned. With &#x60;manage_system_wide_oauth&#x60; permission, all apps regardless of creator are returned. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of apps per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;OAuthApp&gt;</returns>
        System.Threading.Tasks.Task<List<OAuthApp>> OauthAppsGetAsync (string page = null, string perPage = null);

        /// <summary>
        /// Get OAuth apps
        /// </summary>
        /// <remarks>
        /// Get a page of OAuth 2.0 client applications registered with Mattermost. ##### Permissions With &#x60;manage_oauth&#x60; permission, the apps registered by the logged in user are returned. With &#x60;manage_system_wide_oauth&#x60; permission, all apps regardless of creator are returned. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of apps per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;OAuthApp&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OAuthApp>>> OauthAppsGetAsyncWithHttpInfo (string page = null, string perPage = null);
        /// <summary>
        /// Register OAuth app
        /// </summary>
        /// <remarks>
        /// Register an OAuth 2.0 client application with Mattermost as the service provider. ##### Permissions Must have &#x60;manage_oauth&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of OAuthApp</returns>
        System.Threading.Tasks.Task<OAuthApp> OauthAppsPostAsync (InlineObject55 body);

        /// <summary>
        /// Register OAuth app
        /// </summary>
        /// <remarks>
        /// Register an OAuth 2.0 client application with Mattermost as the service provider. ##### Permissions Must have &#x60;manage_oauth&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (OAuthApp)</returns>
        System.Threading.Tasks.Task<ApiResponse<OAuthApp>> OauthAppsPostAsyncWithHttpInfo (InlineObject55 body);
        /// <summary>
        /// Get authorized OAuth apps
        /// </summary>
        /// <remarks>
        /// Get a page of OAuth 2.0 client applications authorized to access a user&#39;s account. ##### Permissions Must be authenticated as the user or have &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of apps per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;OAuthApp&gt;</returns>
        System.Threading.Tasks.Task<List<OAuthApp>> UsersUserIdOauthAppsAuthorizedGetAsync (string userId, string page = null, string perPage = null);

        /// <summary>
        /// Get authorized OAuth apps
        /// </summary>
        /// <remarks>
        /// Get a page of OAuth 2.0 client applications authorized to access a user&#39;s account. ##### Permissions Must be authenticated as the user or have &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of apps per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;OAuthApp&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OAuthApp>>> UsersUserIdOauthAppsAuthorizedGetAsyncWithHttpInfo (string userId, string page = null, string perPage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOAuthApi : IOAuthApiSync, IOAuthApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OAuthApi : IOAuthApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuthApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OAuthApi(string basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OAuthApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OAuthApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OAuthApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete an OAuth app Delete and unregister an OAuth 2.0 client application  ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>StatusOK</returns>
        public StatusOK OauthAppsAppIdDelete (string appId)
        {
            ApiResponse<StatusOK> localVarResponse = OauthAppsAppIdDeleteWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an OAuth app Delete and unregister an OAuth 2.0 client application  ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> OauthAppsAppIdDeleteWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthApi->OauthAppsAppIdDelete");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (appId != null)
                requestOptions.PathParameters.Add("app_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(appId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/oauth/apps/{app_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("OauthAppsAppIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete an OAuth app Delete and unregister an OAuth 2.0 client application  ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> OauthAppsAppIdDeleteAsync (string appId)
        {
            ApiResponse<StatusOK> localVarResponse = await OauthAppsAppIdDeleteAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an OAuth app Delete and unregister an OAuth 2.0 client application  ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> OauthAppsAppIdDeleteAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthApi->OauthAppsAppIdDelete");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (appId != null)
                requestOptions.PathParameters.Add("app_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(appId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/oauth/apps/{app_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("OauthAppsAppIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get an OAuth app Get an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>OAuthApp</returns>
        public OAuthApp OauthAppsAppIdGet (string appId)
        {
            ApiResponse<OAuthApp> localVarResponse = OauthAppsAppIdGetWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an OAuth app Get an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>ApiResponse of OAuthApp</returns>
        public ApiResponse<OAuthApp> OauthAppsAppIdGetWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthApi->OauthAppsAppIdGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (appId != null)
                requestOptions.PathParameters.Add("app_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(appId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< OAuthApp >("/oauth/apps/{app_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("OauthAppsAppIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get an OAuth app Get an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>Task of OAuthApp</returns>
        public async System.Threading.Tasks.Task<OAuthApp> OauthAppsAppIdGetAsync (string appId)
        {
            ApiResponse<OAuthApp> localVarResponse = await OauthAppsAppIdGetAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an OAuth app Get an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>Task of ApiResponse (OAuthApp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuthApp>> OauthAppsAppIdGetAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthApi->OauthAppsAppIdGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (appId != null)
                requestOptions.PathParameters.Add("app_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(appId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<OAuthApp>("/oauth/apps/{app_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("OauthAppsAppIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get info on an OAuth app Get public information about an OAuth 2.0 client application registered with Mattermost. The application&#39;s client secret will be blanked out. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>OAuthApp</returns>
        public OAuthApp OauthAppsAppIdInfoGet (string appId)
        {
            ApiResponse<OAuthApp> localVarResponse = OauthAppsAppIdInfoGetWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get info on an OAuth app Get public information about an OAuth 2.0 client application registered with Mattermost. The application&#39;s client secret will be blanked out. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>ApiResponse of OAuthApp</returns>
        public ApiResponse<OAuthApp> OauthAppsAppIdInfoGetWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthApi->OauthAppsAppIdInfoGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (appId != null)
                requestOptions.PathParameters.Add("app_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(appId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< OAuthApp >("/oauth/apps/{app_id}/info", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("OauthAppsAppIdInfoGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get info on an OAuth app Get public information about an OAuth 2.0 client application registered with Mattermost. The application&#39;s client secret will be blanked out. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>Task of OAuthApp</returns>
        public async System.Threading.Tasks.Task<OAuthApp> OauthAppsAppIdInfoGetAsync (string appId)
        {
            ApiResponse<OAuthApp> localVarResponse = await OauthAppsAppIdInfoGetAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get info on an OAuth app Get public information about an OAuth 2.0 client application registered with Mattermost. The application&#39;s client secret will be blanked out. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>Task of ApiResponse (OAuthApp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuthApp>> OauthAppsAppIdInfoGetAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthApi->OauthAppsAppIdInfoGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (appId != null)
                requestOptions.PathParameters.Add("app_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(appId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<OAuthApp>("/oauth/apps/{app_id}/info", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("OauthAppsAppIdInfoGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update an OAuth app Update an OAuth 2.0 client application based on OAuth struct. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <param name="body"></param>
        /// <returns>OAuthApp</returns>
        public OAuthApp OauthAppsAppIdPut (string appId, InlineObject56 body)
        {
            ApiResponse<OAuthApp> localVarResponse = OauthAppsAppIdPutWithHttpInfo(appId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an OAuth app Update an OAuth 2.0 client application based on OAuth struct. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of OAuthApp</returns>
        public ApiResponse<OAuthApp> OauthAppsAppIdPutWithHttpInfo (string appId, InlineObject56 body)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthApi->OauthAppsAppIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OAuthApi->OauthAppsAppIdPut");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (appId != null)
                requestOptions.PathParameters.Add("app_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< OAuthApp >("/oauth/apps/{app_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("OauthAppsAppIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update an OAuth app Update an OAuth 2.0 client application based on OAuth struct. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <param name="body"></param>
        /// <returns>Task of OAuthApp</returns>
        public async System.Threading.Tasks.Task<OAuthApp> OauthAppsAppIdPutAsync (string appId, InlineObject56 body)
        {
            ApiResponse<OAuthApp> localVarResponse = await OauthAppsAppIdPutAsyncWithHttpInfo(appId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an OAuth app Update an OAuth 2.0 client application based on OAuth struct. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (OAuthApp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuthApp>> OauthAppsAppIdPutAsyncWithHttpInfo (string appId, InlineObject56 body)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthApi->OauthAppsAppIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OAuthApi->OauthAppsAppIdPut");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (appId != null)
                requestOptions.PathParameters.Add("app_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(appId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<OAuthApp>("/oauth/apps/{app_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("OauthAppsAppIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Regenerate OAuth app secret Regenerate the client secret for an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>OAuthApp</returns>
        public OAuthApp OauthAppsAppIdRegenSecretPost (string appId)
        {
            ApiResponse<OAuthApp> localVarResponse = OauthAppsAppIdRegenSecretPostWithHttpInfo(appId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Regenerate OAuth app secret Regenerate the client secret for an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>ApiResponse of OAuthApp</returns>
        public ApiResponse<OAuthApp> OauthAppsAppIdRegenSecretPostWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthApi->OauthAppsAppIdRegenSecretPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (appId != null)
                requestOptions.PathParameters.Add("app_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(appId)); // path parameter


            // make the HTTP request

            var response = this.Client.Post< OAuthApp >("/oauth/apps/{app_id}/regen_secret", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("OauthAppsAppIdRegenSecretPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Regenerate OAuth app secret Regenerate the client secret for an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>Task of OAuthApp</returns>
        public async System.Threading.Tasks.Task<OAuthApp> OauthAppsAppIdRegenSecretPostAsync (string appId)
        {
            ApiResponse<OAuthApp> localVarResponse = await OauthAppsAppIdRegenSecretPostAsyncWithHttpInfo(appId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Regenerate OAuth app secret Regenerate the client secret for an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="appId">Application client id</param>
        /// <returns>Task of ApiResponse (OAuthApp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuthApp>> OauthAppsAppIdRegenSecretPostAsyncWithHttpInfo (string appId)
        {
            // verify the required parameter 'appId' is set
            if (appId == null)
                throw new ApiException(400, "Missing required parameter 'appId' when calling OAuthApi->OauthAppsAppIdRegenSecretPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (appId != null)
                requestOptions.PathParameters.Add("app_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(appId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<OAuthApp>("/oauth/apps/{app_id}/regen_secret", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("OauthAppsAppIdRegenSecretPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get OAuth apps Get a page of OAuth 2.0 client applications registered with Mattermost. ##### Permissions With &#x60;manage_oauth&#x60; permission, the apps registered by the logged in user are returned. With &#x60;manage_system_wide_oauth&#x60; permission, all apps regardless of creator are returned. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of apps per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;OAuthApp&gt;</returns>
        public List<OAuthApp> OauthAppsGet (string page = null, string perPage = null)
        {
            ApiResponse<List<OAuthApp>> localVarResponse = OauthAppsGetWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get OAuth apps Get a page of OAuth 2.0 client applications registered with Mattermost. ##### Permissions With &#x60;manage_oauth&#x60; permission, the apps registered by the logged in user are returned. With &#x60;manage_system_wide_oauth&#x60; permission, all apps regardless of creator are returned. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of apps per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;OAuthApp&gt;</returns>
        public ApiResponse<List<OAuthApp>> OauthAppsGetWithHttpInfo (string page = null, string perPage = null)
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<OAuthApp> >("/oauth/apps", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("OauthAppsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get OAuth apps Get a page of OAuth 2.0 client applications registered with Mattermost. ##### Permissions With &#x60;manage_oauth&#x60; permission, the apps registered by the logged in user are returned. With &#x60;manage_system_wide_oauth&#x60; permission, all apps regardless of creator are returned. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of apps per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;OAuthApp&gt;</returns>
        public async System.Threading.Tasks.Task<List<OAuthApp>> OauthAppsGetAsync (string page = null, string perPage = null)
        {
            ApiResponse<List<OAuthApp>> localVarResponse = await OauthAppsGetAsyncWithHttpInfo(page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get OAuth apps Get a page of OAuth 2.0 client applications registered with Mattermost. ##### Permissions With &#x60;manage_oauth&#x60; permission, the apps registered by the logged in user are returned. With &#x60;manage_system_wide_oauth&#x60; permission, all apps regardless of creator are returned. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of apps per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;OAuthApp&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OAuthApp>>> OauthAppsGetAsyncWithHttpInfo (string page = null, string perPage = null)
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<OAuthApp>>("/oauth/apps", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("OauthAppsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Register OAuth app Register an OAuth 2.0 client application with Mattermost as the service provider. ##### Permissions Must have &#x60;manage_oauth&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>OAuthApp</returns>
        public OAuthApp OauthAppsPost (InlineObject55 body)
        {
            ApiResponse<OAuthApp> localVarResponse = OauthAppsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Register OAuth app Register an OAuth 2.0 client application with Mattermost as the service provider. ##### Permissions Must have &#x60;manage_oauth&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of OAuthApp</returns>
        public ApiResponse<OAuthApp> OauthAppsPostWithHttpInfo (InlineObject55 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OAuthApi->OauthAppsPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< OAuthApp >("/oauth/apps", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("OauthAppsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Register OAuth app Register an OAuth 2.0 client application with Mattermost as the service provider. ##### Permissions Must have &#x60;manage_oauth&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of OAuthApp</returns>
        public async System.Threading.Tasks.Task<OAuthApp> OauthAppsPostAsync (InlineObject55 body)
        {
            ApiResponse<OAuthApp> localVarResponse = await OauthAppsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Register OAuth app Register an OAuth 2.0 client application with Mattermost as the service provider. ##### Permissions Must have &#x60;manage_oauth&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (OAuthApp)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OAuthApp>> OauthAppsPostAsyncWithHttpInfo (InlineObject55 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling OAuthApi->OauthAppsPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<OAuthApp>("/oauth/apps", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("OauthAppsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get authorized OAuth apps Get a page of OAuth 2.0 client applications authorized to access a user&#39;s account. ##### Permissions Must be authenticated as the user or have &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of apps per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;OAuthApp&gt;</returns>
        public List<OAuthApp> UsersUserIdOauthAppsAuthorizedGet (string userId, string page = null, string perPage = null)
        {
            ApiResponse<List<OAuthApp>> localVarResponse = UsersUserIdOauthAppsAuthorizedGetWithHttpInfo(userId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get authorized OAuth apps Get a page of OAuth 2.0 client applications authorized to access a user&#39;s account. ##### Permissions Must be authenticated as the user or have &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of apps per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;OAuthApp&gt;</returns>
        public ApiResponse<List<OAuthApp>> UsersUserIdOauthAppsAuthorizedGetWithHttpInfo (string userId, string page = null, string perPage = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OAuthApi->UsersUserIdOauthAppsAuthorizedGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<OAuthApp> >("/users/{user_id}/oauth/apps/authorized", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdOauthAppsAuthorizedGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get authorized OAuth apps Get a page of OAuth 2.0 client applications authorized to access a user&#39;s account. ##### Permissions Must be authenticated as the user or have &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of apps per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;OAuthApp&gt;</returns>
        public async System.Threading.Tasks.Task<List<OAuthApp>> UsersUserIdOauthAppsAuthorizedGetAsync (string userId, string page = null, string perPage = null)
        {
            ApiResponse<List<OAuthApp>> localVarResponse = await UsersUserIdOauthAppsAuthorizedGetAsyncWithHttpInfo(userId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get authorized OAuth apps Get a page of OAuth 2.0 client applications authorized to access a user&#39;s account. ##### Permissions Must be authenticated as the user or have &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of apps per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;OAuthApp&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OAuthApp>>> UsersUserIdOauthAppsAuthorizedGetAsyncWithHttpInfo (string userId, string page = null, string perPage = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling OAuthApi->UsersUserIdOauthAppsAuthorizedGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<OAuthApp>>("/users/{user_id}/oauth/apps/authorized", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdOauthAppsAuthorizedGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
