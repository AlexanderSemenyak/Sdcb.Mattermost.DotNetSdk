/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Autocomplete users
        /// </summary>
        /// <remarks>
        /// Get a list of users for the purpose of autocompleting based on the provided search term. Specify a combination of &#x60;team_id&#x60; and &#x60;channel_id&#x60; to filter results further. ##### Permissions Requires an active session and &#x60;view_team&#x60; and &#x60;read_channel&#x60; on any teams or channels used to filter the results further. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Username, nickname first name or last name</param>
        /// <param name="teamId">Team ID (optional)</param>
        /// <param name="channelId">Channel ID (optional)</param>
        /// <param name="limit">The maximum number of users to return in each subresult  __Available as of server version 5.6. Defaults to &#x60;100&#x60; if not provided or on an earlier server version.__  (optional, default to 100)</param>
        /// <returns>UserAutocomplete</returns>
        UserAutocomplete UsersAutocompleteGet (string name, string teamId = null, string channelId = null, int? limit = null);

        /// <summary>
        /// Autocomplete users
        /// </summary>
        /// <remarks>
        /// Get a list of users for the purpose of autocompleting based on the provided search term. Specify a combination of &#x60;team_id&#x60; and &#x60;channel_id&#x60; to filter results further. ##### Permissions Requires an active session and &#x60;view_team&#x60; and &#x60;read_channel&#x60; on any teams or channels used to filter the results further. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Username, nickname first name or last name</param>
        /// <param name="teamId">Team ID (optional)</param>
        /// <param name="channelId">Channel ID (optional)</param>
        /// <param name="limit">The maximum number of users to return in each subresult  __Available as of server version 5.6. Defaults to &#x60;100&#x60; if not provided or on an earlier server version.__  (optional, default to 100)</param>
        /// <returns>ApiResponse of UserAutocomplete</returns>
        ApiResponse<UserAutocomplete> UsersAutocompleteGetWithHttpInfo (string name, string teamId = null, string channelId = null, int? limit = null);
        /// <summary>
        /// Get a user by email
        /// </summary>
        /// <remarks>
        /// Get a user object by providing a user email. Sensitive information will be sanitized out. ##### Permissions Requires an active session and for the current session to be able to view another user&#39;s email based on the server&#39;s privacy settings. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User Email</param>
        /// <returns>User</returns>
        User UsersEmailEmailGet (string email);

        /// <summary>
        /// Get a user by email
        /// </summary>
        /// <remarks>
        /// Get a user object by providing a user email. Sensitive information will be sanitized out. ##### Permissions Requires an active session and for the current session to be able to view another user&#39;s email based on the server&#39;s privacy settings. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User Email</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UsersEmailEmailGetWithHttpInfo (string email);
        /// <summary>
        /// Verify user email
        /// </summary>
        /// <remarks>
        /// Verify the email used by a user to sign-up their account with. ##### Permissions No permissions required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        StatusOK UsersEmailVerifyPost (InlineObject13 body);

        /// <summary>
        /// Verify user email
        /// </summary>
        /// <remarks>
        /// Verify the email used by a user to sign-up their account with. ##### Permissions No permissions required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersEmailVerifyPostWithHttpInfo (InlineObject13 body);
        /// <summary>
        /// Send verification email
        /// </summary>
        /// <remarks>
        /// Send an email with a verification link to a user that has an email matching the one in the request body. This endpoint will return success even if the email does not match any users on the system. ##### Permissions No permissions required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        StatusOK UsersEmailVerifySendPost (InlineObject14 body);

        /// <summary>
        /// Send verification email
        /// </summary>
        /// <remarks>
        /// Send an email with a verification link to a user that has an email matching the one in the request body. This endpoint will return success even if the email does not match any users on the system. ##### Permissions No permissions required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersEmailVerifySendPostWithHttpInfo (InlineObject14 body);
        /// <summary>
        /// Get users
        /// </summary>
        /// <remarks>
        /// Get a page of a list of users. Based on query string parameters, select users from a team, channel, or select users not in a specific channel.  Since server version 4.0, some basic sorting is available using the &#x60;sort&#x60; query parameter. Sorting is currently only supported when selecting users on a team. ##### Permissions Requires an active session and (if specified) membership to the channel or team being selected from. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. There is a maximum limit of 200 users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="inTeam">The ID of the team to get users for. (optional)</param>
        /// <param name="notInTeam">The ID of the team to exclude users for. Must not be used with \&quot;in_team\&quot; query parameter. (optional)</param>
        /// <param name="inChannel">The ID of the channel to get users for. (optional)</param>
        /// <param name="notInChannel">The ID of the channel to exclude users for. Must be used with \&quot;in_channel\&quot; query parameter. (optional)</param>
        /// <param name="groupConstrained">When used with &#x60;not_in_channel&#x60; or &#x60;not_in_team&#x60;, returns only the users that are allowed to join the channel or team based on its group constrains. (optional)</param>
        /// <param name="withoutTeam">Whether or not to list users that are not on any team. This option takes precendence over &#x60;in_team&#x60;, &#x60;in_channel&#x60;, and &#x60;not_in_channel&#x60;. (optional)</param>
        /// <param name="sort">Sort is only available in conjunction with certain options below. The paging parameter is also always available.  ##### &#x60;in_team&#x60; Can be \&quot;\&quot;, \&quot;last_activity_at\&quot; or \&quot;create_at\&quot;. When left blank, sorting is done by username. __Minimum server version__: 4.0 ##### &#x60;in_channel&#x60; Can be \&quot;\&quot;, \&quot;status\&quot;. When left blank, sorting is done by username. &#x60;status&#x60; will sort by User&#39;s current status (Online, Away, DND, Offline), then by Username. __Minimum server version__: 4.7  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UsersGet (string page = null, string perPage = null, string inTeam = null, string notInTeam = null, string inChannel = null, string notInChannel = null, bool? groupConstrained = null, bool? withoutTeam = null, string sort = null);

        /// <summary>
        /// Get users
        /// </summary>
        /// <remarks>
        /// Get a page of a list of users. Based on query string parameters, select users from a team, channel, or select users not in a specific channel.  Since server version 4.0, some basic sorting is available using the &#x60;sort&#x60; query parameter. Sorting is currently only supported when selecting users on a team. ##### Permissions Requires an active session and (if specified) membership to the channel or team being selected from. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. There is a maximum limit of 200 users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="inTeam">The ID of the team to get users for. (optional)</param>
        /// <param name="notInTeam">The ID of the team to exclude users for. Must not be used with \&quot;in_team\&quot; query parameter. (optional)</param>
        /// <param name="inChannel">The ID of the channel to get users for. (optional)</param>
        /// <param name="notInChannel">The ID of the channel to exclude users for. Must be used with \&quot;in_channel\&quot; query parameter. (optional)</param>
        /// <param name="groupConstrained">When used with &#x60;not_in_channel&#x60; or &#x60;not_in_team&#x60;, returns only the users that are allowed to join the channel or team based on its group constrains. (optional)</param>
        /// <param name="withoutTeam">Whether or not to list users that are not on any team. This option takes precendence over &#x60;in_team&#x60;, &#x60;in_channel&#x60;, and &#x60;not_in_channel&#x60;. (optional)</param>
        /// <param name="sort">Sort is only available in conjunction with certain options below. The paging parameter is also always available.  ##### &#x60;in_team&#x60; Can be \&quot;\&quot;, \&quot;last_activity_at\&quot; or \&quot;create_at\&quot;. When left blank, sorting is done by username. __Minimum server version__: 4.0 ##### &#x60;in_channel&#x60; Can be \&quot;\&quot;, \&quot;status\&quot;. When left blank, sorting is done by username. &#x60;status&#x60; will sort by User&#39;s current status (Online, Away, DND, Offline), then by Username. __Minimum server version__: 4.7  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UsersGetWithHttpInfo (string page = null, string perPage = null, string inTeam = null, string notInTeam = null, string inChannel = null, string notInChannel = null, bool? groupConstrained = null, bool? withoutTeam = null, string sort = null);
        /// <summary>
        /// Get users by group channels ids
        /// </summary>
        /// <remarks>
        /// Get an object containing a key per group channel id in the query and its value as a list of users members of that group channel.  The user must be a member of the group ids in the query, or they will be omitted from the response. ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of group channel ids</param>
        /// <returns>InlineResponse200</returns>
        InlineResponse200 UsersGroupChannelsPost (List<string> body);

        /// <summary>
        /// Get users by group channels ids
        /// </summary>
        /// <remarks>
        /// Get an object containing a key per group channel id in the query and its value as a list of users members of that group channel.  The user must be a member of the group ids in the query, or they will be omitted from the response. ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of group channel ids</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        ApiResponse<InlineResponse200> UsersGroupChannelsPostWithHttpInfo (List<string> body);
        /// <summary>
        /// Get users by ids
        /// </summary>
        /// <remarks>
        /// Get a list of users based on a provided list of user ids. ##### Permissions Requires an active session but no other permissions. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of user ids</param>
        /// <param name="since">Only return users that have been modified since the given Unix timestamp (in milliseconds).  __Minimum server version__: 5.14  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UsersIdsPost (List<string> body, int? since = null);

        /// <summary>
        /// Get users by ids
        /// </summary>
        /// <remarks>
        /// Get a list of users based on a provided list of user ids. ##### Permissions Requires an active session but no other permissions. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of user ids</param>
        /// <param name="since">Only return users that have been modified since the given Unix timestamp (in milliseconds).  __Minimum server version__: 5.14  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UsersIdsPostWithHttpInfo (List<string> body, int? since = null);
        /// <summary>
        /// Switch login method
        /// </summary>
        /// <remarks>
        /// Switch a user&#39;s login method from using email to OAuth2/SAML/LDAP or back to email. When switching to OAuth2/SAML, account switching is not complete until the user follows the returned link and completes any steps on the OAuth2/SAML service provider.  To switch from email to OAuth2/SAML, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;password&#x60;.  To switch from OAuth2/SAML to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;new_password&#x60;.  To switch from email to LDAP/AD, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60;, &#x60;password&#x60;, &#x60;ldap_ip&#x60; and &#x60;new_password&#x60; (this is the user&#39;s LDAP password).  To switch from LDAP/AD to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;ldap_ip&#x60;, &#x60;password&#x60; (this is the user&#39;s LDAP password), &#x60;email&#x60;  and &#x60;new_password&#x60;.  Additionally, specify &#x60;mfa_code&#x60; when trying to switch an account on LDAP/AD or email that has MFA activated.  ##### Permissions No current authentication required except when switching from OAuth2/SAML to email. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2003</returns>
        InlineResponse2003 UsersLoginSwitchPost (InlineObject15 body);

        /// <summary>
        /// Switch login method
        /// </summary>
        /// <remarks>
        /// Switch a user&#39;s login method from using email to OAuth2/SAML/LDAP or back to email. When switching to OAuth2/SAML, account switching is not complete until the user follows the returned link and completes any steps on the OAuth2/SAML service provider.  To switch from email to OAuth2/SAML, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;password&#x60;.  To switch from OAuth2/SAML to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;new_password&#x60;.  To switch from email to LDAP/AD, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60;, &#x60;password&#x60;, &#x60;ldap_ip&#x60; and &#x60;new_password&#x60; (this is the user&#39;s LDAP password).  To switch from LDAP/AD to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;ldap_ip&#x60;, &#x60;password&#x60; (this is the user&#39;s LDAP password), &#x60;email&#x60;  and &#x60;new_password&#x60;.  Additionally, specify &#x60;mfa_code&#x60; when trying to switch an account on LDAP/AD or email that has MFA activated.  ##### Permissions No current authentication required except when switching from OAuth2/SAML to email. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        ApiResponse<InlineResponse2003> UsersLoginSwitchPostWithHttpInfo (InlineObject15 body);
        /// <summary>
        /// Check MFA
        /// </summary>
        /// <remarks>
        /// Check if a user has multi-factor authentication active on their account by providing a login id. Used to check whether an MFA code needs to be provided when logging in. ##### Permissions No permission required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2002</returns>
        InlineResponse2002 UsersMfaPost (InlineObject8 body);

        /// <summary>
        /// Check MFA
        /// </summary>
        /// <remarks>
        /// Check if a user has multi-factor authentication active on their account by providing a login id. Used to check whether an MFA code needs to be provided when logging in. ##### Permissions No permission required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        ApiResponse<InlineResponse2002> UsersMfaPostWithHttpInfo (InlineObject8 body);
        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Update the password for a user using a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        StatusOK UsersPasswordResetPost (InlineObject6 body);

        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Update the password for a user using a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersPasswordResetPostWithHttpInfo (InlineObject6 body);
        /// <summary>
        /// Send password reset email
        /// </summary>
        /// <remarks>
        /// Send an email containing a link for resetting the user&#39;s password. The link will contain a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        StatusOK UsersPasswordResetSendPost (InlineObject10 body);

        /// <summary>
        /// Send password reset email
        /// </summary>
        /// <remarks>
        /// Send an email containing a link for resetting the user&#39;s password. The link will contain a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersPasswordResetSendPostWithHttpInfo (InlineObject10 body);
        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// Create a new user on the system. Password is required for email login. For other authentication types such as LDAP or SAML, auth_data and auth_service fields are required. ##### Permissions No permission required but user creation can be controlled by server configuration. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="t">Token id from an email invitation (optional)</param>
        /// <param name="iid">Token id from an invitation link (optional)</param>
        /// <returns>User</returns>
        User UsersPost (InlineObject body, string t = null, string iid = null);

        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// Create a new user on the system. Password is required for email login. For other authentication types such as LDAP or SAML, auth_data and auth_service fields are required. ##### Permissions No permission required but user creation can be controlled by server configuration. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="t">Token id from an email invitation (optional)</param>
        /// <param name="iid">Token id from an invitation link (optional)</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UsersPostWithHttpInfo (InlineObject body, string t = null, string iid = null);
        /// <summary>
        /// Search users
        /// </summary>
        /// <remarks>
        /// Get a list of users based on search criteria provided in the request body. Searches are typically done against username, full name, nickname and email unless otherwise configured by the server. ##### Permissions Requires an active session and &#x60;read_channel&#x60; and/or &#x60;view_team&#x60; permissions for any channels or teams specified in the request body. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UsersSearchPost (InlineObject1 body);

        /// <summary>
        /// Search users
        /// </summary>
        /// <remarks>
        /// Get a list of users based on search criteria provided in the request body. Searches are typically done against username, full name, nickname and email unless otherwise configured by the server. ##### Permissions Requires an active session and &#x60;read_channel&#x60; and/or &#x60;view_team&#x60; permissions for any channels or teams specified in the request body. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UsersSearchPostWithHttpInfo (InlineObject1 body);
        /// <summary>
        /// Attach mobile device
        /// </summary>
        /// <remarks>
        /// Attach a mobile device id to the currently logged in session. This will enable push notifications for a user, if configured by the server. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        StatusOK UsersSessionsDevicePut (InlineObject12 body);

        /// <summary>
        /// Attach mobile device
        /// </summary>
        /// <remarks>
        /// Attach a mobile device id to the currently logged in session. This will enable push notifications for a user, if configured by the server. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersSessionsDevicePutWithHttpInfo (InlineObject12 body);
        /// <summary>
        /// Get total count of users in the system
        /// </summary>
        /// <remarks>
        /// Get a total count of users in the system. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>UsersStats</returns>
        UsersStats UsersStatsGet ();

        /// <summary>
        /// Get total count of users in the system
        /// </summary>
        /// <remarks>
        /// Get a total count of users in the system. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UsersStats</returns>
        ApiResponse<UsersStats> UsersStatsGetWithHttpInfo ();
        /// <summary>
        /// Disable personal access token
        /// </summary>
        /// <remarks>
        /// Disable a personal access token and delete any sessions using the token. The token can be re-enabled using &#x60;/users/tokens/enable&#x60;.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>StatusOK</returns>
        StatusOK UsersTokensDisablePost (InlineObject18 tokenId);

        /// <summary>
        /// Disable personal access token
        /// </summary>
        /// <remarks>
        /// Disable a personal access token and delete any sessions using the token. The token can be re-enabled using &#x60;/users/tokens/enable&#x60;.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersTokensDisablePostWithHttpInfo (InlineObject18 tokenId);
        /// <summary>
        /// Enable personal access token
        /// </summary>
        /// <remarks>
        /// Re-enable a personal access token that has been disabled.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>StatusOK</returns>
        StatusOK UsersTokensEnablePost (InlineObject19 tokenId);

        /// <summary>
        /// Enable personal access token
        /// </summary>
        /// <remarks>
        /// Re-enable a personal access token that has been disabled.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersTokensEnablePostWithHttpInfo (InlineObject19 tokenId);
        /// <summary>
        /// Get user access tokens
        /// </summary>
        /// <remarks>
        /// Get a page of user access tokens for users on the system. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of tokens per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;UserAccessTokenSanitized&gt;</returns>
        List<UserAccessTokenSanitized> UsersTokensGet (string page = null, string perPage = null);

        /// <summary>
        /// Get user access tokens
        /// </summary>
        /// <remarks>
        /// Get a page of user access tokens for users on the system. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of tokens per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;UserAccessTokenSanitized&gt;</returns>
        ApiResponse<List<UserAccessTokenSanitized>> UsersTokensGetWithHttpInfo (string page = null, string perPage = null);
        /// <summary>
        /// Revoke a user access token
        /// </summary>
        /// <remarks>
        /// Revoke a user access token and delete any sessions using the token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>StatusOK</returns>
        StatusOK UsersTokensRevokePost (InlineObject17 tokenId);

        /// <summary>
        /// Revoke a user access token
        /// </summary>
        /// <remarks>
        /// Revoke a user access token and delete any sessions using the token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersTokensRevokePostWithHttpInfo (InlineObject17 tokenId);
        /// <summary>
        /// Search tokens
        /// </summary>
        /// <remarks>
        /// Get a list of tokens based on search criteria provided in the request body. Searches are done against the token id, user id and username.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;UserAccessTokenSanitized&gt;</returns>
        List<UserAccessTokenSanitized> UsersTokensSearchPost (InlineObject20 body);

        /// <summary>
        /// Search tokens
        /// </summary>
        /// <remarks>
        /// Get a list of tokens based on search criteria provided in the request body. Searches are done against the token id, user id and username.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;UserAccessTokenSanitized&gt;</returns>
        ApiResponse<List<UserAccessTokenSanitized>> UsersTokensSearchPostWithHttpInfo (InlineObject20 body);
        /// <summary>
        /// Get a user access token
        /// </summary>
        /// <remarks>
        /// Get a user access token. Does not include the actual authentication token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">User access token GUID</param>
        /// <returns>UserAccessTokenSanitized</returns>
        UserAccessTokenSanitized UsersTokensTokenIdGet (string tokenId);

        /// <summary>
        /// Get a user access token
        /// </summary>
        /// <remarks>
        /// Get a user access token. Does not include the actual authentication token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">User access token GUID</param>
        /// <returns>ApiResponse of UserAccessTokenSanitized</returns>
        ApiResponse<UserAccessTokenSanitized> UsersTokensTokenIdGetWithHttpInfo (string tokenId);
        /// <summary>
        /// Update user active status
        /// </summary>
        /// <remarks>
        /// Update user active or inactive status.  __Since server version 4.6, users using a SSO provider to login can be activated or deactivated with this endpoint. However, if their activation status in Mattermost does not reflect their status in the SSO provider, the next synchronization or login by that user will reset the activation status to that of their account in the SSO provider. Server versions 4.5 and before do not allow activation or deactivation of SSO users from this endpoint.__ ##### Permissions User can deactivate themselves. User with &#x60;manage_system&#x60; permission can activate or deactivate a user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        StatusOK UsersUserIdActivePut (string userId, InlineObject5 body);

        /// <summary>
        /// Update user active status
        /// </summary>
        /// <remarks>
        /// Update user active or inactive status.  __Since server version 4.6, users using a SSO provider to login can be activated or deactivated with this endpoint. However, if their activation status in Mattermost does not reflect their status in the SSO provider, the next synchronization or login by that user will reset the activation status to that of their account in the SSO provider. Server versions 4.5 and before do not allow activation or deactivation of SSO users from this endpoint.__ ##### Permissions User can deactivate themselves. User with &#x60;manage_system&#x60; permission can activate or deactivate a user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersUserIdActivePutWithHttpInfo (string userId, InlineObject5 body);
        /// <summary>
        /// Get user&#39;s audits
        /// </summary>
        /// <remarks>
        /// Get a list of audit by providing the user GUID. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>List&lt;Audit&gt;</returns>
        List<Audit> UsersUserIdAuditsGet (string userId);

        /// <summary>
        /// Get user&#39;s audits
        /// </summary>
        /// <remarks>
        /// Get a list of audit by providing the user GUID. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of List&lt;Audit&gt;</returns>
        ApiResponse<List<Audit>> UsersUserIdAuditsGetWithHttpInfo (string userId);
        /// <summary>
        /// Update a user&#39;s authentication method
        /// </summary>
        /// <remarks>
        /// Updates a user&#39;s authentication method. This can be used to change them to/from LDAP authentication for example.  __Minimum server version__: 4.6 ##### Permissions Must have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>UserAuthData</returns>
        UserAuthData UsersUserIdAuthPut (string userId, UserAuthData body);

        /// <summary>
        /// Update a user&#39;s authentication method
        /// </summary>
        /// <remarks>
        /// Updates a user&#39;s authentication method. This can be used to change them to/from LDAP authentication for example.  __Minimum server version__: 4.6 ##### Permissions Must have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserAuthData</returns>
        ApiResponse<UserAuthData> UsersUserIdAuthPutWithHttpInfo (string userId, UserAuthData body);
        /// <summary>
        /// Deactivate a user account.
        /// </summary>
        /// <remarks>
        /// Deactivates the user and revokes all its sessions by archiving its user object. ##### Permissions Must be logged in as the user being deactivated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>StatusOK</returns>
        StatusOK UsersUserIdDelete (string userId);

        /// <summary>
        /// Deactivate a user account.
        /// </summary>
        /// <remarks>
        /// Deactivates the user and revokes all its sessions by archiving its user object. ##### Permissions Must be logged in as the user being deactivated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersUserIdDeleteWithHttpInfo (string userId);
        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// Get a user a object. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>User</returns>
        User UsersUserIdGet (string userId);

        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// Get a user a object. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UsersUserIdGetWithHttpInfo (string userId);
        /// <summary>
        /// Return user&#39;s default (generated) profile image
        /// </summary>
        /// <remarks>
        /// Returns the default (generated) user profile image based on user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.5 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns></returns>
        void UsersUserIdImageDefaultGet (string userId);

        /// <summary>
        /// Return user&#39;s default (generated) profile image
        /// </summary>
        /// <remarks>
        /// Returns the default (generated) user profile image based on user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.5 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UsersUserIdImageDefaultGetWithHttpInfo (string userId);
        /// <summary>
        /// Delete user&#39;s profile image
        /// </summary>
        /// <remarks>
        /// Delete user&#39;s profile image and reset to default image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 5.5 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>StatusOK</returns>
        StatusOK UsersUserIdImageDelete (string userId);

        /// <summary>
        /// Delete user&#39;s profile image
        /// </summary>
        /// <remarks>
        /// Delete user&#39;s profile image and reset to default image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 5.5 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersUserIdImageDeleteWithHttpInfo (string userId);
        /// <summary>
        /// Get user&#39;s profile image
        /// </summary>
        /// <remarks>
        /// Get a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns></returns>
        void UsersUserIdImageGet (string userId);

        /// <summary>
        /// Get user&#39;s profile image
        /// </summary>
        /// <remarks>
        /// Get a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<object> UsersUserIdImageGetWithHttpInfo (string userId);
        /// <summary>
        /// Set user&#39;s profile image
        /// </summary>
        /// <remarks>
        /// Set a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="image">The image to be uploaded</param>
        /// <returns>StatusOK</returns>
        StatusOK UsersUserIdImagePost (string userId, System.IO.Stream image);

        /// <summary>
        /// Set user&#39;s profile image
        /// </summary>
        /// <remarks>
        /// Set a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="image">The image to be uploaded</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersUserIdImagePostWithHttpInfo (string userId, System.IO.Stream image);
        /// <summary>
        /// Generate MFA secret
        /// </summary>
        /// <remarks>
        /// Generates an multi-factor authentication secret for a user and returns it as a string and as base64 encoded QR code image. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>InlineResponse2001</returns>
        InlineResponse2001 UsersUserIdMfaGeneratePost (string userId);

        /// <summary>
        /// Generate MFA secret
        /// </summary>
        /// <remarks>
        /// Generates an multi-factor authentication secret for a user and returns it as a string and as base64 encoded QR code image. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        ApiResponse<InlineResponse2001> UsersUserIdMfaGeneratePostWithHttpInfo (string userId);
        /// <summary>
        /// Update a user&#39;s MFA
        /// </summary>
        /// <remarks>
        /// Activates multi-factor authentication for the user if &#x60;activate&#x60; is true and a valid &#x60;code&#x60; is provided. If activate is false, then &#x60;code&#x60; is not required and multi-factor authentication is disabled for the user. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        StatusOK UsersUserIdMfaPut (string userId, InlineObject7 body);

        /// <summary>
        /// Update a user&#39;s MFA
        /// </summary>
        /// <remarks>
        /// Activates multi-factor authentication for the user if &#x60;activate&#x60; is true and a valid &#x60;code&#x60; is provided. If activate is false, then &#x60;code&#x60; is not required and multi-factor authentication is disabled for the user. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersUserIdMfaPutWithHttpInfo (string userId, InlineObject7 body);
        /// <summary>
        /// Update a user&#39;s password
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s password. New password must meet password policy set by server configuration. Current password is required if you&#39;re updating your own password. ##### Permissions Must be logged in as the user the password is being changed for or have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        StatusOK UsersUserIdPasswordPut (string userId, InlineObject9 body);

        /// <summary>
        /// Update a user&#39;s password
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s password. New password must meet password policy set by server configuration. Current password is required if you&#39;re updating your own password. ##### Permissions Must be logged in as the user the password is being changed for or have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersUserIdPasswordPutWithHttpInfo (string userId, InlineObject9 body);
        /// <summary>
        /// Patch a user
        /// </summary>
        /// <remarks>
        /// Partially update a user by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>User</returns>
        User UsersUserIdPatchPut (string userId, InlineObject3 body);

        /// <summary>
        /// Patch a user
        /// </summary>
        /// <remarks>
        /// Partially update a user by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UsersUserIdPatchPutWithHttpInfo (string userId, InlineObject3 body);
        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// Update a user by providing the user object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. Any fields not included in the request body will be set to null or reverted to default values. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>User</returns>
        User UsersUserIdPut (string userId, InlineObject2 body);

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// Update a user by providing the user object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. Any fields not included in the request body will be set to null or reverted to default values. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UsersUserIdPutWithHttpInfo (string userId, InlineObject2 body);
        /// <summary>
        /// Update a user&#39;s roles
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s system-level roles. Valid user roles are \&quot;system_user\&quot;, \&quot;system_admin\&quot; or both of them. Overwrites any previously assigned system-level roles. ##### Permissions Must have the &#x60;manage_roles&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="roles"></param>
        /// <returns>StatusOK</returns>
        StatusOK UsersUserIdRolesPut (string userId, InlineObject4 roles);

        /// <summary>
        /// Update a user&#39;s roles
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s system-level roles. Valid user roles are \&quot;system_user\&quot;, \&quot;system_admin\&quot; or both of them. Overwrites any previously assigned system-level roles. ##### Permissions Must have the &#x60;manage_roles&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="roles"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersUserIdRolesPutWithHttpInfo (string userId, InlineObject4 roles);
        /// <summary>
        /// Get user&#39;s sessions
        /// </summary>
        /// <remarks>
        /// Get a list of sessions by providing the user GUID. Sensitive information will be sanitized out. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>List&lt;Session&gt;</returns>
        List<Session> UsersUserIdSessionsGet (string userId);

        /// <summary>
        /// Get user&#39;s sessions
        /// </summary>
        /// <remarks>
        /// Get a list of sessions by providing the user GUID. Sensitive information will be sanitized out. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of List&lt;Session&gt;</returns>
        ApiResponse<List<Session>> UsersUserIdSessionsGetWithHttpInfo (string userId);
        /// <summary>
        /// Revoke all active sessions for a user
        /// </summary>
        /// <remarks>
        /// Revokes all user sessions from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>StatusOK</returns>
        StatusOK UsersUserIdSessionsRevokeAllPost (string userId);

        /// <summary>
        /// Revoke all active sessions for a user
        /// </summary>
        /// <remarks>
        /// Revokes all user sessions from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersUserIdSessionsRevokeAllPostWithHttpInfo (string userId);
        /// <summary>
        /// Revoke a user session
        /// </summary>
        /// <remarks>
        /// Revokes a user session from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        StatusOK UsersUserIdSessionsRevokePost (string userId, InlineObject11 body);

        /// <summary>
        /// Revoke a user session
        /// </summary>
        /// <remarks>
        /// Revokes a user session from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersUserIdSessionsRevokePostWithHttpInfo (string userId, InlineObject11 body);
        /// <summary>
        /// Fetches user&#39;s latest terms of service action if the latest action was for acceptance.
        /// </summary>
        /// <remarks>
        /// Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>UserTermsOfService</returns>
        UserTermsOfService UsersUserIdTermsOfServiceGet (string userId);

        /// <summary>
        /// Fetches user&#39;s latest terms of service action if the latest action was for acceptance.
        /// </summary>
        /// <remarks>
        /// Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of UserTermsOfService</returns>
        ApiResponse<UserTermsOfService> UsersUserIdTermsOfServiceGetWithHttpInfo (string userId);
        /// <summary>
        /// Records user action when they accept or decline custom terms of service
        /// </summary>
        /// <remarks>
        /// Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        StatusOK UsersUserIdTermsOfServicePost (string userId, InlineObject21 body);

        /// <summary>
        /// Records user action when they accept or decline custom terms of service
        /// </summary>
        /// <remarks>
        /// Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersUserIdTermsOfServicePostWithHttpInfo (string userId, InlineObject21 body);
        /// <summary>
        /// Get user access tokens
        /// </summary>
        /// <remarks>
        /// Get a list of user access tokens for a user. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of tokens per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;UserAccessTokenSanitized&gt;</returns>
        List<UserAccessTokenSanitized> UsersUserIdTokensGet (string userId, string page = null, string perPage = null);

        /// <summary>
        /// Get user access tokens
        /// </summary>
        /// <remarks>
        /// Get a list of user access tokens for a user. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of tokens per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;UserAccessTokenSanitized&gt;</returns>
        ApiResponse<List<UserAccessTokenSanitized>> UsersUserIdTokensGetWithHttpInfo (string userId, string page = null, string perPage = null);
        /// <summary>
        /// Create a user access token
        /// </summary>
        /// <remarks>
        /// Generate a user access token that can be used to authenticate with the Mattermost REST API.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="token"></param>
        /// <returns>UserAccessToken</returns>
        UserAccessToken UsersUserIdTokensPost (string userId, InlineObject16 token);

        /// <summary>
        /// Create a user access token
        /// </summary>
        /// <remarks>
        /// Generate a user access token that can be used to authenticate with the Mattermost REST API.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="token"></param>
        /// <returns>ApiResponse of UserAccessToken</returns>
        ApiResponse<UserAccessToken> UsersUserIdTokensPostWithHttpInfo (string userId, InlineObject16 token);
        /// <summary>
        /// Get a user by username
        /// </summary>
        /// <remarks>
        /// Get a user object by providing a username. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username</param>
        /// <returns>User</returns>
        User UsersUsernameUsernameGet (string username);

        /// <summary>
        /// Get a user by username
        /// </summary>
        /// <remarks>
        /// Get a user object by providing a username. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username</param>
        /// <returns>ApiResponse of User</returns>
        ApiResponse<User> UsersUsernameUsernameGetWithHttpInfo (string username);
        /// <summary>
        /// Get users by usernames
        /// </summary>
        /// <remarks>
        /// Get a list of users based on a provided list of usernames. ##### Permissions Requires an active session but no other permissions. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of usernames</param>
        /// <returns>List&lt;User&gt;</returns>
        List<User> UsersUsernamesPost (List<string> body);

        /// <summary>
        /// Get users by usernames
        /// </summary>
        /// <remarks>
        /// Get a list of users based on a provided list of usernames. ##### Permissions Requires an active session but no other permissions. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of usernames</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        ApiResponse<List<User>> UsersUsernamesPostWithHttpInfo (List<string> body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Autocomplete users
        /// </summary>
        /// <remarks>
        /// Get a list of users for the purpose of autocompleting based on the provided search term. Specify a combination of &#x60;team_id&#x60; and &#x60;channel_id&#x60; to filter results further. ##### Permissions Requires an active session and &#x60;view_team&#x60; and &#x60;read_channel&#x60; on any teams or channels used to filter the results further. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Username, nickname first name or last name</param>
        /// <param name="teamId">Team ID (optional)</param>
        /// <param name="channelId">Channel ID (optional)</param>
        /// <param name="limit">The maximum number of users to return in each subresult  __Available as of server version 5.6. Defaults to &#x60;100&#x60; if not provided or on an earlier server version.__  (optional, default to 100)</param>
        /// <returns>Task of UserAutocomplete</returns>
        System.Threading.Tasks.Task<UserAutocomplete> UsersAutocompleteGetAsync (string name, string teamId = null, string channelId = null, int? limit = null);

        /// <summary>
        /// Autocomplete users
        /// </summary>
        /// <remarks>
        /// Get a list of users for the purpose of autocompleting based on the provided search term. Specify a combination of &#x60;team_id&#x60; and &#x60;channel_id&#x60; to filter results further. ##### Permissions Requires an active session and &#x60;view_team&#x60; and &#x60;read_channel&#x60; on any teams or channels used to filter the results further. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Username, nickname first name or last name</param>
        /// <param name="teamId">Team ID (optional)</param>
        /// <param name="channelId">Channel ID (optional)</param>
        /// <param name="limit">The maximum number of users to return in each subresult  __Available as of server version 5.6. Defaults to &#x60;100&#x60; if not provided or on an earlier server version.__  (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (UserAutocomplete)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAutocomplete>> UsersAutocompleteGetAsyncWithHttpInfo (string name, string teamId = null, string channelId = null, int? limit = null);
        /// <summary>
        /// Get a user by email
        /// </summary>
        /// <remarks>
        /// Get a user object by providing a user email. Sensitive information will be sanitized out. ##### Permissions Requires an active session and for the current session to be able to view another user&#39;s email based on the server&#39;s privacy settings. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User Email</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UsersEmailEmailGetAsync (string email);

        /// <summary>
        /// Get a user by email
        /// </summary>
        /// <remarks>
        /// Get a user object by providing a user email. Sensitive information will be sanitized out. ##### Permissions Requires an active session and for the current session to be able to view another user&#39;s email based on the server&#39;s privacy settings. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User Email</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UsersEmailEmailGetAsyncWithHttpInfo (string email);
        /// <summary>
        /// Verify user email
        /// </summary>
        /// <remarks>
        /// Verify the email used by a user to sign-up their account with. ##### Permissions No permissions required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersEmailVerifyPostAsync (InlineObject13 body);

        /// <summary>
        /// Verify user email
        /// </summary>
        /// <remarks>
        /// Verify the email used by a user to sign-up their account with. ##### Permissions No permissions required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersEmailVerifyPostAsyncWithHttpInfo (InlineObject13 body);
        /// <summary>
        /// Send verification email
        /// </summary>
        /// <remarks>
        /// Send an email with a verification link to a user that has an email matching the one in the request body. This endpoint will return success even if the email does not match any users on the system. ##### Permissions No permissions required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersEmailVerifySendPostAsync (InlineObject14 body);

        /// <summary>
        /// Send verification email
        /// </summary>
        /// <remarks>
        /// Send an email with a verification link to a user that has an email matching the one in the request body. This endpoint will return success even if the email does not match any users on the system. ##### Permissions No permissions required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersEmailVerifySendPostAsyncWithHttpInfo (InlineObject14 body);
        /// <summary>
        /// Get users
        /// </summary>
        /// <remarks>
        /// Get a page of a list of users. Based on query string parameters, select users from a team, channel, or select users not in a specific channel.  Since server version 4.0, some basic sorting is available using the &#x60;sort&#x60; query parameter. Sorting is currently only supported when selecting users on a team. ##### Permissions Requires an active session and (if specified) membership to the channel or team being selected from. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. There is a maximum limit of 200 users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="inTeam">The ID of the team to get users for. (optional)</param>
        /// <param name="notInTeam">The ID of the team to exclude users for. Must not be used with \&quot;in_team\&quot; query parameter. (optional)</param>
        /// <param name="inChannel">The ID of the channel to get users for. (optional)</param>
        /// <param name="notInChannel">The ID of the channel to exclude users for. Must be used with \&quot;in_channel\&quot; query parameter. (optional)</param>
        /// <param name="groupConstrained">When used with &#x60;not_in_channel&#x60; or &#x60;not_in_team&#x60;, returns only the users that are allowed to join the channel or team based on its group constrains. (optional)</param>
        /// <param name="withoutTeam">Whether or not to list users that are not on any team. This option takes precendence over &#x60;in_team&#x60;, &#x60;in_channel&#x60;, and &#x60;not_in_channel&#x60;. (optional)</param>
        /// <param name="sort">Sort is only available in conjunction with certain options below. The paging parameter is also always available.  ##### &#x60;in_team&#x60; Can be \&quot;\&quot;, \&quot;last_activity_at\&quot; or \&quot;create_at\&quot;. When left blank, sorting is done by username. __Minimum server version__: 4.0 ##### &#x60;in_channel&#x60; Can be \&quot;\&quot;, \&quot;status\&quot;. When left blank, sorting is done by username. &#x60;status&#x60; will sort by User&#39;s current status (Online, Away, DND, Offline), then by Username. __Minimum server version__: 4.7  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UsersGetAsync (string page = null, string perPage = null, string inTeam = null, string notInTeam = null, string inChannel = null, string notInChannel = null, bool? groupConstrained = null, bool? withoutTeam = null, string sort = null);

        /// <summary>
        /// Get users
        /// </summary>
        /// <remarks>
        /// Get a page of a list of users. Based on query string parameters, select users from a team, channel, or select users not in a specific channel.  Since server version 4.0, some basic sorting is available using the &#x60;sort&#x60; query parameter. Sorting is currently only supported when selecting users on a team. ##### Permissions Requires an active session and (if specified) membership to the channel or team being selected from. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. There is a maximum limit of 200 users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="inTeam">The ID of the team to get users for. (optional)</param>
        /// <param name="notInTeam">The ID of the team to exclude users for. Must not be used with \&quot;in_team\&quot; query parameter. (optional)</param>
        /// <param name="inChannel">The ID of the channel to get users for. (optional)</param>
        /// <param name="notInChannel">The ID of the channel to exclude users for. Must be used with \&quot;in_channel\&quot; query parameter. (optional)</param>
        /// <param name="groupConstrained">When used with &#x60;not_in_channel&#x60; or &#x60;not_in_team&#x60;, returns only the users that are allowed to join the channel or team based on its group constrains. (optional)</param>
        /// <param name="withoutTeam">Whether or not to list users that are not on any team. This option takes precendence over &#x60;in_team&#x60;, &#x60;in_channel&#x60;, and &#x60;not_in_channel&#x60;. (optional)</param>
        /// <param name="sort">Sort is only available in conjunction with certain options below. The paging parameter is also always available.  ##### &#x60;in_team&#x60; Can be \&quot;\&quot;, \&quot;last_activity_at\&quot; or \&quot;create_at\&quot;. When left blank, sorting is done by username. __Minimum server version__: 4.0 ##### &#x60;in_channel&#x60; Can be \&quot;\&quot;, \&quot;status\&quot;. When left blank, sorting is done by username. &#x60;status&#x60; will sort by User&#39;s current status (Online, Away, DND, Offline), then by Username. __Minimum server version__: 4.7  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UsersGetAsyncWithHttpInfo (string page = null, string perPage = null, string inTeam = null, string notInTeam = null, string inChannel = null, string notInChannel = null, bool? groupConstrained = null, bool? withoutTeam = null, string sort = null);
        /// <summary>
        /// Get users by group channels ids
        /// </summary>
        /// <remarks>
        /// Get an object containing a key per group channel id in the query and its value as a list of users members of that group channel.  The user must be a member of the group ids in the query, or they will be omitted from the response. ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of group channel ids</param>
        /// <returns>Task of InlineResponse200</returns>
        System.Threading.Tasks.Task<InlineResponse200> UsersGroupChannelsPostAsync (List<string> body);

        /// <summary>
        /// Get users by group channels ids
        /// </summary>
        /// <remarks>
        /// Get an object containing a key per group channel id in the query and its value as a list of users members of that group channel.  The user must be a member of the group ids in the query, or they will be omitted from the response. ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 5.14 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of group channel ids</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> UsersGroupChannelsPostAsyncWithHttpInfo (List<string> body);
        /// <summary>
        /// Get users by ids
        /// </summary>
        /// <remarks>
        /// Get a list of users based on a provided list of user ids. ##### Permissions Requires an active session but no other permissions. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of user ids</param>
        /// <param name="since">Only return users that have been modified since the given Unix timestamp (in milliseconds).  __Minimum server version__: 5.14  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UsersIdsPostAsync (List<string> body, int? since = null);

        /// <summary>
        /// Get users by ids
        /// </summary>
        /// <remarks>
        /// Get a list of users based on a provided list of user ids. ##### Permissions Requires an active session but no other permissions. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of user ids</param>
        /// <param name="since">Only return users that have been modified since the given Unix timestamp (in milliseconds).  __Minimum server version__: 5.14  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UsersIdsPostAsyncWithHttpInfo (List<string> body, int? since = null);
        /// <summary>
        /// Switch login method
        /// </summary>
        /// <remarks>
        /// Switch a user&#39;s login method from using email to OAuth2/SAML/LDAP or back to email. When switching to OAuth2/SAML, account switching is not complete until the user follows the returned link and completes any steps on the OAuth2/SAML service provider.  To switch from email to OAuth2/SAML, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;password&#x60;.  To switch from OAuth2/SAML to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;new_password&#x60;.  To switch from email to LDAP/AD, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60;, &#x60;password&#x60;, &#x60;ldap_ip&#x60; and &#x60;new_password&#x60; (this is the user&#39;s LDAP password).  To switch from LDAP/AD to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;ldap_ip&#x60;, &#x60;password&#x60; (this is the user&#39;s LDAP password), &#x60;email&#x60;  and &#x60;new_password&#x60;.  Additionally, specify &#x60;mfa_code&#x60; when trying to switch an account on LDAP/AD or email that has MFA activated.  ##### Permissions No current authentication required except when switching from OAuth2/SAML to email. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponse2003</returns>
        System.Threading.Tasks.Task<InlineResponse2003> UsersLoginSwitchPostAsync (InlineObject15 body);

        /// <summary>
        /// Switch login method
        /// </summary>
        /// <remarks>
        /// Switch a user&#39;s login method from using email to OAuth2/SAML/LDAP or back to email. When switching to OAuth2/SAML, account switching is not complete until the user follows the returned link and completes any steps on the OAuth2/SAML service provider.  To switch from email to OAuth2/SAML, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;password&#x60;.  To switch from OAuth2/SAML to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;new_password&#x60;.  To switch from email to LDAP/AD, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60;, &#x60;password&#x60;, &#x60;ldap_ip&#x60; and &#x60;new_password&#x60; (this is the user&#39;s LDAP password).  To switch from LDAP/AD to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;ldap_ip&#x60;, &#x60;password&#x60; (this is the user&#39;s LDAP password), &#x60;email&#x60;  and &#x60;new_password&#x60;.  Additionally, specify &#x60;mfa_code&#x60; when trying to switch an account on LDAP/AD or email that has MFA activated.  ##### Permissions No current authentication required except when switching from OAuth2/SAML to email. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> UsersLoginSwitchPostAsyncWithHttpInfo (InlineObject15 body);
        /// <summary>
        /// Check MFA
        /// </summary>
        /// <remarks>
        /// Check if a user has multi-factor authentication active on their account by providing a login id. Used to check whether an MFA code needs to be provided when logging in. ##### Permissions No permission required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponse2002</returns>
        System.Threading.Tasks.Task<InlineResponse2002> UsersMfaPostAsync (InlineObject8 body);

        /// <summary>
        /// Check MFA
        /// </summary>
        /// <remarks>
        /// Check if a user has multi-factor authentication active on their account by providing a login id. Used to check whether an MFA code needs to be provided when logging in. ##### Permissions No permission required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> UsersMfaPostAsyncWithHttpInfo (InlineObject8 body);
        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Update the password for a user using a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersPasswordResetPostAsync (InlineObject6 body);

        /// <summary>
        /// Reset password
        /// </summary>
        /// <remarks>
        /// Update the password for a user using a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersPasswordResetPostAsyncWithHttpInfo (InlineObject6 body);
        /// <summary>
        /// Send password reset email
        /// </summary>
        /// <remarks>
        /// Send an email containing a link for resetting the user&#39;s password. The link will contain a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersPasswordResetSendPostAsync (InlineObject10 body);

        /// <summary>
        /// Send password reset email
        /// </summary>
        /// <remarks>
        /// Send an email containing a link for resetting the user&#39;s password. The link will contain a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersPasswordResetSendPostAsyncWithHttpInfo (InlineObject10 body);
        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// Create a new user on the system. Password is required for email login. For other authentication types such as LDAP or SAML, auth_data and auth_service fields are required. ##### Permissions No permission required but user creation can be controlled by server configuration. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="t">Token id from an email invitation (optional)</param>
        /// <param name="iid">Token id from an invitation link (optional)</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UsersPostAsync (InlineObject body, string t = null, string iid = null);

        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// Create a new user on the system. Password is required for email login. For other authentication types such as LDAP or SAML, auth_data and auth_service fields are required. ##### Permissions No permission required but user creation can be controlled by server configuration. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="t">Token id from an email invitation (optional)</param>
        /// <param name="iid">Token id from an invitation link (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UsersPostAsyncWithHttpInfo (InlineObject body, string t = null, string iid = null);
        /// <summary>
        /// Search users
        /// </summary>
        /// <remarks>
        /// Get a list of users based on search criteria provided in the request body. Searches are typically done against username, full name, nickname and email unless otherwise configured by the server. ##### Permissions Requires an active session and &#x60;read_channel&#x60; and/or &#x60;view_team&#x60; permissions for any channels or teams specified in the request body. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UsersSearchPostAsync (InlineObject1 body);

        /// <summary>
        /// Search users
        /// </summary>
        /// <remarks>
        /// Get a list of users based on search criteria provided in the request body. Searches are typically done against username, full name, nickname and email unless otherwise configured by the server. ##### Permissions Requires an active session and &#x60;read_channel&#x60; and/or &#x60;view_team&#x60; permissions for any channels or teams specified in the request body. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UsersSearchPostAsyncWithHttpInfo (InlineObject1 body);
        /// <summary>
        /// Attach mobile device
        /// </summary>
        /// <remarks>
        /// Attach a mobile device id to the currently logged in session. This will enable push notifications for a user, if configured by the server. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersSessionsDevicePutAsync (InlineObject12 body);

        /// <summary>
        /// Attach mobile device
        /// </summary>
        /// <remarks>
        /// Attach a mobile device id to the currently logged in session. This will enable push notifications for a user, if configured by the server. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersSessionsDevicePutAsyncWithHttpInfo (InlineObject12 body);
        /// <summary>
        /// Get total count of users in the system
        /// </summary>
        /// <remarks>
        /// Get a total count of users in the system. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UsersStats</returns>
        System.Threading.Tasks.Task<UsersStats> UsersStatsGetAsync ();

        /// <summary>
        /// Get total count of users in the system
        /// </summary>
        /// <remarks>
        /// Get a total count of users in the system. ##### Permissions Must be authenticated. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UsersStats)</returns>
        System.Threading.Tasks.Task<ApiResponse<UsersStats>> UsersStatsGetAsyncWithHttpInfo ();
        /// <summary>
        /// Disable personal access token
        /// </summary>
        /// <remarks>
        /// Disable a personal access token and delete any sessions using the token. The token can be re-enabled using &#x60;/users/tokens/enable&#x60;.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersTokensDisablePostAsync (InlineObject18 tokenId);

        /// <summary>
        /// Disable personal access token
        /// </summary>
        /// <remarks>
        /// Disable a personal access token and delete any sessions using the token. The token can be re-enabled using &#x60;/users/tokens/enable&#x60;.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersTokensDisablePostAsyncWithHttpInfo (InlineObject18 tokenId);
        /// <summary>
        /// Enable personal access token
        /// </summary>
        /// <remarks>
        /// Re-enable a personal access token that has been disabled.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersTokensEnablePostAsync (InlineObject19 tokenId);

        /// <summary>
        /// Enable personal access token
        /// </summary>
        /// <remarks>
        /// Re-enable a personal access token that has been disabled.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersTokensEnablePostAsyncWithHttpInfo (InlineObject19 tokenId);
        /// <summary>
        /// Get user access tokens
        /// </summary>
        /// <remarks>
        /// Get a page of user access tokens for users on the system. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of tokens per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;UserAccessTokenSanitized&gt;</returns>
        System.Threading.Tasks.Task<List<UserAccessTokenSanitized>> UsersTokensGetAsync (string page = null, string perPage = null);

        /// <summary>
        /// Get user access tokens
        /// </summary>
        /// <remarks>
        /// Get a page of user access tokens for users on the system. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of tokens per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;UserAccessTokenSanitized&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserAccessTokenSanitized>>> UsersTokensGetAsyncWithHttpInfo (string page = null, string perPage = null);
        /// <summary>
        /// Revoke a user access token
        /// </summary>
        /// <remarks>
        /// Revoke a user access token and delete any sessions using the token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersTokensRevokePostAsync (InlineObject17 tokenId);

        /// <summary>
        /// Revoke a user access token
        /// </summary>
        /// <remarks>
        /// Revoke a user access token and delete any sessions using the token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersTokensRevokePostAsyncWithHttpInfo (InlineObject17 tokenId);
        /// <summary>
        /// Search tokens
        /// </summary>
        /// <remarks>
        /// Get a list of tokens based on search criteria provided in the request body. Searches are done against the token id, user id and username.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;UserAccessTokenSanitized&gt;</returns>
        System.Threading.Tasks.Task<List<UserAccessTokenSanitized>> UsersTokensSearchPostAsync (InlineObject20 body);

        /// <summary>
        /// Search tokens
        /// </summary>
        /// <remarks>
        /// Get a list of tokens based on search criteria provided in the request body. Searches are done against the token id, user id and username.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;UserAccessTokenSanitized&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserAccessTokenSanitized>>> UsersTokensSearchPostAsyncWithHttpInfo (InlineObject20 body);
        /// <summary>
        /// Get a user access token
        /// </summary>
        /// <remarks>
        /// Get a user access token. Does not include the actual authentication token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">User access token GUID</param>
        /// <returns>Task of UserAccessTokenSanitized</returns>
        System.Threading.Tasks.Task<UserAccessTokenSanitized> UsersTokensTokenIdGetAsync (string tokenId);

        /// <summary>
        /// Get a user access token
        /// </summary>
        /// <remarks>
        /// Get a user access token. Does not include the actual authentication token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">User access token GUID</param>
        /// <returns>Task of ApiResponse (UserAccessTokenSanitized)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAccessTokenSanitized>> UsersTokensTokenIdGetAsyncWithHttpInfo (string tokenId);
        /// <summary>
        /// Update user active status
        /// </summary>
        /// <remarks>
        /// Update user active or inactive status.  __Since server version 4.6, users using a SSO provider to login can be activated or deactivated with this endpoint. However, if their activation status in Mattermost does not reflect their status in the SSO provider, the next synchronization or login by that user will reset the activation status to that of their account in the SSO provider. Server versions 4.5 and before do not allow activation or deactivation of SSO users from this endpoint.__ ##### Permissions User can deactivate themselves. User with &#x60;manage_system&#x60; permission can activate or deactivate a user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersUserIdActivePutAsync (string userId, InlineObject5 body);

        /// <summary>
        /// Update user active status
        /// </summary>
        /// <remarks>
        /// Update user active or inactive status.  __Since server version 4.6, users using a SSO provider to login can be activated or deactivated with this endpoint. However, if their activation status in Mattermost does not reflect their status in the SSO provider, the next synchronization or login by that user will reset the activation status to that of their account in the SSO provider. Server versions 4.5 and before do not allow activation or deactivation of SSO users from this endpoint.__ ##### Permissions User can deactivate themselves. User with &#x60;manage_system&#x60; permission can activate or deactivate a user. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdActivePutAsyncWithHttpInfo (string userId, InlineObject5 body);
        /// <summary>
        /// Get user&#39;s audits
        /// </summary>
        /// <remarks>
        /// Get a list of audit by providing the user GUID. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of List&lt;Audit&gt;</returns>
        System.Threading.Tasks.Task<List<Audit>> UsersUserIdAuditsGetAsync (string userId);

        /// <summary>
        /// Get user&#39;s audits
        /// </summary>
        /// <remarks>
        /// Get a list of audit by providing the user GUID. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (List&lt;Audit&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Audit>>> UsersUserIdAuditsGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Update a user&#39;s authentication method
        /// </summary>
        /// <remarks>
        /// Updates a user&#39;s authentication method. This can be used to change them to/from LDAP authentication for example.  __Minimum server version__: 4.6 ##### Permissions Must have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of UserAuthData</returns>
        System.Threading.Tasks.Task<UserAuthData> UsersUserIdAuthPutAsync (string userId, UserAuthData body);

        /// <summary>
        /// Update a user&#39;s authentication method
        /// </summary>
        /// <remarks>
        /// Updates a user&#39;s authentication method. This can be used to change them to/from LDAP authentication for example.  __Minimum server version__: 4.6 ##### Permissions Must have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserAuthData)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAuthData>> UsersUserIdAuthPutAsyncWithHttpInfo (string userId, UserAuthData body);
        /// <summary>
        /// Deactivate a user account.
        /// </summary>
        /// <remarks>
        /// Deactivates the user and revokes all its sessions by archiving its user object. ##### Permissions Must be logged in as the user being deactivated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersUserIdDeleteAsync (string userId);

        /// <summary>
        /// Deactivate a user account.
        /// </summary>
        /// <remarks>
        /// Deactivates the user and revokes all its sessions by archiving its user object. ##### Permissions Must be logged in as the user being deactivated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdDeleteAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// Get a user a object. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UsersUserIdGetAsync (string userId);

        /// <summary>
        /// Get a user
        /// </summary>
        /// <remarks>
        /// Get a user a object. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UsersUserIdGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Return user&#39;s default (generated) profile image
        /// </summary>
        /// <remarks>
        /// Returns the default (generated) user profile image based on user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.5 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersUserIdImageDefaultGetAsync (string userId);

        /// <summary>
        /// Return user&#39;s default (generated) profile image
        /// </summary>
        /// <remarks>
        /// Returns the default (generated) user profile image based on user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.5 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UsersUserIdImageDefaultGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Delete user&#39;s profile image
        /// </summary>
        /// <remarks>
        /// Delete user&#39;s profile image and reset to default image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 5.5 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersUserIdImageDeleteAsync (string userId);

        /// <summary>
        /// Delete user&#39;s profile image
        /// </summary>
        /// <remarks>
        /// Delete user&#39;s profile image and reset to default image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 5.5 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdImageDeleteAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Get user&#39;s profile image
        /// </summary>
        /// <remarks>
        /// Get a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task UsersUserIdImageGetAsync (string userId);

        /// <summary>
        /// Get user&#39;s profile image
        /// </summary>
        /// <remarks>
        /// Get a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<object>> UsersUserIdImageGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Set user&#39;s profile image
        /// </summary>
        /// <remarks>
        /// Set a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="image">The image to be uploaded</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersUserIdImagePostAsync (string userId, System.IO.Stream image);

        /// <summary>
        /// Set user&#39;s profile image
        /// </summary>
        /// <remarks>
        /// Set a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="image">The image to be uploaded</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdImagePostAsyncWithHttpInfo (string userId, System.IO.Stream image);
        /// <summary>
        /// Generate MFA secret
        /// </summary>
        /// <remarks>
        /// Generates an multi-factor authentication secret for a user and returns it as a string and as base64 encoded QR code image. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of InlineResponse2001</returns>
        System.Threading.Tasks.Task<InlineResponse2001> UsersUserIdMfaGeneratePostAsync (string userId);

        /// <summary>
        /// Generate MFA secret
        /// </summary>
        /// <remarks>
        /// Generates an multi-factor authentication secret for a user and returns it as a string and as base64 encoded QR code image. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> UsersUserIdMfaGeneratePostAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Update a user&#39;s MFA
        /// </summary>
        /// <remarks>
        /// Activates multi-factor authentication for the user if &#x60;activate&#x60; is true and a valid &#x60;code&#x60; is provided. If activate is false, then &#x60;code&#x60; is not required and multi-factor authentication is disabled for the user. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersUserIdMfaPutAsync (string userId, InlineObject7 body);

        /// <summary>
        /// Update a user&#39;s MFA
        /// </summary>
        /// <remarks>
        /// Activates multi-factor authentication for the user if &#x60;activate&#x60; is true and a valid &#x60;code&#x60; is provided. If activate is false, then &#x60;code&#x60; is not required and multi-factor authentication is disabled for the user. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdMfaPutAsyncWithHttpInfo (string userId, InlineObject7 body);
        /// <summary>
        /// Update a user&#39;s password
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s password. New password must meet password policy set by server configuration. Current password is required if you&#39;re updating your own password. ##### Permissions Must be logged in as the user the password is being changed for or have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersUserIdPasswordPutAsync (string userId, InlineObject9 body);

        /// <summary>
        /// Update a user&#39;s password
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s password. New password must meet password policy set by server configuration. Current password is required if you&#39;re updating your own password. ##### Permissions Must be logged in as the user the password is being changed for or have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdPasswordPutAsyncWithHttpInfo (string userId, InlineObject9 body);
        /// <summary>
        /// Patch a user
        /// </summary>
        /// <remarks>
        /// Partially update a user by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UsersUserIdPatchPutAsync (string userId, InlineObject3 body);

        /// <summary>
        /// Patch a user
        /// </summary>
        /// <remarks>
        /// Partially update a user by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UsersUserIdPatchPutAsyncWithHttpInfo (string userId, InlineObject3 body);
        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// Update a user by providing the user object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. Any fields not included in the request body will be set to null or reverted to default values. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UsersUserIdPutAsync (string userId, InlineObject2 body);

        /// <summary>
        /// Update a user
        /// </summary>
        /// <remarks>
        /// Update a user by providing the user object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. Any fields not included in the request body will be set to null or reverted to default values. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UsersUserIdPutAsyncWithHttpInfo (string userId, InlineObject2 body);
        /// <summary>
        /// Update a user&#39;s roles
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s system-level roles. Valid user roles are \&quot;system_user\&quot;, \&quot;system_admin\&quot; or both of them. Overwrites any previously assigned system-level roles. ##### Permissions Must have the &#x60;manage_roles&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="roles"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersUserIdRolesPutAsync (string userId, InlineObject4 roles);

        /// <summary>
        /// Update a user&#39;s roles
        /// </summary>
        /// <remarks>
        /// Update a user&#39;s system-level roles. Valid user roles are \&quot;system_user\&quot;, \&quot;system_admin\&quot; or both of them. Overwrites any previously assigned system-level roles. ##### Permissions Must have the &#x60;manage_roles&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="roles"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdRolesPutAsyncWithHttpInfo (string userId, InlineObject4 roles);
        /// <summary>
        /// Get user&#39;s sessions
        /// </summary>
        /// <remarks>
        /// Get a list of sessions by providing the user GUID. Sensitive information will be sanitized out. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of List&lt;Session&gt;</returns>
        System.Threading.Tasks.Task<List<Session>> UsersUserIdSessionsGetAsync (string userId);

        /// <summary>
        /// Get user&#39;s sessions
        /// </summary>
        /// <remarks>
        /// Get a list of sessions by providing the user GUID. Sensitive information will be sanitized out. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (List&lt;Session&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Session>>> UsersUserIdSessionsGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Revoke all active sessions for a user
        /// </summary>
        /// <remarks>
        /// Revokes all user sessions from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersUserIdSessionsRevokeAllPostAsync (string userId);

        /// <summary>
        /// Revoke all active sessions for a user
        /// </summary>
        /// <remarks>
        /// Revokes all user sessions from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 4.4 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdSessionsRevokeAllPostAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Revoke a user session
        /// </summary>
        /// <remarks>
        /// Revokes a user session from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersUserIdSessionsRevokePostAsync (string userId, InlineObject11 body);

        /// <summary>
        /// Revoke a user session
        /// </summary>
        /// <remarks>
        /// Revokes a user session from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdSessionsRevokePostAsyncWithHttpInfo (string userId, InlineObject11 body);
        /// <summary>
        /// Fetches user&#39;s latest terms of service action if the latest action was for acceptance.
        /// </summary>
        /// <remarks>
        /// Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of UserTermsOfService</returns>
        System.Threading.Tasks.Task<UserTermsOfService> UsersUserIdTermsOfServiceGetAsync (string userId);

        /// <summary>
        /// Fetches user&#39;s latest terms of service action if the latest action was for acceptance.
        /// </summary>
        /// <remarks>
        /// Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (UserTermsOfService)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserTermsOfService>> UsersUserIdTermsOfServiceGetAsyncWithHttpInfo (string userId);
        /// <summary>
        /// Records user action when they accept or decline custom terms of service
        /// </summary>
        /// <remarks>
        /// Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersUserIdTermsOfServicePostAsync (string userId, InlineObject21 body);

        /// <summary>
        /// Records user action when they accept or decline custom terms of service
        /// </summary>
        /// <remarks>
        /// Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdTermsOfServicePostAsyncWithHttpInfo (string userId, InlineObject21 body);
        /// <summary>
        /// Get user access tokens
        /// </summary>
        /// <remarks>
        /// Get a list of user access tokens for a user. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of tokens per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;UserAccessTokenSanitized&gt;</returns>
        System.Threading.Tasks.Task<List<UserAccessTokenSanitized>> UsersUserIdTokensGetAsync (string userId, string page = null, string perPage = null);

        /// <summary>
        /// Get user access tokens
        /// </summary>
        /// <remarks>
        /// Get a list of user access tokens for a user. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of tokens per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;UserAccessTokenSanitized&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<UserAccessTokenSanitized>>> UsersUserIdTokensGetAsyncWithHttpInfo (string userId, string page = null, string perPage = null);
        /// <summary>
        /// Create a user access token
        /// </summary>
        /// <remarks>
        /// Generate a user access token that can be used to authenticate with the Mattermost REST API.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="token"></param>
        /// <returns>Task of UserAccessToken</returns>
        System.Threading.Tasks.Task<UserAccessToken> UsersUserIdTokensPostAsync (string userId, InlineObject16 token);

        /// <summary>
        /// Create a user access token
        /// </summary>
        /// <remarks>
        /// Generate a user access token that can be used to authenticate with the Mattermost REST API.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (UserAccessToken)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserAccessToken>> UsersUserIdTokensPostAsyncWithHttpInfo (string userId, InlineObject16 token);
        /// <summary>
        /// Get a user by username
        /// </summary>
        /// <remarks>
        /// Get a user object by providing a username. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username</param>
        /// <returns>Task of User</returns>
        System.Threading.Tasks.Task<User> UsersUsernameUsernameGetAsync (string username);

        /// <summary>
        /// Get a user by username
        /// </summary>
        /// <remarks>
        /// Get a user object by providing a username. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username</param>
        /// <returns>Task of ApiResponse (User)</returns>
        System.Threading.Tasks.Task<ApiResponse<User>> UsersUsernameUsernameGetAsyncWithHttpInfo (string username);
        /// <summary>
        /// Get users by usernames
        /// </summary>
        /// <remarks>
        /// Get a list of users based on a provided list of usernames. ##### Permissions Requires an active session but no other permissions. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of usernames</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        System.Threading.Tasks.Task<List<User>> UsersUsernamesPostAsync (List<string> body);

        /// <summary>
        /// Get users by usernames
        /// </summary>
        /// <remarks>
        /// Get a list of users based on a provided list of usernames. ##### Permissions Requires an active session but no other permissions. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of usernames</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<User>>> UsersUsernamesPostAsyncWithHttpInfo (List<string> body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUsersApi : IUsersApiSync, IUsersApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UsersApi : IUsersApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UsersApi(string basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UsersApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UsersApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UsersApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Autocomplete users Get a list of users for the purpose of autocompleting based on the provided search term. Specify a combination of &#x60;team_id&#x60; and &#x60;channel_id&#x60; to filter results further. ##### Permissions Requires an active session and &#x60;view_team&#x60; and &#x60;read_channel&#x60; on any teams or channels used to filter the results further. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Username, nickname first name or last name</param>
        /// <param name="teamId">Team ID (optional)</param>
        /// <param name="channelId">Channel ID (optional)</param>
        /// <param name="limit">The maximum number of users to return in each subresult  __Available as of server version 5.6. Defaults to &#x60;100&#x60; if not provided or on an earlier server version.__  (optional, default to 100)</param>
        /// <returns>UserAutocomplete</returns>
        public UserAutocomplete UsersAutocompleteGet (string name, string teamId = null, string channelId = null, int? limit = null)
        {
            ApiResponse<UserAutocomplete> localVarResponse = UsersAutocompleteGetWithHttpInfo(name, teamId, channelId, limit);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Autocomplete users Get a list of users for the purpose of autocompleting based on the provided search term. Specify a combination of &#x60;team_id&#x60; and &#x60;channel_id&#x60; to filter results further. ##### Permissions Requires an active session and &#x60;view_team&#x60; and &#x60;read_channel&#x60; on any teams or channels used to filter the results further. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Username, nickname first name or last name</param>
        /// <param name="teamId">Team ID (optional)</param>
        /// <param name="channelId">Channel ID (optional)</param>
        /// <param name="limit">The maximum number of users to return in each subresult  __Available as of server version 5.6. Defaults to &#x60;100&#x60; if not provided or on an earlier server version.__  (optional, default to 100)</param>
        /// <returns>ApiResponse of UserAutocomplete</returns>
        public ApiResponse<UserAutocomplete> UsersAutocompleteGetWithHttpInfo (string name, string teamId = null, string channelId = null, int? limit = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling UsersApi->UsersAutocompleteGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (teamId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "team_id", teamId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (channelId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "channel_id", channelId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (name != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< UserAutocomplete >("/users/autocomplete", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersAutocompleteGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Autocomplete users Get a list of users for the purpose of autocompleting based on the provided search term. Specify a combination of &#x60;team_id&#x60; and &#x60;channel_id&#x60; to filter results further. ##### Permissions Requires an active session and &#x60;view_team&#x60; and &#x60;read_channel&#x60; on any teams or channels used to filter the results further. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Username, nickname first name or last name</param>
        /// <param name="teamId">Team ID (optional)</param>
        /// <param name="channelId">Channel ID (optional)</param>
        /// <param name="limit">The maximum number of users to return in each subresult  __Available as of server version 5.6. Defaults to &#x60;100&#x60; if not provided or on an earlier server version.__  (optional, default to 100)</param>
        /// <returns>Task of UserAutocomplete</returns>
        public async System.Threading.Tasks.Task<UserAutocomplete> UsersAutocompleteGetAsync (string name, string teamId = null, string channelId = null, int? limit = null)
        {
            ApiResponse<UserAutocomplete> localVarResponse = await UsersAutocompleteGetAsyncWithHttpInfo(name, teamId, channelId, limit);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Autocomplete users Get a list of users for the purpose of autocompleting based on the provided search term. Specify a combination of &#x60;team_id&#x60; and &#x60;channel_id&#x60; to filter results further. ##### Permissions Requires an active session and &#x60;view_team&#x60; and &#x60;read_channel&#x60; on any teams or channels used to filter the results further. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">Username, nickname first name or last name</param>
        /// <param name="teamId">Team ID (optional)</param>
        /// <param name="channelId">Channel ID (optional)</param>
        /// <param name="limit">The maximum number of users to return in each subresult  __Available as of server version 5.6. Defaults to &#x60;100&#x60; if not provided or on an earlier server version.__  (optional, default to 100)</param>
        /// <returns>Task of ApiResponse (UserAutocomplete)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAutocomplete>> UsersAutocompleteGetAsyncWithHttpInfo (string name, string teamId = null, string channelId = null, int? limit = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling UsersApi->UsersAutocompleteGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (teamId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "team_id", teamId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (channelId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "channel_id", channelId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (name != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "name", name))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (limit != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "limit", limit))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<UserAutocomplete>("/users/autocomplete", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersAutocompleteGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a user by email Get a user object by providing a user email. Sensitive information will be sanitized out. ##### Permissions Requires an active session and for the current session to be able to view another user&#39;s email based on the server&#39;s privacy settings. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User Email</param>
        /// <returns>User</returns>
        public User UsersEmailEmailGet (string email)
        {
            ApiResponse<User> localVarResponse = UsersEmailEmailGetWithHttpInfo(email);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user by email Get a user object by providing a user email. Sensitive information will be sanitized out. ##### Permissions Requires an active session and for the current session to be able to view another user&#39;s email based on the server&#39;s privacy settings. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User Email</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> UsersEmailEmailGetWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling UsersApi->UsersEmailEmailGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (email != null)
                requestOptions.PathParameters.Add("email", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(email)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< User >("/users/email/{email}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersEmailEmailGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a user by email Get a user object by providing a user email. Sensitive information will be sanitized out. ##### Permissions Requires an active session and for the current session to be able to view another user&#39;s email based on the server&#39;s privacy settings. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User Email</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UsersEmailEmailGetAsync (string email)
        {
            ApiResponse<User> localVarResponse = await UsersEmailEmailGetAsyncWithHttpInfo(email);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user by email Get a user object by providing a user email. Sensitive information will be sanitized out. ##### Permissions Requires an active session and for the current session to be able to view another user&#39;s email based on the server&#39;s privacy settings. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="email">User Email</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UsersEmailEmailGetAsyncWithHttpInfo (string email)
        {
            // verify the required parameter 'email' is set
            if (email == null)
                throw new ApiException(400, "Missing required parameter 'email' when calling UsersApi->UsersEmailEmailGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (email != null)
                requestOptions.PathParameters.Add("email", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(email)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<User>("/users/email/{email}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersEmailEmailGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Verify user email Verify the email used by a user to sign-up their account with. ##### Permissions No permissions required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersEmailVerifyPost (InlineObject13 body)
        {
            ApiResponse<StatusOK> localVarResponse = UsersEmailVerifyPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Verify user email Verify the email used by a user to sign-up their account with. ##### Permissions No permissions required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersEmailVerifyPostWithHttpInfo (InlineObject13 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersEmailVerifyPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/users/email/verify", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersEmailVerifyPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Verify user email Verify the email used by a user to sign-up their account with. ##### Permissions No permissions required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersEmailVerifyPostAsync (InlineObject13 body)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersEmailVerifyPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Verify user email Verify the email used by a user to sign-up their account with. ##### Permissions No permissions required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersEmailVerifyPostAsyncWithHttpInfo (InlineObject13 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersEmailVerifyPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/users/email/verify", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersEmailVerifyPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Send verification email Send an email with a verification link to a user that has an email matching the one in the request body. This endpoint will return success even if the email does not match any users on the system. ##### Permissions No permissions required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersEmailVerifySendPost (InlineObject14 body)
        {
            ApiResponse<StatusOK> localVarResponse = UsersEmailVerifySendPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send verification email Send an email with a verification link to a user that has an email matching the one in the request body. This endpoint will return success even if the email does not match any users on the system. ##### Permissions No permissions required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersEmailVerifySendPostWithHttpInfo (InlineObject14 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersEmailVerifySendPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/users/email/verify/send", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersEmailVerifySendPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Send verification email Send an email with a verification link to a user that has an email matching the one in the request body. This endpoint will return success even if the email does not match any users on the system. ##### Permissions No permissions required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersEmailVerifySendPostAsync (InlineObject14 body)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersEmailVerifySendPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send verification email Send an email with a verification link to a user that has an email matching the one in the request body. This endpoint will return success even if the email does not match any users on the system. ##### Permissions No permissions required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersEmailVerifySendPostAsyncWithHttpInfo (InlineObject14 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersEmailVerifySendPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/users/email/verify/send", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersEmailVerifySendPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get users Get a page of a list of users. Based on query string parameters, select users from a team, channel, or select users not in a specific channel.  Since server version 4.0, some basic sorting is available using the &#x60;sort&#x60; query parameter. Sorting is currently only supported when selecting users on a team. ##### Permissions Requires an active session and (if specified) membership to the channel or team being selected from. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. There is a maximum limit of 200 users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="inTeam">The ID of the team to get users for. (optional)</param>
        /// <param name="notInTeam">The ID of the team to exclude users for. Must not be used with \&quot;in_team\&quot; query parameter. (optional)</param>
        /// <param name="inChannel">The ID of the channel to get users for. (optional)</param>
        /// <param name="notInChannel">The ID of the channel to exclude users for. Must be used with \&quot;in_channel\&quot; query parameter. (optional)</param>
        /// <param name="groupConstrained">When used with &#x60;not_in_channel&#x60; or &#x60;not_in_team&#x60;, returns only the users that are allowed to join the channel or team based on its group constrains. (optional)</param>
        /// <param name="withoutTeam">Whether or not to list users that are not on any team. This option takes precendence over &#x60;in_team&#x60;, &#x60;in_channel&#x60;, and &#x60;not_in_channel&#x60;. (optional)</param>
        /// <param name="sort">Sort is only available in conjunction with certain options below. The paging parameter is also always available.  ##### &#x60;in_team&#x60; Can be \&quot;\&quot;, \&quot;last_activity_at\&quot; or \&quot;create_at\&quot;. When left blank, sorting is done by username. __Minimum server version__: 4.0 ##### &#x60;in_channel&#x60; Can be \&quot;\&quot;, \&quot;status\&quot;. When left blank, sorting is done by username. &#x60;status&#x60; will sort by User&#39;s current status (Online, Away, DND, Offline), then by Username. __Minimum server version__: 4.7  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UsersGet (string page = null, string perPage = null, string inTeam = null, string notInTeam = null, string inChannel = null, string notInChannel = null, bool? groupConstrained = null, bool? withoutTeam = null, string sort = null)
        {
            ApiResponse<List<User>> localVarResponse = UsersGetWithHttpInfo(page, perPage, inTeam, notInTeam, inChannel, notInChannel, groupConstrained, withoutTeam, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get users Get a page of a list of users. Based on query string parameters, select users from a team, channel, or select users not in a specific channel.  Since server version 4.0, some basic sorting is available using the &#x60;sort&#x60; query parameter. Sorting is currently only supported when selecting users on a team. ##### Permissions Requires an active session and (if specified) membership to the channel or team being selected from. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. There is a maximum limit of 200 users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="inTeam">The ID of the team to get users for. (optional)</param>
        /// <param name="notInTeam">The ID of the team to exclude users for. Must not be used with \&quot;in_team\&quot; query parameter. (optional)</param>
        /// <param name="inChannel">The ID of the channel to get users for. (optional)</param>
        /// <param name="notInChannel">The ID of the channel to exclude users for. Must be used with \&quot;in_channel\&quot; query parameter. (optional)</param>
        /// <param name="groupConstrained">When used with &#x60;not_in_channel&#x60; or &#x60;not_in_team&#x60;, returns only the users that are allowed to join the channel or team based on its group constrains. (optional)</param>
        /// <param name="withoutTeam">Whether or not to list users that are not on any team. This option takes precendence over &#x60;in_team&#x60;, &#x60;in_channel&#x60;, and &#x60;not_in_channel&#x60;. (optional)</param>
        /// <param name="sort">Sort is only available in conjunction with certain options below. The paging parameter is also always available.  ##### &#x60;in_team&#x60; Can be \&quot;\&quot;, \&quot;last_activity_at\&quot; or \&quot;create_at\&quot;. When left blank, sorting is done by username. __Minimum server version__: 4.0 ##### &#x60;in_channel&#x60; Can be \&quot;\&quot;, \&quot;status\&quot;. When left blank, sorting is done by username. &#x60;status&#x60; will sort by User&#39;s current status (Online, Away, DND, Offline), then by Username. __Minimum server version__: 4.7  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse<List<User>> UsersGetWithHttpInfo (string page = null, string perPage = null, string inTeam = null, string notInTeam = null, string inChannel = null, string notInChannel = null, bool? groupConstrained = null, bool? withoutTeam = null, string sort = null)
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (inTeam != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "in_team", inTeam))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (notInTeam != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "not_in_team", notInTeam))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (inChannel != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "in_channel", inChannel))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (notInChannel != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "not_in_channel", notInChannel))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (groupConstrained != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "group_constrained", groupConstrained))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (withoutTeam != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "without_team", withoutTeam))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sort != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<User> >("/users", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get users Get a page of a list of users. Based on query string parameters, select users from a team, channel, or select users not in a specific channel.  Since server version 4.0, some basic sorting is available using the &#x60;sort&#x60; query parameter. Sorting is currently only supported when selecting users on a team. ##### Permissions Requires an active session and (if specified) membership to the channel or team being selected from. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. There is a maximum limit of 200 users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="inTeam">The ID of the team to get users for. (optional)</param>
        /// <param name="notInTeam">The ID of the team to exclude users for. Must not be used with \&quot;in_team\&quot; query parameter. (optional)</param>
        /// <param name="inChannel">The ID of the channel to get users for. (optional)</param>
        /// <param name="notInChannel">The ID of the channel to exclude users for. Must be used with \&quot;in_channel\&quot; query parameter. (optional)</param>
        /// <param name="groupConstrained">When used with &#x60;not_in_channel&#x60; or &#x60;not_in_team&#x60;, returns only the users that are allowed to join the channel or team based on its group constrains. (optional)</param>
        /// <param name="withoutTeam">Whether or not to list users that are not on any team. This option takes precendence over &#x60;in_team&#x60;, &#x60;in_channel&#x60;, and &#x60;not_in_channel&#x60;. (optional)</param>
        /// <param name="sort">Sort is only available in conjunction with certain options below. The paging parameter is also always available.  ##### &#x60;in_team&#x60; Can be \&quot;\&quot;, \&quot;last_activity_at\&quot; or \&quot;create_at\&quot;. When left blank, sorting is done by username. __Minimum server version__: 4.0 ##### &#x60;in_channel&#x60; Can be \&quot;\&quot;, \&quot;status\&quot;. When left blank, sorting is done by username. &#x60;status&#x60; will sort by User&#39;s current status (Online, Away, DND, Offline), then by Username. __Minimum server version__: 4.7  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UsersGetAsync (string page = null, string perPage = null, string inTeam = null, string notInTeam = null, string inChannel = null, string notInChannel = null, bool? groupConstrained = null, bool? withoutTeam = null, string sort = null)
        {
            ApiResponse<List<User>> localVarResponse = await UsersGetAsyncWithHttpInfo(page, perPage, inTeam, notInTeam, inChannel, notInChannel, groupConstrained, withoutTeam, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get users Get a page of a list of users. Based on query string parameters, select users from a team, channel, or select users not in a specific channel.  Since server version 4.0, some basic sorting is available using the &#x60;sort&#x60; query parameter. Sorting is currently only supported when selecting users on a team. ##### Permissions Requires an active session and (if specified) membership to the channel or team being selected from. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of users per page. There is a maximum limit of 200 users per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="inTeam">The ID of the team to get users for. (optional)</param>
        /// <param name="notInTeam">The ID of the team to exclude users for. Must not be used with \&quot;in_team\&quot; query parameter. (optional)</param>
        /// <param name="inChannel">The ID of the channel to get users for. (optional)</param>
        /// <param name="notInChannel">The ID of the channel to exclude users for. Must be used with \&quot;in_channel\&quot; query parameter. (optional)</param>
        /// <param name="groupConstrained">When used with &#x60;not_in_channel&#x60; or &#x60;not_in_team&#x60;, returns only the users that are allowed to join the channel or team based on its group constrains. (optional)</param>
        /// <param name="withoutTeam">Whether or not to list users that are not on any team. This option takes precendence over &#x60;in_team&#x60;, &#x60;in_channel&#x60;, and &#x60;not_in_channel&#x60;. (optional)</param>
        /// <param name="sort">Sort is only available in conjunction with certain options below. The paging parameter is also always available.  ##### &#x60;in_team&#x60; Can be \&quot;\&quot;, \&quot;last_activity_at\&quot; or \&quot;create_at\&quot;. When left blank, sorting is done by username. __Minimum server version__: 4.0 ##### &#x60;in_channel&#x60; Can be \&quot;\&quot;, \&quot;status\&quot;. When left blank, sorting is done by username. &#x60;status&#x60; will sort by User&#39;s current status (Online, Away, DND, Offline), then by Username. __Minimum server version__: 4.7  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> UsersGetAsyncWithHttpInfo (string page = null, string perPage = null, string inTeam = null, string notInTeam = null, string inChannel = null, string notInChannel = null, bool? groupConstrained = null, bool? withoutTeam = null, string sort = null)
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (inTeam != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "in_team", inTeam))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (notInTeam != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "not_in_team", notInTeam))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (inChannel != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "in_channel", inChannel))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (notInChannel != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "not_in_channel", notInChannel))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (groupConstrained != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "group_constrained", groupConstrained))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (withoutTeam != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "without_team", withoutTeam))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (sort != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "sort", sort))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<User>>("/users", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get users by group channels ids Get an object containing a key per group channel id in the query and its value as a list of users members of that group channel.  The user must be a member of the group ids in the query, or they will be omitted from the response. ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of group channel ids</param>
        /// <returns>InlineResponse200</returns>
        public InlineResponse200 UsersGroupChannelsPost (List<string> body)
        {
            ApiResponse<InlineResponse200> localVarResponse = UsersGroupChannelsPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get users by group channels ids Get an object containing a key per group channel id in the query and its value as a list of users members of that group channel.  The user must be a member of the group ids in the query, or they will be omitted from the response. ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of group channel ids</param>
        /// <returns>ApiResponse of InlineResponse200</returns>
        public ApiResponse<InlineResponse200> UsersGroupChannelsPostWithHttpInfo (List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersGroupChannelsPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< InlineResponse200 >("/users/group_channels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersGroupChannelsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get users by group channels ids Get an object containing a key per group channel id in the query and its value as a list of users members of that group channel.  The user must be a member of the group ids in the query, or they will be omitted from the response. ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of group channel ids</param>
        /// <returns>Task of InlineResponse200</returns>
        public async System.Threading.Tasks.Task<InlineResponse200> UsersGroupChannelsPostAsync (List<string> body)
        {
            ApiResponse<InlineResponse200> localVarResponse = await UsersGroupChannelsPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get users by group channels ids Get an object containing a key per group channel id in the query and its value as a list of users members of that group channel.  The user must be a member of the group ids in the query, or they will be omitted from the response. ##### Permissions Requires an active session but no other permissions.  __Minimum server version__: 5.14 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of group channel ids</param>
        /// <returns>Task of ApiResponse (InlineResponse200)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse200>> UsersGroupChannelsPostAsyncWithHttpInfo (List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersGroupChannelsPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<InlineResponse200>("/users/group_channels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersGroupChannelsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get users by ids Get a list of users based on a provided list of user ids. ##### Permissions Requires an active session but no other permissions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of user ids</param>
        /// <param name="since">Only return users that have been modified since the given Unix timestamp (in milliseconds).  __Minimum server version__: 5.14  (optional)</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UsersIdsPost (List<string> body, int? since = null)
        {
            ApiResponse<List<User>> localVarResponse = UsersIdsPostWithHttpInfo(body, since);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get users by ids Get a list of users based on a provided list of user ids. ##### Permissions Requires an active session but no other permissions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of user ids</param>
        /// <param name="since">Only return users that have been modified since the given Unix timestamp (in milliseconds).  __Minimum server version__: 5.14  (optional)</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse<List<User>> UsersIdsPostWithHttpInfo (List<string> body, int? since = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersIdsPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (since != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "since", since))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< List<User> >("/users/ids", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersIdsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get users by ids Get a list of users based on a provided list of user ids. ##### Permissions Requires an active session but no other permissions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of user ids</param>
        /// <param name="since">Only return users that have been modified since the given Unix timestamp (in milliseconds).  __Minimum server version__: 5.14  (optional)</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UsersIdsPostAsync (List<string> body, int? since = null)
        {
            ApiResponse<List<User>> localVarResponse = await UsersIdsPostAsyncWithHttpInfo(body, since);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get users by ids Get a list of users based on a provided list of user ids. ##### Permissions Requires an active session but no other permissions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of user ids</param>
        /// <param name="since">Only return users that have been modified since the given Unix timestamp (in milliseconds).  __Minimum server version__: 5.14  (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> UsersIdsPostAsyncWithHttpInfo (List<string> body, int? since = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersIdsPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (since != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "since", since))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<User>>("/users/ids", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersIdsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Switch login method Switch a user&#39;s login method from using email to OAuth2/SAML/LDAP or back to email. When switching to OAuth2/SAML, account switching is not complete until the user follows the returned link and completes any steps on the OAuth2/SAML service provider.  To switch from email to OAuth2/SAML, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;password&#x60;.  To switch from OAuth2/SAML to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;new_password&#x60;.  To switch from email to LDAP/AD, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60;, &#x60;password&#x60;, &#x60;ldap_ip&#x60; and &#x60;new_password&#x60; (this is the user&#39;s LDAP password).  To switch from LDAP/AD to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;ldap_ip&#x60;, &#x60;password&#x60; (this is the user&#39;s LDAP password), &#x60;email&#x60;  and &#x60;new_password&#x60;.  Additionally, specify &#x60;mfa_code&#x60; when trying to switch an account on LDAP/AD or email that has MFA activated.  ##### Permissions No current authentication required except when switching from OAuth2/SAML to email. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2003</returns>
        public InlineResponse2003 UsersLoginSwitchPost (InlineObject15 body)
        {
            ApiResponse<InlineResponse2003> localVarResponse = UsersLoginSwitchPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Switch login method Switch a user&#39;s login method from using email to OAuth2/SAML/LDAP or back to email. When switching to OAuth2/SAML, account switching is not complete until the user follows the returned link and completes any steps on the OAuth2/SAML service provider.  To switch from email to OAuth2/SAML, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;password&#x60;.  To switch from OAuth2/SAML to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;new_password&#x60;.  To switch from email to LDAP/AD, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60;, &#x60;password&#x60;, &#x60;ldap_ip&#x60; and &#x60;new_password&#x60; (this is the user&#39;s LDAP password).  To switch from LDAP/AD to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;ldap_ip&#x60;, &#x60;password&#x60; (this is the user&#39;s LDAP password), &#x60;email&#x60;  and &#x60;new_password&#x60;.  Additionally, specify &#x60;mfa_code&#x60; when trying to switch an account on LDAP/AD or email that has MFA activated.  ##### Permissions No current authentication required except when switching from OAuth2/SAML to email. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2003</returns>
        public ApiResponse<InlineResponse2003> UsersLoginSwitchPostWithHttpInfo (InlineObject15 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersLoginSwitchPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< InlineResponse2003 >("/users/login/switch", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersLoginSwitchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Switch login method Switch a user&#39;s login method from using email to OAuth2/SAML/LDAP or back to email. When switching to OAuth2/SAML, account switching is not complete until the user follows the returned link and completes any steps on the OAuth2/SAML service provider.  To switch from email to OAuth2/SAML, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;password&#x60;.  To switch from OAuth2/SAML to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;new_password&#x60;.  To switch from email to LDAP/AD, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60;, &#x60;password&#x60;, &#x60;ldap_ip&#x60; and &#x60;new_password&#x60; (this is the user&#39;s LDAP password).  To switch from LDAP/AD to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;ldap_ip&#x60;, &#x60;password&#x60; (this is the user&#39;s LDAP password), &#x60;email&#x60;  and &#x60;new_password&#x60;.  Additionally, specify &#x60;mfa_code&#x60; when trying to switch an account on LDAP/AD or email that has MFA activated.  ##### Permissions No current authentication required except when switching from OAuth2/SAML to email. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponse2003</returns>
        public async System.Threading.Tasks.Task<InlineResponse2003> UsersLoginSwitchPostAsync (InlineObject15 body)
        {
            ApiResponse<InlineResponse2003> localVarResponse = await UsersLoginSwitchPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Switch login method Switch a user&#39;s login method from using email to OAuth2/SAML/LDAP or back to email. When switching to OAuth2/SAML, account switching is not complete until the user follows the returned link and completes any steps on the OAuth2/SAML service provider.  To switch from email to OAuth2/SAML, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;password&#x60;.  To switch from OAuth2/SAML to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;new_password&#x60;.  To switch from email to LDAP/AD, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60;, &#x60;password&#x60;, &#x60;ldap_ip&#x60; and &#x60;new_password&#x60; (this is the user&#39;s LDAP password).  To switch from LDAP/AD to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;ldap_ip&#x60;, &#x60;password&#x60; (this is the user&#39;s LDAP password), &#x60;email&#x60;  and &#x60;new_password&#x60;.  Additionally, specify &#x60;mfa_code&#x60; when trying to switch an account on LDAP/AD or email that has MFA activated.  ##### Permissions No current authentication required except when switching from OAuth2/SAML to email. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponse2003)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2003>> UsersLoginSwitchPostAsyncWithHttpInfo (InlineObject15 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersLoginSwitchPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<InlineResponse2003>("/users/login/switch", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersLoginSwitchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Check MFA Check if a user has multi-factor authentication active on their account by providing a login id. Used to check whether an MFA code needs to be provided when logging in. ##### Permissions No permission required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>InlineResponse2002</returns>
        public InlineResponse2002 UsersMfaPost (InlineObject8 body)
        {
            ApiResponse<InlineResponse2002> localVarResponse = UsersMfaPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Check MFA Check if a user has multi-factor authentication active on their account by providing a login id. Used to check whether an MFA code needs to be provided when logging in. ##### Permissions No permission required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of InlineResponse2002</returns>
        public ApiResponse<InlineResponse2002> UsersMfaPostWithHttpInfo (InlineObject8 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersMfaPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< InlineResponse2002 >("/users/mfa", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersMfaPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Check MFA Check if a user has multi-factor authentication active on their account by providing a login id. Used to check whether an MFA code needs to be provided when logging in. ##### Permissions No permission required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of InlineResponse2002</returns>
        public async System.Threading.Tasks.Task<InlineResponse2002> UsersMfaPostAsync (InlineObject8 body)
        {
            ApiResponse<InlineResponse2002> localVarResponse = await UsersMfaPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Check MFA Check if a user has multi-factor authentication active on their account by providing a login id. Used to check whether an MFA code needs to be provided when logging in. ##### Permissions No permission required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (InlineResponse2002)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2002>> UsersMfaPostAsyncWithHttpInfo (InlineObject8 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersMfaPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<InlineResponse2002>("/users/mfa", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersMfaPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Reset password Update the password for a user using a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersPasswordResetPost (InlineObject6 body)
        {
            ApiResponse<StatusOK> localVarResponse = UsersPasswordResetPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Reset password Update the password for a user using a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersPasswordResetPostWithHttpInfo (InlineObject6 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersPasswordResetPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/users/password/reset", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersPasswordResetPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Reset password Update the password for a user using a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersPasswordResetPostAsync (InlineObject6 body)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersPasswordResetPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Reset password Update the password for a user using a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersPasswordResetPostAsyncWithHttpInfo (InlineObject6 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersPasswordResetPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/users/password/reset", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersPasswordResetPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Send password reset email Send an email containing a link for resetting the user&#39;s password. The link will contain a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersPasswordResetSendPost (InlineObject10 body)
        {
            ApiResponse<StatusOK> localVarResponse = UsersPasswordResetSendPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send password reset email Send an email containing a link for resetting the user&#39;s password. The link will contain a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersPasswordResetSendPostWithHttpInfo (InlineObject10 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersPasswordResetSendPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/users/password/reset/send", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersPasswordResetSendPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Send password reset email Send an email containing a link for resetting the user&#39;s password. The link will contain a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersPasswordResetSendPostAsync (InlineObject10 body)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersPasswordResetSendPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send password reset email Send an email containing a link for resetting the user&#39;s password. The link will contain a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersPasswordResetSendPostAsyncWithHttpInfo (InlineObject10 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersPasswordResetSendPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/users/password/reset/send", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersPasswordResetSendPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a user Create a new user on the system. Password is required for email login. For other authentication types such as LDAP or SAML, auth_data and auth_service fields are required. ##### Permissions No permission required but user creation can be controlled by server configuration. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="t">Token id from an email invitation (optional)</param>
        /// <param name="iid">Token id from an invitation link (optional)</param>
        /// <returns>User</returns>
        public User UsersPost (InlineObject body, string t = null, string iid = null)
        {
            ApiResponse<User> localVarResponse = UsersPostWithHttpInfo(body, t, iid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a user Create a new user on the system. Password is required for email login. For other authentication types such as LDAP or SAML, auth_data and auth_service fields are required. ##### Permissions No permission required but user creation can be controlled by server configuration. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="t">Token id from an email invitation (optional)</param>
        /// <param name="iid">Token id from an invitation link (optional)</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> UsersPostWithHttpInfo (InlineObject body, string t = null, string iid = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (t != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "t", t))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (iid != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "iid", iid))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< User >("/users", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a user Create a new user on the system. Password is required for email login. For other authentication types such as LDAP or SAML, auth_data and auth_service fields are required. ##### Permissions No permission required but user creation can be controlled by server configuration. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="t">Token id from an email invitation (optional)</param>
        /// <param name="iid">Token id from an invitation link (optional)</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UsersPostAsync (InlineObject body, string t = null, string iid = null)
        {
            ApiResponse<User> localVarResponse = await UsersPostAsyncWithHttpInfo(body, t, iid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a user Create a new user on the system. Password is required for email login. For other authentication types such as LDAP or SAML, auth_data and auth_service fields are required. ##### Permissions No permission required but user creation can be controlled by server configuration. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="t">Token id from an email invitation (optional)</param>
        /// <param name="iid">Token id from an invitation link (optional)</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UsersPostAsyncWithHttpInfo (InlineObject body, string t = null, string iid = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (t != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "t", t))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (iid != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "iid", iid))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<User>("/users", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Search users Get a list of users based on search criteria provided in the request body. Searches are typically done against username, full name, nickname and email unless otherwise configured by the server. ##### Permissions Requires an active session and &#x60;read_channel&#x60; and/or &#x60;view_team&#x60; permissions for any channels or teams specified in the request body. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UsersSearchPost (InlineObject1 body)
        {
            ApiResponse<List<User>> localVarResponse = UsersSearchPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search users Get a list of users based on search criteria provided in the request body. Searches are typically done against username, full name, nickname and email unless otherwise configured by the server. ##### Permissions Requires an active session and &#x60;read_channel&#x60; and/or &#x60;view_team&#x60; permissions for any channels or teams specified in the request body. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse<List<User>> UsersSearchPostWithHttpInfo (InlineObject1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersSearchPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< List<User> >("/users/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersSearchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Search users Get a list of users based on search criteria provided in the request body. Searches are typically done against username, full name, nickname and email unless otherwise configured by the server. ##### Permissions Requires an active session and &#x60;read_channel&#x60; and/or &#x60;view_team&#x60; permissions for any channels or teams specified in the request body. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UsersSearchPostAsync (InlineObject1 body)
        {
            ApiResponse<List<User>> localVarResponse = await UsersSearchPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search users Get a list of users based on search criteria provided in the request body. Searches are typically done against username, full name, nickname and email unless otherwise configured by the server. ##### Permissions Requires an active session and &#x60;read_channel&#x60; and/or &#x60;view_team&#x60; permissions for any channels or teams specified in the request body. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> UsersSearchPostAsyncWithHttpInfo (InlineObject1 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersSearchPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<User>>("/users/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersSearchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Attach mobile device Attach a mobile device id to the currently logged in session. This will enable push notifications for a user, if configured by the server. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersSessionsDevicePut (InlineObject12 body)
        {
            ApiResponse<StatusOK> localVarResponse = UsersSessionsDevicePutWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Attach mobile device Attach a mobile device id to the currently logged in session. This will enable push notifications for a user, if configured by the server. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersSessionsDevicePutWithHttpInfo (InlineObject12 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersSessionsDevicePut");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< StatusOK >("/users/sessions/device", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersSessionsDevicePut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Attach mobile device Attach a mobile device id to the currently logged in session. This will enable push notifications for a user, if configured by the server. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersSessionsDevicePutAsync (InlineObject12 body)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersSessionsDevicePutAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Attach mobile device Attach a mobile device id to the currently logged in session. This will enable push notifications for a user, if configured by the server. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersSessionsDevicePutAsyncWithHttpInfo (InlineObject12 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersSessionsDevicePut");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<StatusOK>("/users/sessions/device", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersSessionsDevicePut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get total count of users in the system Get a total count of users in the system. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>UsersStats</returns>
        public UsersStats UsersStatsGet ()
        {
            ApiResponse<UsersStats> localVarResponse = UsersStatsGetWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get total count of users in the system Get a total count of users in the system. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UsersStats</returns>
        public ApiResponse<UsersStats> UsersStatsGetWithHttpInfo ()
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);



            // make the HTTP request

            var response = this.Client.Get< UsersStats >("/users/stats", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersStatsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get total count of users in the system Get a total count of users in the system. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of UsersStats</returns>
        public async System.Threading.Tasks.Task<UsersStats> UsersStatsGetAsync ()
        {
            ApiResponse<UsersStats> localVarResponse = await UsersStatsGetAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get total count of users in the system Get a total count of users in the system. ##### Permissions Must be authenticated. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (UsersStats)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UsersStats>> UsersStatsGetAsyncWithHttpInfo ()
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<UsersStats>("/users/stats", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersStatsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Disable personal access token Disable a personal access token and delete any sessions using the token. The token can be re-enabled using &#x60;/users/tokens/enable&#x60;.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersTokensDisablePost (InlineObject18 tokenId)
        {
            ApiResponse<StatusOK> localVarResponse = UsersTokensDisablePostWithHttpInfo(tokenId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Disable personal access token Disable a personal access token and delete any sessions using the token. The token can be re-enabled using &#x60;/users/tokens/enable&#x60;.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersTokensDisablePostWithHttpInfo (InlineObject18 tokenId)
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling UsersApi->UsersTokensDisablePost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = tokenId;


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/users/tokens/disable", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersTokensDisablePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Disable personal access token Disable a personal access token and delete any sessions using the token. The token can be re-enabled using &#x60;/users/tokens/enable&#x60;.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersTokensDisablePostAsync (InlineObject18 tokenId)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersTokensDisablePostAsyncWithHttpInfo(tokenId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Disable personal access token Disable a personal access token and delete any sessions using the token. The token can be re-enabled using &#x60;/users/tokens/enable&#x60;.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersTokensDisablePostAsyncWithHttpInfo (InlineObject18 tokenId)
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling UsersApi->UsersTokensDisablePost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = tokenId;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/users/tokens/disable", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersTokensDisablePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Enable personal access token Re-enable a personal access token that has been disabled.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersTokensEnablePost (InlineObject19 tokenId)
        {
            ApiResponse<StatusOK> localVarResponse = UsersTokensEnablePostWithHttpInfo(tokenId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Enable personal access token Re-enable a personal access token that has been disabled.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersTokensEnablePostWithHttpInfo (InlineObject19 tokenId)
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling UsersApi->UsersTokensEnablePost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = tokenId;


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/users/tokens/enable", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersTokensEnablePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Enable personal access token Re-enable a personal access token that has been disabled.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersTokensEnablePostAsync (InlineObject19 tokenId)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersTokensEnablePostAsyncWithHttpInfo(tokenId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Enable personal access token Re-enable a personal access token that has been disabled.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersTokensEnablePostAsyncWithHttpInfo (InlineObject19 tokenId)
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling UsersApi->UsersTokensEnablePost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = tokenId;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/users/tokens/enable", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersTokensEnablePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get user access tokens Get a page of user access tokens for users on the system. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of tokens per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;UserAccessTokenSanitized&gt;</returns>
        public List<UserAccessTokenSanitized> UsersTokensGet (string page = null, string perPage = null)
        {
            ApiResponse<List<UserAccessTokenSanitized>> localVarResponse = UsersTokensGetWithHttpInfo(page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user access tokens Get a page of user access tokens for users on the system. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of tokens per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;UserAccessTokenSanitized&gt;</returns>
        public ApiResponse<List<UserAccessTokenSanitized>> UsersTokensGetWithHttpInfo (string page = null, string perPage = null)
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<UserAccessTokenSanitized> >("/users/tokens", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersTokensGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get user access tokens Get a page of user access tokens for users on the system. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of tokens per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;UserAccessTokenSanitized&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserAccessTokenSanitized>> UsersTokensGetAsync (string page = null, string perPage = null)
        {
            ApiResponse<List<UserAccessTokenSanitized>> localVarResponse = await UsersTokensGetAsyncWithHttpInfo(page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user access tokens Get a page of user access tokens for users on the system. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of tokens per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;UserAccessTokenSanitized&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserAccessTokenSanitized>>> UsersTokensGetAsyncWithHttpInfo (string page = null, string perPage = null)
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<UserAccessTokenSanitized>>("/users/tokens", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersTokensGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Revoke a user access token Revoke a user access token and delete any sessions using the token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersTokensRevokePost (InlineObject17 tokenId)
        {
            ApiResponse<StatusOK> localVarResponse = UsersTokensRevokePostWithHttpInfo(tokenId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Revoke a user access token Revoke a user access token and delete any sessions using the token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersTokensRevokePostWithHttpInfo (InlineObject17 tokenId)
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling UsersApi->UsersTokensRevokePost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = tokenId;


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/users/tokens/revoke", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersTokensRevokePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Revoke a user access token Revoke a user access token and delete any sessions using the token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersTokensRevokePostAsync (InlineObject17 tokenId)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersTokensRevokePostAsyncWithHttpInfo(tokenId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Revoke a user access token Revoke a user access token and delete any sessions using the token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersTokensRevokePostAsyncWithHttpInfo (InlineObject17 tokenId)
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling UsersApi->UsersTokensRevokePost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = tokenId;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/users/tokens/revoke", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersTokensRevokePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Search tokens Get a list of tokens based on search criteria provided in the request body. Searches are done against the token id, user id and username.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>List&lt;UserAccessTokenSanitized&gt;</returns>
        public List<UserAccessTokenSanitized> UsersTokensSearchPost (InlineObject20 body)
        {
            ApiResponse<List<UserAccessTokenSanitized>> localVarResponse = UsersTokensSearchPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Search tokens Get a list of tokens based on search criteria provided in the request body. Searches are done against the token id, user id and username.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of List&lt;UserAccessTokenSanitized&gt;</returns>
        public ApiResponse<List<UserAccessTokenSanitized>> UsersTokensSearchPostWithHttpInfo (InlineObject20 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersTokensSearchPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< List<UserAccessTokenSanitized> >("/users/tokens/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersTokensSearchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Search tokens Get a list of tokens based on search criteria provided in the request body. Searches are done against the token id, user id and username.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of List&lt;UserAccessTokenSanitized&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserAccessTokenSanitized>> UsersTokensSearchPostAsync (InlineObject20 body)
        {
            ApiResponse<List<UserAccessTokenSanitized>> localVarResponse = await UsersTokensSearchPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Search tokens Get a list of tokens based on search criteria provided in the request body. Searches are done against the token id, user id and username.  __Minimum server version__: 4.7  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (List&lt;UserAccessTokenSanitized&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserAccessTokenSanitized>>> UsersTokensSearchPostAsyncWithHttpInfo (InlineObject20 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersTokensSearchPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<UserAccessTokenSanitized>>("/users/tokens/search", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersTokensSearchPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a user access token Get a user access token. Does not include the actual authentication token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">User access token GUID</param>
        /// <returns>UserAccessTokenSanitized</returns>
        public UserAccessTokenSanitized UsersTokensTokenIdGet (string tokenId)
        {
            ApiResponse<UserAccessTokenSanitized> localVarResponse = UsersTokensTokenIdGetWithHttpInfo(tokenId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user access token Get a user access token. Does not include the actual authentication token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">User access token GUID</param>
        /// <returns>ApiResponse of UserAccessTokenSanitized</returns>
        public ApiResponse<UserAccessTokenSanitized> UsersTokensTokenIdGetWithHttpInfo (string tokenId)
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling UsersApi->UsersTokensTokenIdGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (tokenId != null)
                requestOptions.PathParameters.Add("token_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(tokenId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< UserAccessTokenSanitized >("/users/tokens/{token_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersTokensTokenIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a user access token Get a user access token. Does not include the actual authentication token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">User access token GUID</param>
        /// <returns>Task of UserAccessTokenSanitized</returns>
        public async System.Threading.Tasks.Task<UserAccessTokenSanitized> UsersTokensTokenIdGetAsync (string tokenId)
        {
            ApiResponse<UserAccessTokenSanitized> localVarResponse = await UsersTokensTokenIdGetAsyncWithHttpInfo(tokenId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user access token Get a user access token. Does not include the actual authentication token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="tokenId">User access token GUID</param>
        /// <returns>Task of ApiResponse (UserAccessTokenSanitized)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAccessTokenSanitized>> UsersTokensTokenIdGetAsyncWithHttpInfo (string tokenId)
        {
            // verify the required parameter 'tokenId' is set
            if (tokenId == null)
                throw new ApiException(400, "Missing required parameter 'tokenId' when calling UsersApi->UsersTokensTokenIdGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (tokenId != null)
                requestOptions.PathParameters.Add("token_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(tokenId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<UserAccessTokenSanitized>("/users/tokens/{token_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersTokensTokenIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update user active status Update user active or inactive status.  __Since server version 4.6, users using a SSO provider to login can be activated or deactivated with this endpoint. However, if their activation status in Mattermost does not reflect their status in the SSO provider, the next synchronization or login by that user will reset the activation status to that of their account in the SSO provider. Server versions 4.5 and before do not allow activation or deactivation of SSO users from this endpoint.__ ##### Permissions User can deactivate themselves. User with &#x60;manage_system&#x60; permission can activate or deactivate a user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersUserIdActivePut (string userId, InlineObject5 body)
        {
            ApiResponse<StatusOK> localVarResponse = UsersUserIdActivePutWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update user active status Update user active or inactive status.  __Since server version 4.6, users using a SSO provider to login can be activated or deactivated with this endpoint. However, if their activation status in Mattermost does not reflect their status in the SSO provider, the next synchronization or login by that user will reset the activation status to that of their account in the SSO provider. Server versions 4.5 and before do not allow activation or deactivation of SSO users from this endpoint.__ ##### Permissions User can deactivate themselves. User with &#x60;manage_system&#x60; permission can activate or deactivate a user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersUserIdActivePutWithHttpInfo (string userId, InlineObject5 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdActivePut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUserIdActivePut");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< StatusOK >("/users/{user_id}/active", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdActivePut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update user active status Update user active or inactive status.  __Since server version 4.6, users using a SSO provider to login can be activated or deactivated with this endpoint. However, if their activation status in Mattermost does not reflect their status in the SSO provider, the next synchronization or login by that user will reset the activation status to that of their account in the SSO provider. Server versions 4.5 and before do not allow activation or deactivation of SSO users from this endpoint.__ ##### Permissions User can deactivate themselves. User with &#x60;manage_system&#x60; permission can activate or deactivate a user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersUserIdActivePutAsync (string userId, InlineObject5 body)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersUserIdActivePutAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update user active status Update user active or inactive status.  __Since server version 4.6, users using a SSO provider to login can be activated or deactivated with this endpoint. However, if their activation status in Mattermost does not reflect their status in the SSO provider, the next synchronization or login by that user will reset the activation status to that of their account in the SSO provider. Server versions 4.5 and before do not allow activation or deactivation of SSO users from this endpoint.__ ##### Permissions User can deactivate themselves. User with &#x60;manage_system&#x60; permission can activate or deactivate a user. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdActivePutAsyncWithHttpInfo (string userId, InlineObject5 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdActivePut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUserIdActivePut");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<StatusOK>("/users/{user_id}/active", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdActivePut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get user&#39;s audits Get a list of audit by providing the user GUID. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>List&lt;Audit&gt;</returns>
        public List<Audit> UsersUserIdAuditsGet (string userId)
        {
            ApiResponse<List<Audit>> localVarResponse = UsersUserIdAuditsGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user&#39;s audits Get a list of audit by providing the user GUID. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of List&lt;Audit&gt;</returns>
        public ApiResponse<List<Audit>> UsersUserIdAuditsGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdAuditsGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< List<Audit> >("/users/{user_id}/audits", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdAuditsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get user&#39;s audits Get a list of audit by providing the user GUID. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of List&lt;Audit&gt;</returns>
        public async System.Threading.Tasks.Task<List<Audit>> UsersUserIdAuditsGetAsync (string userId)
        {
            ApiResponse<List<Audit>> localVarResponse = await UsersUserIdAuditsGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user&#39;s audits Get a list of audit by providing the user GUID. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (List&lt;Audit&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Audit>>> UsersUserIdAuditsGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdAuditsGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Audit>>("/users/{user_id}/audits", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdAuditsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a user&#39;s authentication method Updates a user&#39;s authentication method. This can be used to change them to/from LDAP authentication for example.  __Minimum server version__: 4.6 ##### Permissions Must have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>UserAuthData</returns>
        public UserAuthData UsersUserIdAuthPut (string userId, UserAuthData body)
        {
            ApiResponse<UserAuthData> localVarResponse = UsersUserIdAuthPutWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a user&#39;s authentication method Updates a user&#39;s authentication method. This can be used to change them to/from LDAP authentication for example.  __Minimum server version__: 4.6 ##### Permissions Must have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of UserAuthData</returns>
        public ApiResponse<UserAuthData> UsersUserIdAuthPutWithHttpInfo (string userId, UserAuthData body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdAuthPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUserIdAuthPut");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< UserAuthData >("/users/{user_id}/auth", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdAuthPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a user&#39;s authentication method Updates a user&#39;s authentication method. This can be used to change them to/from LDAP authentication for example.  __Minimum server version__: 4.6 ##### Permissions Must have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of UserAuthData</returns>
        public async System.Threading.Tasks.Task<UserAuthData> UsersUserIdAuthPutAsync (string userId, UserAuthData body)
        {
            ApiResponse<UserAuthData> localVarResponse = await UsersUserIdAuthPutAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a user&#39;s authentication method Updates a user&#39;s authentication method. This can be used to change them to/from LDAP authentication for example.  __Minimum server version__: 4.6 ##### Permissions Must have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (UserAuthData)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAuthData>> UsersUserIdAuthPutAsyncWithHttpInfo (string userId, UserAuthData body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdAuthPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUserIdAuthPut");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<UserAuthData>("/users/{user_id}/auth", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdAuthPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deactivate a user account. Deactivates the user and revokes all its sessions by archiving its user object. ##### Permissions Must be logged in as the user being deactivated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersUserIdDelete (string userId)
        {
            ApiResponse<StatusOK> localVarResponse = UsersUserIdDeleteWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deactivate a user account. Deactivates the user and revokes all its sessions by archiving its user object. ##### Permissions Must be logged in as the user being deactivated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersUserIdDeleteWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdDelete");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/users/{user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Deactivate a user account. Deactivates the user and revokes all its sessions by archiving its user object. ##### Permissions Must be logged in as the user being deactivated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersUserIdDeleteAsync (string userId)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersUserIdDeleteAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deactivate a user account. Deactivates the user and revokes all its sessions by archiving its user object. ##### Permissions Must be logged in as the user being deactivated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdDeleteAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdDelete");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/users/{user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a user Get a user a object. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>User</returns>
        public User UsersUserIdGet (string userId)
        {
            ApiResponse<User> localVarResponse = UsersUserIdGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user Get a user a object. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> UsersUserIdGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< User >("/users/{user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a user Get a user a object. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UsersUserIdGetAsync (string userId)
        {
            ApiResponse<User> localVarResponse = await UsersUserIdGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user Get a user a object. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UsersUserIdGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<User>("/users/{user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Return user&#39;s default (generated) profile image Returns the default (generated) user profile image based on user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.5 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns></returns>
        public void UsersUserIdImageDefaultGet (string userId)
        {
             UsersUserIdImageDefaultGetWithHttpInfo(userId);
        }

        /// <summary>
        /// Return user&#39;s default (generated) profile image Returns the default (generated) user profile image based on user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.5 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UsersUserIdImageDefaultGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdImageDefaultGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get<object>("/users/{user_id}/image/default", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdImageDefaultGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Return user&#39;s default (generated) profile image Returns the default (generated) user profile image based on user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.5 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersUserIdImageDefaultGetAsync (string userId)
        {
             await UsersUserIdImageDefaultGetAsyncWithHttpInfo(userId);

        }

        /// <summary>
        /// Return user&#39;s default (generated) profile image Returns the default (generated) user profile image based on user_id string parameter. ##### Permissions Must be logged in. __Minimum server version__: 5.5 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UsersUserIdImageDefaultGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdImageDefaultGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<object>("/users/{user_id}/image/default", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdImageDefaultGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete user&#39;s profile image Delete user&#39;s profile image and reset to default image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 5.5 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersUserIdImageDelete (string userId)
        {
            ApiResponse<StatusOK> localVarResponse = UsersUserIdImageDeleteWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete user&#39;s profile image Delete user&#39;s profile image and reset to default image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 5.5 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersUserIdImageDeleteWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdImageDelete");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/users/{user_id}/image", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdImageDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete user&#39;s profile image Delete user&#39;s profile image and reset to default image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 5.5 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersUserIdImageDeleteAsync (string userId)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersUserIdImageDeleteAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete user&#39;s profile image Delete user&#39;s profile image and reset to default image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 5.5 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdImageDeleteAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdImageDelete");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/users/{user_id}/image", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdImageDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get user&#39;s profile image Get a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns></returns>
        public void UsersUserIdImageGet (string userId)
        {
             UsersUserIdImageGetWithHttpInfo(userId);
        }

        /// <summary>
        /// Get user&#39;s profile image Get a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<object> UsersUserIdImageGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdImageGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get<object>("/users/{user_id}/image", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdImageGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get user&#39;s profile image Get a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task UsersUserIdImageGetAsync (string userId)
        {
             await UsersUserIdImageGetAsyncWithHttpInfo(userId);

        }

        /// <summary>
        /// Get user&#39;s profile image Get a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<ApiResponse<object>> UsersUserIdImageGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdImageGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<object>("/users/{user_id}/image", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdImageGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Set user&#39;s profile image Set a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="image">The image to be uploaded</param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersUserIdImagePost (string userId, System.IO.Stream image)
        {
            ApiResponse<StatusOK> localVarResponse = UsersUserIdImagePostWithHttpInfo(userId, image);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Set user&#39;s profile image Set a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="image">The image to be uploaded</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersUserIdImagePostWithHttpInfo (string userId, System.IO.Stream image)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdImagePost");

            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling UsersApi->UsersUserIdImagePost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (image != null)
            {
                requestOptions.FileParameters.Add("image", image);
            }


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/users/{user_id}/image", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdImagePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Set user&#39;s profile image Set a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="image">The image to be uploaded</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersUserIdImagePostAsync (string userId, System.IO.Stream image)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersUserIdImagePostAsyncWithHttpInfo(userId, image);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Set user&#39;s profile image Set a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="image">The image to be uploaded</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdImagePostAsyncWithHttpInfo (string userId, System.IO.Stream image)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdImagePost");

            // verify the required parameter 'image' is set
            if (image == null)
                throw new ApiException(400, "Missing required parameter 'image' when calling UsersApi->UsersUserIdImagePost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "multipart/form-data"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (image != null)
            {
                requestOptions.FileParameters.Add("image", image);
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/users/{user_id}/image", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdImagePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Generate MFA secret Generates an multi-factor authentication secret for a user and returns it as a string and as base64 encoded QR code image. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>InlineResponse2001</returns>
        public InlineResponse2001 UsersUserIdMfaGeneratePost (string userId)
        {
            ApiResponse<InlineResponse2001> localVarResponse = UsersUserIdMfaGeneratePostWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Generate MFA secret Generates an multi-factor authentication secret for a user and returns it as a string and as base64 encoded QR code image. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of InlineResponse2001</returns>
        public ApiResponse<InlineResponse2001> UsersUserIdMfaGeneratePostWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdMfaGeneratePost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Post< InlineResponse2001 >("/users/{user_id}/mfa/generate", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdMfaGeneratePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Generate MFA secret Generates an multi-factor authentication secret for a user and returns it as a string and as base64 encoded QR code image. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of InlineResponse2001</returns>
        public async System.Threading.Tasks.Task<InlineResponse2001> UsersUserIdMfaGeneratePostAsync (string userId)
        {
            ApiResponse<InlineResponse2001> localVarResponse = await UsersUserIdMfaGeneratePostAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Generate MFA secret Generates an multi-factor authentication secret for a user and returns it as a string and as base64 encoded QR code image. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (InlineResponse2001)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<InlineResponse2001>> UsersUserIdMfaGeneratePostAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdMfaGeneratePost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<InlineResponse2001>("/users/{user_id}/mfa/generate", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdMfaGeneratePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a user&#39;s MFA Activates multi-factor authentication for the user if &#x60;activate&#x60; is true and a valid &#x60;code&#x60; is provided. If activate is false, then &#x60;code&#x60; is not required and multi-factor authentication is disabled for the user. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersUserIdMfaPut (string userId, InlineObject7 body)
        {
            ApiResponse<StatusOK> localVarResponse = UsersUserIdMfaPutWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a user&#39;s MFA Activates multi-factor authentication for the user if &#x60;activate&#x60; is true and a valid &#x60;code&#x60; is provided. If activate is false, then &#x60;code&#x60; is not required and multi-factor authentication is disabled for the user. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersUserIdMfaPutWithHttpInfo (string userId, InlineObject7 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdMfaPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUserIdMfaPut");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< StatusOK >("/users/{user_id}/mfa", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdMfaPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a user&#39;s MFA Activates multi-factor authentication for the user if &#x60;activate&#x60; is true and a valid &#x60;code&#x60; is provided. If activate is false, then &#x60;code&#x60; is not required and multi-factor authentication is disabled for the user. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersUserIdMfaPutAsync (string userId, InlineObject7 body)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersUserIdMfaPutAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a user&#39;s MFA Activates multi-factor authentication for the user if &#x60;activate&#x60; is true and a valid &#x60;code&#x60; is provided. If activate is false, then &#x60;code&#x60; is not required and multi-factor authentication is disabled for the user. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdMfaPutAsyncWithHttpInfo (string userId, InlineObject7 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdMfaPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUserIdMfaPut");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<StatusOK>("/users/{user_id}/mfa", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdMfaPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a user&#39;s password Update a user&#39;s password. New password must meet password policy set by server configuration. Current password is required if you&#39;re updating your own password. ##### Permissions Must be logged in as the user the password is being changed for or have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersUserIdPasswordPut (string userId, InlineObject9 body)
        {
            ApiResponse<StatusOK> localVarResponse = UsersUserIdPasswordPutWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a user&#39;s password Update a user&#39;s password. New password must meet password policy set by server configuration. Current password is required if you&#39;re updating your own password. ##### Permissions Must be logged in as the user the password is being changed for or have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersUserIdPasswordPutWithHttpInfo (string userId, InlineObject9 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdPasswordPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUserIdPasswordPut");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< StatusOK >("/users/{user_id}/password", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPasswordPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a user&#39;s password Update a user&#39;s password. New password must meet password policy set by server configuration. Current password is required if you&#39;re updating your own password. ##### Permissions Must be logged in as the user the password is being changed for or have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersUserIdPasswordPutAsync (string userId, InlineObject9 body)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersUserIdPasswordPutAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a user&#39;s password Update a user&#39;s password. New password must meet password policy set by server configuration. Current password is required if you&#39;re updating your own password. ##### Permissions Must be logged in as the user the password is being changed for or have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdPasswordPutAsyncWithHttpInfo (string userId, InlineObject9 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdPasswordPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUserIdPasswordPut");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<StatusOK>("/users/{user_id}/password", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPasswordPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Patch a user Partially update a user by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>User</returns>
        public User UsersUserIdPatchPut (string userId, InlineObject3 body)
        {
            ApiResponse<User> localVarResponse = UsersUserIdPatchPutWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch a user Partially update a user by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> UsersUserIdPatchPutWithHttpInfo (string userId, InlineObject3 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdPatchPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUserIdPatchPut");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< User >("/users/{user_id}/patch", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPatchPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Patch a user Partially update a user by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UsersUserIdPatchPutAsync (string userId, InlineObject3 body)
        {
            ApiResponse<User> localVarResponse = await UsersUserIdPatchPutAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch a user Partially update a user by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UsersUserIdPatchPutAsyncWithHttpInfo (string userId, InlineObject3 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdPatchPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUserIdPatchPut");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<User>("/users/{user_id}/patch", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPatchPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a user Update a user by providing the user object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. Any fields not included in the request body will be set to null or reverted to default values. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>User</returns>
        public User UsersUserIdPut (string userId, InlineObject2 body)
        {
            ApiResponse<User> localVarResponse = UsersUserIdPutWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a user Update a user by providing the user object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. Any fields not included in the request body will be set to null or reverted to default values. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> UsersUserIdPutWithHttpInfo (string userId, InlineObject2 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUserIdPut");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< User >("/users/{user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a user Update a user by providing the user object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. Any fields not included in the request body will be set to null or reverted to default values. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UsersUserIdPutAsync (string userId, InlineObject2 body)
        {
            ApiResponse<User> localVarResponse = await UsersUserIdPutAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a user Update a user by providing the user object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. Any fields not included in the request body will be set to null or reverted to default values. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UsersUserIdPutAsyncWithHttpInfo (string userId, InlineObject2 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUserIdPut");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<User>("/users/{user_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a user&#39;s roles Update a user&#39;s system-level roles. Valid user roles are \&quot;system_user\&quot;, \&quot;system_admin\&quot; or both of them. Overwrites any previously assigned system-level roles. ##### Permissions Must have the &#x60;manage_roles&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="roles"></param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersUserIdRolesPut (string userId, InlineObject4 roles)
        {
            ApiResponse<StatusOK> localVarResponse = UsersUserIdRolesPutWithHttpInfo(userId, roles);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update a user&#39;s roles Update a user&#39;s system-level roles. Valid user roles are \&quot;system_user\&quot;, \&quot;system_admin\&quot; or both of them. Overwrites any previously assigned system-level roles. ##### Permissions Must have the &#x60;manage_roles&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="roles"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersUserIdRolesPutWithHttpInfo (string userId, InlineObject4 roles)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdRolesPut");

            // verify the required parameter 'roles' is set
            if (roles == null)
                throw new ApiException(400, "Missing required parameter 'roles' when calling UsersApi->UsersUserIdRolesPut");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = roles;


            // make the HTTP request

            var response = this.Client.Put< StatusOK >("/users/{user_id}/roles", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdRolesPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update a user&#39;s roles Update a user&#39;s system-level roles. Valid user roles are \&quot;system_user\&quot;, \&quot;system_admin\&quot; or both of them. Overwrites any previously assigned system-level roles. ##### Permissions Must have the &#x60;manage_roles&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="roles"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersUserIdRolesPutAsync (string userId, InlineObject4 roles)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersUserIdRolesPutAsyncWithHttpInfo(userId, roles);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update a user&#39;s roles Update a user&#39;s system-level roles. Valid user roles are \&quot;system_user\&quot;, \&quot;system_admin\&quot; or both of them. Overwrites any previously assigned system-level roles. ##### Permissions Must have the &#x60;manage_roles&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="roles"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdRolesPutAsyncWithHttpInfo (string userId, InlineObject4 roles)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdRolesPut");

            // verify the required parameter 'roles' is set
            if (roles == null)
                throw new ApiException(400, "Missing required parameter 'roles' when calling UsersApi->UsersUserIdRolesPut");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = roles;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<StatusOK>("/users/{user_id}/roles", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdRolesPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get user&#39;s sessions Get a list of sessions by providing the user GUID. Sensitive information will be sanitized out. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>List&lt;Session&gt;</returns>
        public List<Session> UsersUserIdSessionsGet (string userId)
        {
            ApiResponse<List<Session>> localVarResponse = UsersUserIdSessionsGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user&#39;s sessions Get a list of sessions by providing the user GUID. Sensitive information will be sanitized out. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of List&lt;Session&gt;</returns>
        public ApiResponse<List<Session>> UsersUserIdSessionsGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdSessionsGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< List<Session> >("/users/{user_id}/sessions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdSessionsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get user&#39;s sessions Get a list of sessions by providing the user GUID. Sensitive information will be sanitized out. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of List&lt;Session&gt;</returns>
        public async System.Threading.Tasks.Task<List<Session>> UsersUserIdSessionsGetAsync (string userId)
        {
            ApiResponse<List<Session>> localVarResponse = await UsersUserIdSessionsGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user&#39;s sessions Get a list of sessions by providing the user GUID. Sensitive information will be sanitized out. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (List&lt;Session&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Session>>> UsersUserIdSessionsGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdSessionsGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Session>>("/users/{user_id}/sessions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdSessionsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Revoke all active sessions for a user Revokes all user sessions from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersUserIdSessionsRevokeAllPost (string userId)
        {
            ApiResponse<StatusOK> localVarResponse = UsersUserIdSessionsRevokeAllPostWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Revoke all active sessions for a user Revokes all user sessions from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersUserIdSessionsRevokeAllPostWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdSessionsRevokeAllPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/users/{user_id}/sessions/revoke/all", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdSessionsRevokeAllPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Revoke all active sessions for a user Revokes all user sessions from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersUserIdSessionsRevokeAllPostAsync (string userId)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersUserIdSessionsRevokeAllPostAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Revoke all active sessions for a user Revokes all user sessions from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 4.4 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdSessionsRevokeAllPostAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdSessionsRevokeAllPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/users/{user_id}/sessions/revoke/all", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdSessionsRevokeAllPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Revoke a user session Revokes a user session from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersUserIdSessionsRevokePost (string userId, InlineObject11 body)
        {
            ApiResponse<StatusOK> localVarResponse = UsersUserIdSessionsRevokePostWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Revoke a user session Revokes a user session from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersUserIdSessionsRevokePostWithHttpInfo (string userId, InlineObject11 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdSessionsRevokePost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUserIdSessionsRevokePost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/users/{user_id}/sessions/revoke", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdSessionsRevokePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Revoke a user session Revokes a user session from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersUserIdSessionsRevokePostAsync (string userId, InlineObject11 body)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersUserIdSessionsRevokePostAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Revoke a user session Revokes a user session from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdSessionsRevokePostAsyncWithHttpInfo (string userId, InlineObject11 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdSessionsRevokePost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUserIdSessionsRevokePost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/users/{user_id}/sessions/revoke", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdSessionsRevokePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Fetches user&#39;s latest terms of service action if the latest action was for acceptance. Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>UserTermsOfService</returns>
        public UserTermsOfService UsersUserIdTermsOfServiceGet (string userId)
        {
            ApiResponse<UserTermsOfService> localVarResponse = UsersUserIdTermsOfServiceGetWithHttpInfo(userId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Fetches user&#39;s latest terms of service action if the latest action was for acceptance. Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>ApiResponse of UserTermsOfService</returns>
        public ApiResponse<UserTermsOfService> UsersUserIdTermsOfServiceGetWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdTermsOfServiceGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< UserTermsOfService >("/users/{user_id}/terms_of_service", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTermsOfServiceGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Fetches user&#39;s latest terms of service action if the latest action was for acceptance. Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of UserTermsOfService</returns>
        public async System.Threading.Tasks.Task<UserTermsOfService> UsersUserIdTermsOfServiceGetAsync (string userId)
        {
            ApiResponse<UserTermsOfService> localVarResponse = await UsersUserIdTermsOfServiceGetAsyncWithHttpInfo(userId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Fetches user&#39;s latest terms of service action if the latest action was for acceptance. Will be deprecated in v6.0 Fetches user&#39;s latest terms of service action if the latest action was for acceptance.  __Minimum server version__: 5.6 ##### Permissions Must be logged in as the user being acted on. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <returns>Task of ApiResponse (UserTermsOfService)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserTermsOfService>> UsersUserIdTermsOfServiceGetAsyncWithHttpInfo (string userId)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdTermsOfServiceGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<UserTermsOfService>("/users/{user_id}/terms_of_service", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTermsOfServiceGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Records user action when they accept or decline custom terms of service Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersUserIdTermsOfServicePost (string userId, InlineObject21 body)
        {
            ApiResponse<StatusOK> localVarResponse = UsersUserIdTermsOfServicePostWithHttpInfo(userId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Records user action when they accept or decline custom terms of service Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> UsersUserIdTermsOfServicePostWithHttpInfo (string userId, InlineObject21 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdTermsOfServicePost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUserIdTermsOfServicePost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/users/{user_id}/terms_of_service", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTermsOfServicePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Records user action when they accept or decline custom terms of service Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersUserIdTermsOfServicePostAsync (string userId, InlineObject21 body)
        {
            ApiResponse<StatusOK> localVarResponse = await UsersUserIdTermsOfServicePostAsyncWithHttpInfo(userId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Records user action when they accept or decline custom terms of service Records user action when they accept or decline custom terms of service. Records the action in audit table. Updates user&#39;s last accepted terms of service ID if they accepted it.  __Minimum server version__: 5.4 ##### Permissions Must be logged in as the user being acted on. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdTermsOfServicePostAsyncWithHttpInfo (string userId, InlineObject21 body)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdTermsOfServicePost");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUserIdTermsOfServicePost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/users/{user_id}/terms_of_service", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTermsOfServicePost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get user access tokens Get a list of user access tokens for a user. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of tokens per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;UserAccessTokenSanitized&gt;</returns>
        public List<UserAccessTokenSanitized> UsersUserIdTokensGet (string userId, string page = null, string perPage = null)
        {
            ApiResponse<List<UserAccessTokenSanitized>> localVarResponse = UsersUserIdTokensGetWithHttpInfo(userId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get user access tokens Get a list of user access tokens for a user. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of tokens per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;UserAccessTokenSanitized&gt;</returns>
        public ApiResponse<List<UserAccessTokenSanitized>> UsersUserIdTokensGetWithHttpInfo (string userId, string page = null, string perPage = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdTokensGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<UserAccessTokenSanitized> >("/users/{user_id}/tokens", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTokensGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get user access tokens Get a list of user access tokens for a user. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of tokens per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;UserAccessTokenSanitized&gt;</returns>
        public async System.Threading.Tasks.Task<List<UserAccessTokenSanitized>> UsersUserIdTokensGetAsync (string userId, string page = null, string perPage = null)
        {
            ApiResponse<List<UserAccessTokenSanitized>> localVarResponse = await UsersUserIdTokensGetAsyncWithHttpInfo(userId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get user access tokens Get a list of user access tokens for a user. Does not include the actual authentication tokens. Use query parameters for paging.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of tokens per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;UserAccessTokenSanitized&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<UserAccessTokenSanitized>>> UsersUserIdTokensGetAsyncWithHttpInfo (string userId, string page = null, string perPage = null)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdTokensGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<UserAccessTokenSanitized>>("/users/{user_id}/tokens", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTokensGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a user access token Generate a user access token that can be used to authenticate with the Mattermost REST API.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="token"></param>
        /// <returns>UserAccessToken</returns>
        public UserAccessToken UsersUserIdTokensPost (string userId, InlineObject16 token)
        {
            ApiResponse<UserAccessToken> localVarResponse = UsersUserIdTokensPostWithHttpInfo(userId, token);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a user access token Generate a user access token that can be used to authenticate with the Mattermost REST API.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="token"></param>
        /// <returns>ApiResponse of UserAccessToken</returns>
        public ApiResponse<UserAccessToken> UsersUserIdTokensPostWithHttpInfo (string userId, InlineObject16 token)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdTokensPost");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UsersApi->UsersUserIdTokensPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = token;


            // make the HTTP request

            var response = this.Client.Post< UserAccessToken >("/users/{user_id}/tokens", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTokensPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a user access token Generate a user access token that can be used to authenticate with the Mattermost REST API.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="token"></param>
        /// <returns>Task of UserAccessToken</returns>
        public async System.Threading.Tasks.Task<UserAccessToken> UsersUserIdTokensPostAsync (string userId, InlineObject16 token)
        {
            ApiResponse<UserAccessToken> localVarResponse = await UsersUserIdTokensPostAsyncWithHttpInfo(userId, token);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a user access token Generate a user access token that can be used to authenticate with the Mattermost REST API.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">User GUID</param>
        /// <param name="token"></param>
        /// <returns>Task of ApiResponse (UserAccessToken)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<UserAccessToken>> UsersUserIdTokensPostAsyncWithHttpInfo (string userId, InlineObject16 token)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new ApiException(400, "Missing required parameter 'userId' when calling UsersApi->UsersUserIdTokensPost");

            // verify the required parameter 'token' is set
            if (token == null)
                throw new ApiException(400, "Missing required parameter 'token' when calling UsersApi->UsersUserIdTokensPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            requestOptions.Data = token;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<UserAccessToken>("/users/{user_id}/tokens", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdTokensPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a user by username Get a user object by providing a username. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username</param>
        /// <returns>User</returns>
        public User UsersUsernameUsernameGet (string username)
        {
            ApiResponse<User> localVarResponse = UsersUsernameUsernameGetWithHttpInfo(username);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a user by username Get a user object by providing a username. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username</param>
        /// <returns>ApiResponse of User</returns>
        public ApiResponse<User> UsersUsernameUsernameGetWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersUsernameUsernameGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (username != null)
                requestOptions.PathParameters.Add("username", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(username)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< User >("/users/username/{username}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUsernameUsernameGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a user by username Get a user object by providing a username. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username</param>
        /// <returns>Task of User</returns>
        public async System.Threading.Tasks.Task<User> UsersUsernameUsernameGetAsync (string username)
        {
            ApiResponse<User> localVarResponse = await UsersUsernameUsernameGetAsyncWithHttpInfo(username);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a user by username Get a user object by providing a username. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="username">Username</param>
        /// <returns>Task of ApiResponse (User)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<User>> UsersUsernameUsernameGetAsyncWithHttpInfo (string username)
        {
            // verify the required parameter 'username' is set
            if (username == null)
                throw new ApiException(400, "Missing required parameter 'username' when calling UsersApi->UsersUsernameUsernameGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (username != null)
                requestOptions.PathParameters.Add("username", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(username)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<User>("/users/username/{username}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUsernameUsernameGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get users by usernames Get a list of users based on a provided list of usernames. ##### Permissions Requires an active session but no other permissions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of usernames</param>
        /// <returns>List&lt;User&gt;</returns>
        public List<User> UsersUsernamesPost (List<string> body)
        {
            ApiResponse<List<User>> localVarResponse = UsersUsernamesPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get users by usernames Get a list of users based on a provided list of usernames. ##### Permissions Requires an active session but no other permissions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of usernames</param>
        /// <returns>ApiResponse of List&lt;User&gt;</returns>
        public ApiResponse<List<User>> UsersUsernamesPostWithHttpInfo (List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUsernamesPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< List<User> >("/users/usernames", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUsernamesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get users by usernames Get a list of users based on a provided list of usernames. ##### Permissions Requires an active session but no other permissions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of usernames</param>
        /// <returns>Task of List&lt;User&gt;</returns>
        public async System.Threading.Tasks.Task<List<User>> UsersUsernamesPostAsync (List<string> body)
        {
            ApiResponse<List<User>> localVarResponse = await UsersUsernamesPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get users by usernames Get a list of users based on a provided list of usernames. ##### Permissions Requires an active session but no other permissions. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body">List of usernames</param>
        /// <returns>Task of ApiResponse (List&lt;User&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<User>>> UsersUsernamesPostAsyncWithHttpInfo (List<string> body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling UsersApi->UsersUsernamesPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<List<User>>("/users/usernames", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUsernamesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
