/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Get the schemes.
        /// </summary>
        /// <remarks>
        /// Get a page of schemes. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Limit the results returned to the provided scope, either &#x60;team&#x60; or &#x60;channel&#x60;. (optional)</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of schemes per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Scheme&gt;</returns>
        List<Scheme> SchemesGet (string scope = null, string page = null, string perPage = null);

        /// <summary>
        /// Get the schemes.
        /// </summary>
        /// <remarks>
        /// Get a page of schemes. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Limit the results returned to the provided scope, either &#x60;team&#x60; or &#x60;channel&#x60;. (optional)</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of schemes per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Scheme&gt;</returns>
        ApiResponse<List<Scheme>> SchemesGetWithHttpInfo (string scope = null, string page = null, string perPage = null);
        /// <summary>
        /// Create a scheme
        /// </summary>
        /// <remarks>
        /// Create a new scheme.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheme"></param>
        /// <returns>Scheme</returns>
        Scheme SchemesPost (InlineObject58 scheme);

        /// <summary>
        /// Create a scheme
        /// </summary>
        /// <remarks>
        /// Create a new scheme.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheme"></param>
        /// <returns>ApiResponse of Scheme</returns>
        ApiResponse<Scheme> SchemesPostWithHttpInfo (InlineObject58 scheme);
        /// <summary>
        /// Get a page of channels which use this scheme.
        /// </summary>
        /// <remarks>
        /// Get a page of channels which use this scheme. The provided Scheme ID should be for a Channel-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Channel&gt;</returns>
        List<Channel> SchemesSchemeIdChannelsGet (string schemeId, string page = null, string perPage = null);

        /// <summary>
        /// Get a page of channels which use this scheme.
        /// </summary>
        /// <remarks>
        /// Get a page of channels which use this scheme. The provided Scheme ID should be for a Channel-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        ApiResponse<List<Channel>> SchemesSchemeIdChannelsGetWithHttpInfo (string schemeId, string page = null, string perPage = null);
        /// <summary>
        /// Delete a scheme
        /// </summary>
        /// <remarks>
        /// Soft deletes a scheme, by marking the scheme as deleted in the database.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">ID of the scheme to delete</param>
        /// <returns>StatusOK</returns>
        StatusOK SchemesSchemeIdDelete (string schemeId);

        /// <summary>
        /// Delete a scheme
        /// </summary>
        /// <remarks>
        /// Soft deletes a scheme, by marking the scheme as deleted in the database.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">ID of the scheme to delete</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> SchemesSchemeIdDeleteWithHttpInfo (string schemeId);
        /// <summary>
        /// Get a scheme
        /// </summary>
        /// <remarks>
        /// Get a scheme from the provided scheme id.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <returns>Scheme</returns>
        Scheme SchemesSchemeIdGet (string schemeId);

        /// <summary>
        /// Get a scheme
        /// </summary>
        /// <remarks>
        /// Get a scheme from the provided scheme id.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <returns>ApiResponse of Scheme</returns>
        ApiResponse<Scheme> SchemesSchemeIdGetWithHttpInfo (string schemeId);
        /// <summary>
        /// Patch a scheme
        /// </summary>
        /// <remarks>
        /// Partially update a scheme by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="body"></param>
        /// <returns>Scheme</returns>
        Scheme SchemesSchemeIdPatchPut (string schemeId, InlineObject59 body);

        /// <summary>
        /// Patch a scheme
        /// </summary>
        /// <remarks>
        /// Partially update a scheme by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Scheme</returns>
        ApiResponse<Scheme> SchemesSchemeIdPatchPutWithHttpInfo (string schemeId, InlineObject59 body);
        /// <summary>
        /// Get a page of teams which use this scheme.
        /// </summary>
        /// <remarks>
        /// Get a page of teams which use this scheme. The provided Scheme ID should be for a Team-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of teams per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Team&gt;</returns>
        List<Team> SchemesSchemeIdTeamsGet (string schemeId, string page = null, string perPage = null);

        /// <summary>
        /// Get a page of teams which use this scheme.
        /// </summary>
        /// <remarks>
        /// Get a page of teams which use this scheme. The provided Scheme ID should be for a Team-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of teams per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        ApiResponse<List<Team>> SchemesSchemeIdTeamsGetWithHttpInfo (string schemeId, string page = null, string perPage = null);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Get the schemes.
        /// </summary>
        /// <remarks>
        /// Get a page of schemes. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Limit the results returned to the provided scope, either &#x60;team&#x60; or &#x60;channel&#x60;. (optional)</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of schemes per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Scheme&gt;</returns>
        System.Threading.Tasks.Task<List<Scheme>> SchemesGetAsync (string scope = null, string page = null, string perPage = null);

        /// <summary>
        /// Get the schemes.
        /// </summary>
        /// <remarks>
        /// Get a page of schemes. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Limit the results returned to the provided scope, either &#x60;team&#x60; or &#x60;channel&#x60;. (optional)</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of schemes per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Scheme&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Scheme>>> SchemesGetAsyncWithHttpInfo (string scope = null, string page = null, string perPage = null);
        /// <summary>
        /// Create a scheme
        /// </summary>
        /// <remarks>
        /// Create a new scheme.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheme"></param>
        /// <returns>Task of Scheme</returns>
        System.Threading.Tasks.Task<Scheme> SchemesPostAsync (InlineObject58 scheme);

        /// <summary>
        /// Create a scheme
        /// </summary>
        /// <remarks>
        /// Create a new scheme.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheme"></param>
        /// <returns>Task of ApiResponse (Scheme)</returns>
        System.Threading.Tasks.Task<ApiResponse<Scheme>> SchemesPostAsyncWithHttpInfo (InlineObject58 scheme);
        /// <summary>
        /// Get a page of channels which use this scheme.
        /// </summary>
        /// <remarks>
        /// Get a page of channels which use this scheme. The provided Scheme ID should be for a Channel-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        System.Threading.Tasks.Task<List<Channel>> SchemesSchemeIdChannelsGetAsync (string schemeId, string page = null, string perPage = null);

        /// <summary>
        /// Get a page of channels which use this scheme.
        /// </summary>
        /// <remarks>
        /// Get a page of channels which use this scheme. The provided Scheme ID should be for a Channel-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Channel>>> SchemesSchemeIdChannelsGetAsyncWithHttpInfo (string schemeId, string page = null, string perPage = null);
        /// <summary>
        /// Delete a scheme
        /// </summary>
        /// <remarks>
        /// Soft deletes a scheme, by marking the scheme as deleted in the database.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">ID of the scheme to delete</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> SchemesSchemeIdDeleteAsync (string schemeId);

        /// <summary>
        /// Delete a scheme
        /// </summary>
        /// <remarks>
        /// Soft deletes a scheme, by marking the scheme as deleted in the database.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">ID of the scheme to delete</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> SchemesSchemeIdDeleteAsyncWithHttpInfo (string schemeId);
        /// <summary>
        /// Get a scheme
        /// </summary>
        /// <remarks>
        /// Get a scheme from the provided scheme id.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <returns>Task of Scheme</returns>
        System.Threading.Tasks.Task<Scheme> SchemesSchemeIdGetAsync (string schemeId);

        /// <summary>
        /// Get a scheme
        /// </summary>
        /// <remarks>
        /// Get a scheme from the provided scheme id.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <returns>Task of ApiResponse (Scheme)</returns>
        System.Threading.Tasks.Task<ApiResponse<Scheme>> SchemesSchemeIdGetAsyncWithHttpInfo (string schemeId);
        /// <summary>
        /// Patch a scheme
        /// </summary>
        /// <remarks>
        /// Partially update a scheme by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of Scheme</returns>
        System.Threading.Tasks.Task<Scheme> SchemesSchemeIdPatchPutAsync (string schemeId, InlineObject59 body);

        /// <summary>
        /// Patch a scheme
        /// </summary>
        /// <remarks>
        /// Partially update a scheme by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Scheme)</returns>
        System.Threading.Tasks.Task<ApiResponse<Scheme>> SchemesSchemeIdPatchPutAsyncWithHttpInfo (string schemeId, InlineObject59 body);
        /// <summary>
        /// Get a page of teams which use this scheme.
        /// </summary>
        /// <remarks>
        /// Get a page of teams which use this scheme. The provided Scheme ID should be for a Team-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of teams per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        System.Threading.Tasks.Task<List<Team>> SchemesSchemeIdTeamsGetAsync (string schemeId, string page = null, string perPage = null);

        /// <summary>
        /// Get a page of teams which use this scheme.
        /// </summary>
        /// <remarks>
        /// Get a page of teams which use this scheme. The provided Scheme ID should be for a Team-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of teams per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Team>>> SchemesSchemeIdTeamsGetAsyncWithHttpInfo (string schemeId, string page = null, string perPage = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISchemesApi : ISchemesApiSync, ISchemesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SchemesApi : ISchemesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchemesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SchemesApi(string basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SchemesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SchemesApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SchemesApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Get the schemes. Get a page of schemes. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Limit the results returned to the provided scope, either &#x60;team&#x60; or &#x60;channel&#x60;. (optional)</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of schemes per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Scheme&gt;</returns>
        public List<Scheme> SchemesGet (string scope = null, string page = null, string perPage = null)
        {
            ApiResponse<List<Scheme>> localVarResponse = SchemesGetWithHttpInfo(scope, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the schemes. Get a page of schemes. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Limit the results returned to the provided scope, either &#x60;team&#x60; or &#x60;channel&#x60;. (optional)</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of schemes per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Scheme&gt;</returns>
        public ApiResponse<List<Scheme>> SchemesGetWithHttpInfo (string scope = null, string page = null, string perPage = null)
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (scope != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<Scheme> >("/schemes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SchemesGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get the schemes. Get a page of schemes. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Limit the results returned to the provided scope, either &#x60;team&#x60; or &#x60;channel&#x60;. (optional)</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of schemes per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Scheme&gt;</returns>
        public async System.Threading.Tasks.Task<List<Scheme>> SchemesGetAsync (string scope = null, string page = null, string perPage = null)
        {
            ApiResponse<List<Scheme>> localVarResponse = await SchemesGetAsyncWithHttpInfo(scope, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the schemes. Get a page of schemes. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scope">Limit the results returned to the provided scope, either &#x60;team&#x60; or &#x60;channel&#x60;. (optional)</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of schemes per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Scheme&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Scheme>>> SchemesGetAsyncWithHttpInfo (string scope = null, string page = null, string perPage = null)
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (scope != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "scope", scope))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Scheme>>("/schemes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SchemesGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a scheme Create a new scheme.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheme"></param>
        /// <returns>Scheme</returns>
        public Scheme SchemesPost (InlineObject58 scheme)
        {
            ApiResponse<Scheme> localVarResponse = SchemesPostWithHttpInfo(scheme);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a scheme Create a new scheme.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheme"></param>
        /// <returns>ApiResponse of Scheme</returns>
        public ApiResponse<Scheme> SchemesPostWithHttpInfo (InlineObject58 scheme)
        {
            // verify the required parameter 'scheme' is set
            if (scheme == null)
                throw new ApiException(400, "Missing required parameter 'scheme' when calling SchemesApi->SchemesPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = scheme;


            // make the HTTP request

            var response = this.Client.Post< Scheme >("/schemes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SchemesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a scheme Create a new scheme.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheme"></param>
        /// <returns>Task of Scheme</returns>
        public async System.Threading.Tasks.Task<Scheme> SchemesPostAsync (InlineObject58 scheme)
        {
            ApiResponse<Scheme> localVarResponse = await SchemesPostAsyncWithHttpInfo(scheme);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a scheme Create a new scheme.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="scheme"></param>
        /// <returns>Task of ApiResponse (Scheme)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Scheme>> SchemesPostAsyncWithHttpInfo (InlineObject58 scheme)
        {
            // verify the required parameter 'scheme' is set
            if (scheme == null)
                throw new ApiException(400, "Missing required parameter 'scheme' when calling SchemesApi->SchemesPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = scheme;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Scheme>("/schemes", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SchemesPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a page of channels which use this scheme. Get a page of channels which use this scheme. The provided Scheme ID should be for a Channel-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Channel&gt;</returns>
        public List<Channel> SchemesSchemeIdChannelsGet (string schemeId, string page = null, string perPage = null)
        {
            ApiResponse<List<Channel>> localVarResponse = SchemesSchemeIdChannelsGetWithHttpInfo(schemeId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a page of channels which use this scheme. Get a page of channels which use this scheme. The provided Scheme ID should be for a Channel-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Channel&gt;</returns>
        public ApiResponse<List<Channel>> SchemesSchemeIdChannelsGetWithHttpInfo (string schemeId, string page = null, string perPage = null)
        {
            // verify the required parameter 'schemeId' is set
            if (schemeId == null)
                throw new ApiException(400, "Missing required parameter 'schemeId' when calling SchemesApi->SchemesSchemeIdChannelsGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (schemeId != null)
                requestOptions.PathParameters.Add("scheme_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(schemeId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<Channel> >("/schemes/{scheme_id}/channels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SchemesSchemeIdChannelsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a page of channels which use this scheme. Get a page of channels which use this scheme. The provided Scheme ID should be for a Channel-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Channel&gt;</returns>
        public async System.Threading.Tasks.Task<List<Channel>> SchemesSchemeIdChannelsGetAsync (string schemeId, string page = null, string perPage = null)
        {
            ApiResponse<List<Channel>> localVarResponse = await SchemesSchemeIdChannelsGetAsyncWithHttpInfo(schemeId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a page of channels which use this scheme. Get a page of channels which use this scheme. The provided Scheme ID should be for a Channel-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of channels per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Channel&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Channel>>> SchemesSchemeIdChannelsGetAsyncWithHttpInfo (string schemeId, string page = null, string perPage = null)
        {
            // verify the required parameter 'schemeId' is set
            if (schemeId == null)
                throw new ApiException(400, "Missing required parameter 'schemeId' when calling SchemesApi->SchemesSchemeIdChannelsGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (schemeId != null)
                requestOptions.PathParameters.Add("scheme_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(schemeId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Channel>>("/schemes/{scheme_id}/channels", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SchemesSchemeIdChannelsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete a scheme Soft deletes a scheme, by marking the scheme as deleted in the database.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">ID of the scheme to delete</param>
        /// <returns>StatusOK</returns>
        public StatusOK SchemesSchemeIdDelete (string schemeId)
        {
            ApiResponse<StatusOK> localVarResponse = SchemesSchemeIdDeleteWithHttpInfo(schemeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete a scheme Soft deletes a scheme, by marking the scheme as deleted in the database.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">ID of the scheme to delete</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> SchemesSchemeIdDeleteWithHttpInfo (string schemeId)
        {
            // verify the required parameter 'schemeId' is set
            if (schemeId == null)
                throw new ApiException(400, "Missing required parameter 'schemeId' when calling SchemesApi->SchemesSchemeIdDelete");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (schemeId != null)
                requestOptions.PathParameters.Add("scheme_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(schemeId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/schemes/{scheme_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SchemesSchemeIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete a scheme Soft deletes a scheme, by marking the scheme as deleted in the database.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">ID of the scheme to delete</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> SchemesSchemeIdDeleteAsync (string schemeId)
        {
            ApiResponse<StatusOK> localVarResponse = await SchemesSchemeIdDeleteAsyncWithHttpInfo(schemeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete a scheme Soft deletes a scheme, by marking the scheme as deleted in the database.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">ID of the scheme to delete</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> SchemesSchemeIdDeleteAsyncWithHttpInfo (string schemeId)
        {
            // verify the required parameter 'schemeId' is set
            if (schemeId == null)
                throw new ApiException(400, "Missing required parameter 'schemeId' when calling SchemesApi->SchemesSchemeIdDelete");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (schemeId != null)
                requestOptions.PathParameters.Add("scheme_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(schemeId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/schemes/{scheme_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SchemesSchemeIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a scheme Get a scheme from the provided scheme id.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <returns>Scheme</returns>
        public Scheme SchemesSchemeIdGet (string schemeId)
        {
            ApiResponse<Scheme> localVarResponse = SchemesSchemeIdGetWithHttpInfo(schemeId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a scheme Get a scheme from the provided scheme id.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <returns>ApiResponse of Scheme</returns>
        public ApiResponse<Scheme> SchemesSchemeIdGetWithHttpInfo (string schemeId)
        {
            // verify the required parameter 'schemeId' is set
            if (schemeId == null)
                throw new ApiException(400, "Missing required parameter 'schemeId' when calling SchemesApi->SchemesSchemeIdGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (schemeId != null)
                requestOptions.PathParameters.Add("scheme_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(schemeId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< Scheme >("/schemes/{scheme_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SchemesSchemeIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a scheme Get a scheme from the provided scheme id.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <returns>Task of Scheme</returns>
        public async System.Threading.Tasks.Task<Scheme> SchemesSchemeIdGetAsync (string schemeId)
        {
            ApiResponse<Scheme> localVarResponse = await SchemesSchemeIdGetAsyncWithHttpInfo(schemeId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a scheme Get a scheme from the provided scheme id.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <returns>Task of ApiResponse (Scheme)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Scheme>> SchemesSchemeIdGetAsyncWithHttpInfo (string schemeId)
        {
            // verify the required parameter 'schemeId' is set
            if (schemeId == null)
                throw new ApiException(400, "Missing required parameter 'schemeId' when calling SchemesApi->SchemesSchemeIdGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (schemeId != null)
                requestOptions.PathParameters.Add("scheme_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(schemeId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<Scheme>("/schemes/{scheme_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SchemesSchemeIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Patch a scheme Partially update a scheme by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="body"></param>
        /// <returns>Scheme</returns>
        public Scheme SchemesSchemeIdPatchPut (string schemeId, InlineObject59 body)
        {
            ApiResponse<Scheme> localVarResponse = SchemesSchemeIdPatchPutWithHttpInfo(schemeId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Patch a scheme Partially update a scheme by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Scheme</returns>
        public ApiResponse<Scheme> SchemesSchemeIdPatchPutWithHttpInfo (string schemeId, InlineObject59 body)
        {
            // verify the required parameter 'schemeId' is set
            if (schemeId == null)
                throw new ApiException(400, "Missing required parameter 'schemeId' when calling SchemesApi->SchemesSchemeIdPatchPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SchemesApi->SchemesSchemeIdPatchPut");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (schemeId != null)
                requestOptions.PathParameters.Add("scheme_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(schemeId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< Scheme >("/schemes/{scheme_id}/patch", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SchemesSchemeIdPatchPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Patch a scheme Partially update a scheme by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of Scheme</returns>
        public async System.Threading.Tasks.Task<Scheme> SchemesSchemeIdPatchPutAsync (string schemeId, InlineObject59 body)
        {
            ApiResponse<Scheme> localVarResponse = await SchemesSchemeIdPatchPutAsyncWithHttpInfo(schemeId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Patch a scheme Partially update a scheme by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Scheme)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Scheme>> SchemesSchemeIdPatchPutAsyncWithHttpInfo (string schemeId, InlineObject59 body)
        {
            // verify the required parameter 'schemeId' is set
            if (schemeId == null)
                throw new ApiException(400, "Missing required parameter 'schemeId' when calling SchemesApi->SchemesSchemeIdPatchPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling SchemesApi->SchemesSchemeIdPatchPut");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (schemeId != null)
                requestOptions.PathParameters.Add("scheme_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(schemeId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<Scheme>("/schemes/{scheme_id}/patch", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SchemesSchemeIdPatchPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a page of teams which use this scheme. Get a page of teams which use this scheme. The provided Scheme ID should be for a Team-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of teams per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>List&lt;Team&gt;</returns>
        public List<Team> SchemesSchemeIdTeamsGet (string schemeId, string page = null, string perPage = null)
        {
            ApiResponse<List<Team>> localVarResponse = SchemesSchemeIdTeamsGetWithHttpInfo(schemeId, page, perPage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a page of teams which use this scheme. Get a page of teams which use this scheme. The provided Scheme ID should be for a Team-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of teams per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>ApiResponse of List&lt;Team&gt;</returns>
        public ApiResponse<List<Team>> SchemesSchemeIdTeamsGetWithHttpInfo (string schemeId, string page = null, string perPage = null)
        {
            // verify the required parameter 'schemeId' is set
            if (schemeId == null)
                throw new ApiException(400, "Missing required parameter 'schemeId' when calling SchemesApi->SchemesSchemeIdTeamsGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (schemeId != null)
                requestOptions.PathParameters.Add("scheme_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(schemeId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<Team> >("/schemes/{scheme_id}/teams", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SchemesSchemeIdTeamsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a page of teams which use this scheme. Get a page of teams which use this scheme. The provided Scheme ID should be for a Team-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of teams per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of List&lt;Team&gt;</returns>
        public async System.Threading.Tasks.Task<List<Team>> SchemesSchemeIdTeamsGetAsync (string schemeId, string page = null, string perPage = null)
        {
            ApiResponse<List<Team>> localVarResponse = await SchemesSchemeIdTeamsGetAsyncWithHttpInfo(schemeId, page, perPage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a page of teams which use this scheme. Get a page of teams which use this scheme. The provided Scheme ID should be for a Team-scoped Scheme. Use the query parameters to modify the behaviour of this endpoint.  ##### Permissions &#x60;manage_system&#x60; permission is required.  __Minimum server version__: 5.0 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="schemeId">Scheme GUID</param>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of teams per page. (optional, default to &quot;60&quot;)</param>
        /// <returns>Task of ApiResponse (List&lt;Team&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<Team>>> SchemesSchemeIdTeamsGetAsyncWithHttpInfo (string schemeId, string page = null, string perPage = null)
        {
            // verify the required parameter 'schemeId' is set
            if (schemeId == null)
                throw new ApiException(400, "Missing required parameter 'schemeId' when calling SchemesApi->SchemesSchemeIdTeamsGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (schemeId != null)
                requestOptions.PathParameters.Add("scheme_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(schemeId)); // path parameter
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Team>>("/schemes/{scheme_id}/teams", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("SchemesSchemeIdTeamsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
