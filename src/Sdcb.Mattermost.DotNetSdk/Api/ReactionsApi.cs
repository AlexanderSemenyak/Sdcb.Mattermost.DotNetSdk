/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReactionsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Bulk get the reaction for posts
        /// </summary>
        /// <remarks>
        /// Get a list of reactions made by all users to a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in.  __Minimum server version__: 5.8 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postIds">Array of post IDs</param>
        /// <returns>Dictionary&lt;string, List&lt;Reaction&gt;&gt;</returns>
        Dictionary<string, List<Reaction>> PostsIdsReactionsPost (List<string> postIds);

        /// <summary>
        /// Bulk get the reaction for posts
        /// </summary>
        /// <remarks>
        /// Get a list of reactions made by all users to a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in.  __Minimum server version__: 5.8 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postIds">Array of post IDs</param>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;Reaction&gt;&gt;</returns>
        ApiResponse<Dictionary<string, List<Reaction>>> PostsIdsReactionsPostWithHttpInfo (List<string> postIds);
        /// <summary>
        /// Get a list of reactions to a post
        /// </summary>
        /// <remarks>
        /// Get a list of reactions made by all users to a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of a post</param>
        /// <returns>List&lt;Reaction&gt;</returns>
        List<Reaction> PostsPostIdReactionsGet (string postId);

        /// <summary>
        /// Get a list of reactions to a post
        /// </summary>
        /// <remarks>
        /// Get a list of reactions made by all users to a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of a post</param>
        /// <returns>ApiResponse of List&lt;Reaction&gt;</returns>
        ApiResponse<List<Reaction>> PostsPostIdReactionsGetWithHttpInfo (string postId);
        /// <summary>
        /// Create a reaction
        /// </summary>
        /// <remarks>
        /// Create a reaction. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reaction">The user&#39;s reaction with its post_id, user_id, and emoji_name fields set</param>
        /// <returns>Reaction</returns>
        Reaction ReactionsPost (Reaction reaction);

        /// <summary>
        /// Create a reaction
        /// </summary>
        /// <remarks>
        /// Create a reaction. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reaction">The user&#39;s reaction with its post_id, user_id, and emoji_name fields set</param>
        /// <returns>ApiResponse of Reaction</returns>
        ApiResponse<Reaction> ReactionsPostWithHttpInfo (Reaction reaction);
        /// <summary>
        /// Remove a reaction from a post
        /// </summary>
        /// <remarks>
        /// Deletes a reaction made by a user from the given post. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="postId">ID of the post</param>
        /// <param name="emojiName">emoji name</param>
        /// <returns>StatusOK</returns>
        StatusOK UsersUserIdPostsPostIdReactionsEmojiNameDelete (string userId, string postId, string emojiName);

        /// <summary>
        /// Remove a reaction from a post
        /// </summary>
        /// <remarks>
        /// Deletes a reaction made by a user from the given post. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="postId">ID of the post</param>
        /// <param name="emojiName">emoji name</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> UsersUserIdPostsPostIdReactionsEmojiNameDeleteWithHttpInfo (string userId, string postId, string emojiName);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReactionsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Bulk get the reaction for posts
        /// </summary>
        /// <remarks>
        /// Get a list of reactions made by all users to a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in.  __Minimum server version__: 5.8 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postIds">Array of post IDs</param>
        /// <returns>Task of Dictionary&lt;string, List&lt;Reaction&gt;&gt;</returns>
        System.Threading.Tasks.Task<Dictionary<string, List<Reaction>>> PostsIdsReactionsPostAsync (List<string> postIds);

        /// <summary>
        /// Bulk get the reaction for posts
        /// </summary>
        /// <remarks>
        /// Get a list of reactions made by all users to a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in.  __Minimum server version__: 5.8 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postIds">Array of post IDs</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;Reaction&gt;&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<Dictionary<string, List<Reaction>>>> PostsIdsReactionsPostAsyncWithHttpInfo (List<string> postIds);
        /// <summary>
        /// Get a list of reactions to a post
        /// </summary>
        /// <remarks>
        /// Get a list of reactions made by all users to a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of a post</param>
        /// <returns>Task of List&lt;Reaction&gt;</returns>
        System.Threading.Tasks.Task<List<Reaction>> PostsPostIdReactionsGetAsync (string postId);

        /// <summary>
        /// Get a list of reactions to a post
        /// </summary>
        /// <remarks>
        /// Get a list of reactions made by all users to a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of a post</param>
        /// <returns>Task of ApiResponse (List&lt;Reaction&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<Reaction>>> PostsPostIdReactionsGetAsyncWithHttpInfo (string postId);
        /// <summary>
        /// Create a reaction
        /// </summary>
        /// <remarks>
        /// Create a reaction. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reaction">The user&#39;s reaction with its post_id, user_id, and emoji_name fields set</param>
        /// <returns>Task of Reaction</returns>
        System.Threading.Tasks.Task<Reaction> ReactionsPostAsync (Reaction reaction);

        /// <summary>
        /// Create a reaction
        /// </summary>
        /// <remarks>
        /// Create a reaction. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reaction">The user&#39;s reaction with its post_id, user_id, and emoji_name fields set</param>
        /// <returns>Task of ApiResponse (Reaction)</returns>
        System.Threading.Tasks.Task<ApiResponse<Reaction>> ReactionsPostAsyncWithHttpInfo (Reaction reaction);
        /// <summary>
        /// Remove a reaction from a post
        /// </summary>
        /// <remarks>
        /// Deletes a reaction made by a user from the given post. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="postId">ID of the post</param>
        /// <param name="emojiName">emoji name</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> UsersUserIdPostsPostIdReactionsEmojiNameDeleteAsync (string userId, string postId, string emojiName);

        /// <summary>
        /// Remove a reaction from a post
        /// </summary>
        /// <remarks>
        /// Deletes a reaction made by a user from the given post. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
        /// </remarks>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="postId">ID of the post</param>
        /// <param name="emojiName">emoji name</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> UsersUserIdPostsPostIdReactionsEmojiNameDeleteAsyncWithHttpInfo (string userId, string postId, string emojiName);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IReactionsApi : IReactionsApiSync, IReactionsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ReactionsApi : IReactionsApi
    {
        private Sdcb.Mattermost.DotNetSdk.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ReactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReactionsApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReactionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ReactionsApi(String basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Sdcb.Mattermost.DotNetSdk.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ReactionsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ReactionsApi(Sdcb.Mattermost.DotNetSdk.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Sdcb.Mattermost.DotNetSdk.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ReactionsApi(Sdcb.Mattermost.DotNetSdk.Client.ISynchronousClient client,Sdcb.Mattermost.DotNetSdk.Client.IAsynchronousClient asyncClient, Sdcb.Mattermost.DotNetSdk.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Sdcb.Mattermost.DotNetSdk.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Sdcb.Mattermost.DotNetSdk.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Bulk get the reaction for posts Get a list of reactions made by all users to a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in.  __Minimum server version__: 5.8 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postIds">Array of post IDs</param>
        /// <returns>Dictionary&lt;string, List&lt;Reaction&gt;&gt;</returns>
        public Dictionary<string, List<Reaction>> PostsIdsReactionsPost (List<string> postIds)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Dictionary<string, List<Reaction>>> localVarResponse = PostsIdsReactionsPostWithHttpInfo(postIds);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Bulk get the reaction for posts Get a list of reactions made by all users to a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in.  __Minimum server version__: 5.8 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postIds">Array of post IDs</param>
        /// <returns>ApiResponse of Dictionary&lt;string, List&lt;Reaction&gt;&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Dictionary<string, List<Reaction>> > PostsIdsReactionsPostWithHttpInfo (List<string> postIds)
        {
            // verify the required parameter 'postIds' is set
            if (postIds == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postIds' when calling ReactionsApi->PostsIdsReactionsPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = postIds;


            // make the HTTP request

            var response = this.Client.Post< Dictionary<string, List<Reaction>> >("/posts/ids/reactions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsIdsReactionsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Bulk get the reaction for posts Get a list of reactions made by all users to a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in.  __Minimum server version__: 5.8 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postIds">Array of post IDs</param>
        /// <returns>Task of Dictionary&lt;string, List&lt;Reaction&gt;&gt;</returns>
        public async System.Threading.Tasks.Task<Dictionary<string, List<Reaction>>> PostsIdsReactionsPostAsync (List<string> postIds)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Dictionary<string, List<Reaction>>> localVarResponse = await PostsIdsReactionsPostAsyncWithHttpInfo(postIds);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Bulk get the reaction for posts Get a list of reactions made by all users to a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in.  __Minimum server version__: 5.8 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postIds">Array of post IDs</param>
        /// <returns>Task of ApiResponse (Dictionary&lt;string, List&lt;Reaction&gt;&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Dictionary<string, List<Reaction>>>> PostsIdsReactionsPostAsyncWithHttpInfo (List<string> postIds)
        {
            // verify the required parameter 'postIds' is set
            if (postIds == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postIds' when calling ReactionsApi->PostsIdsReactionsPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = postIds;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Dictionary<string, List<Reaction>>>("/posts/ids/reactions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsIdsReactionsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a list of reactions to a post Get a list of reactions made by all users to a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of a post</param>
        /// <returns>List&lt;Reaction&gt;</returns>
        public List<Reaction> PostsPostIdReactionsGet (string postId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Reaction>> localVarResponse = PostsPostIdReactionsGetWithHttpInfo(postId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a list of reactions to a post Get a list of reactions made by all users to a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of a post</param>
        /// <returns>ApiResponse of List&lt;Reaction&gt;</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< List<Reaction> > PostsPostIdReactionsGetWithHttpInfo (string postId)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling ReactionsApi->PostsPostIdReactionsGet");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< List<Reaction> >("/posts/{post_id}/reactions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdReactionsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get a list of reactions to a post Get a list of reactions made by all users to a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of a post</param>
        /// <returns>Task of List&lt;Reaction&gt;</returns>
        public async System.Threading.Tasks.Task<List<Reaction>> PostsPostIdReactionsGetAsync (string postId)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Reaction>> localVarResponse = await PostsPostIdReactionsGetAsyncWithHttpInfo(postId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a list of reactions to a post Get a list of reactions made by all users to a given post. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postId">ID of a post</param>
        /// <returns>Task of ApiResponse (List&lt;Reaction&gt;)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<List<Reaction>>> PostsPostIdReactionsGetAsyncWithHttpInfo (string postId)
        {
            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling ReactionsApi->PostsPostIdReactionsGet");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<Reaction>>("/posts/{post_id}/reactions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("PostsPostIdReactionsGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a reaction Create a reaction. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reaction">The user&#39;s reaction with its post_id, user_id, and emoji_name fields set</param>
        /// <returns>Reaction</returns>
        public Reaction ReactionsPost (Reaction reaction)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Reaction> localVarResponse = ReactionsPostWithHttpInfo(reaction);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a reaction Create a reaction. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reaction">The user&#39;s reaction with its post_id, user_id, and emoji_name fields set</param>
        /// <returns>ApiResponse of Reaction</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< Reaction > ReactionsPostWithHttpInfo (Reaction reaction)
        {
            // verify the required parameter 'reaction' is set
            if (reaction == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'reaction' when calling ReactionsApi->ReactionsPost");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = reaction;


            // make the HTTP request

            var response = this.Client.Post< Reaction >("/reactions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ReactionsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create a reaction Create a reaction. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reaction">The user&#39;s reaction with its post_id, user_id, and emoji_name fields set</param>
        /// <returns>Task of Reaction</returns>
        public async System.Threading.Tasks.Task<Reaction> ReactionsPostAsync (Reaction reaction)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Reaction> localVarResponse = await ReactionsPostAsyncWithHttpInfo(reaction);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a reaction Create a reaction. ##### Permissions Must have &#x60;read_channel&#x60; permission for the channel the post is in. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="reaction">The user&#39;s reaction with its post_id, user_id, and emoji_name fields set</param>
        /// <returns>Task of ApiResponse (Reaction)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<Reaction>> ReactionsPostAsyncWithHttpInfo (Reaction reaction)
        {
            // verify the required parameter 'reaction' is set
            if (reaction == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'reaction' when calling ReactionsApi->ReactionsPost");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = reaction;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<Reaction>("/reactions", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("ReactionsPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Remove a reaction from a post Deletes a reaction made by a user from the given post. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="postId">ID of the post</param>
        /// <param name="emojiName">emoji name</param>
        /// <returns>StatusOK</returns>
        public StatusOK UsersUserIdPostsPostIdReactionsEmojiNameDelete (string userId, string postId, string emojiName)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = UsersUserIdPostsPostIdReactionsEmojiNameDeleteWithHttpInfo(userId, postId, emojiName);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove a reaction from a post Deletes a reaction made by a user from the given post. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="postId">ID of the post</param>
        /// <param name="emojiName">emoji name</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public Sdcb.Mattermost.DotNetSdk.Client.ApiResponse< StatusOK > UsersUserIdPostsPostIdReactionsEmojiNameDeleteWithHttpInfo (string userId, string postId, string emojiName)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ReactionsApi->UsersUserIdPostsPostIdReactionsEmojiNameDelete");

            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling ReactionsApi->UsersUserIdPostsPostIdReactionsEmojiNameDelete");

            // verify the required parameter 'emojiName' is set
            if (emojiName == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'emojiName' when calling ReactionsApi->UsersUserIdPostsPostIdReactionsEmojiNameDelete");

            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter
            if (emojiName != null)
                requestOptions.PathParameters.Add("emoji_name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(emojiName)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/users/{user_id}/posts/{post_id}/reactions/{emoji_name}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPostsPostIdReactionsEmojiNameDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Remove a reaction from a post Deletes a reaction made by a user from the given post. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="postId">ID of the post</param>
        /// <param name="emojiName">emoji name</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> UsersUserIdPostsPostIdReactionsEmojiNameDeleteAsync (string userId, string postId, string emojiName)
        {
             Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK> localVarResponse = await UsersUserIdPostsPostIdReactionsEmojiNameDeleteAsyncWithHttpInfo(userId, postId, emojiName);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove a reaction from a post Deletes a reaction made by a user from the given post. ##### Permissions Must be user or have &#x60;manage_system&#x60; permission. 
        /// </summary>
        /// <exception cref="Sdcb.Mattermost.DotNetSdk.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId">ID of the user</param>
        /// <param name="postId">ID of the post</param>
        /// <param name="emojiName">emoji name</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<Sdcb.Mattermost.DotNetSdk.Client.ApiResponse<StatusOK>> UsersUserIdPostsPostIdReactionsEmojiNameDeleteAsyncWithHttpInfo (string userId, string postId, string emojiName)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'userId' when calling ReactionsApi->UsersUserIdPostsPostIdReactionsEmojiNameDelete");

            // verify the required parameter 'postId' is set
            if (postId == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'postId' when calling ReactionsApi->UsersUserIdPostsPostIdReactionsEmojiNameDelete");

            // verify the required parameter 'emojiName' is set
            if (emojiName == null)
                throw new Sdcb.Mattermost.DotNetSdk.Client.ApiException(400, "Missing required parameter 'emojiName' when calling ReactionsApi->UsersUserIdPostsPostIdReactionsEmojiNameDelete");


            Sdcb.Mattermost.DotNetSdk.Client.RequestOptions requestOptions = new Sdcb.Mattermost.DotNetSdk.Client.RequestOptions();

            String[] @contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] @accepts = new String[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (userId != null)
                requestOptions.PathParameters.Add("user_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(userId)); // path parameter
            if (postId != null)
                requestOptions.PathParameters.Add("post_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(postId)); // path parameter
            if (emojiName != null)
                requestOptions.PathParameters.Add("emoji_name", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(emojiName)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/users/{user_id}/posts/{post_id}/reactions/{emoji_name}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("UsersUserIdPostsPostIdReactionsEmojiNameDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
