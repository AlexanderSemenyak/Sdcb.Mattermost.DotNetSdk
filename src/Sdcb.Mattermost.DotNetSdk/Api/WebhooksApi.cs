/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// List incoming webhooks
        /// </summary>
        /// <remarks>
        /// Get a page of a list of incoming webhooks. Optionally filter for a specific team using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of hooks per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="teamId">The ID of the team to get hooks for. (optional)</param>
        /// <returns>List&lt;IncomingWebhook&gt;</returns>
        List<IncomingWebhook> HooksIncomingGet (string page = null, string perPage = null, string teamId = null);

        /// <summary>
        /// List incoming webhooks
        /// </summary>
        /// <remarks>
        /// Get a page of a list of incoming webhooks. Optionally filter for a specific team using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of hooks per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="teamId">The ID of the team to get hooks for. (optional)</param>
        /// <returns>ApiResponse of List&lt;IncomingWebhook&gt;</returns>
        ApiResponse<List<IncomingWebhook>> HooksIncomingGetWithHttpInfo (string page = null, string perPage = null, string teamId = null);
        /// <summary>
        /// Get an incoming webhook
        /// </summary>
        /// <remarks>
        /// Get an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Incoming Webhook GUID</param>
        /// <returns>IncomingWebhook</returns>
        IncomingWebhook HooksIncomingHookIdGet (string hookId);

        /// <summary>
        /// Get an incoming webhook
        /// </summary>
        /// <remarks>
        /// Get an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Incoming Webhook GUID</param>
        /// <returns>ApiResponse of IncomingWebhook</returns>
        ApiResponse<IncomingWebhook> HooksIncomingHookIdGetWithHttpInfo (string hookId);
        /// <summary>
        /// Update an incoming webhook
        /// </summary>
        /// <remarks>
        /// Update an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Incoming Webhook GUID</param>
        /// <param name="body"></param>
        /// <returns>IncomingWebhook</returns>
        IncomingWebhook HooksIncomingHookIdPut (string hookId, InlineObject50 body);

        /// <summary>
        /// Update an incoming webhook
        /// </summary>
        /// <remarks>
        /// Update an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Incoming Webhook GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of IncomingWebhook</returns>
        ApiResponse<IncomingWebhook> HooksIncomingHookIdPutWithHttpInfo (string hookId, InlineObject50 body);
        /// <summary>
        /// Create an incoming webhook
        /// </summary>
        /// <remarks>
        /// Create an incoming webhook for a channel. ##### Permissions &#x60;manage_webhooks&#x60; for the channel the webhook is in. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>IncomingWebhook</returns>
        IncomingWebhook HooksIncomingPost (InlineObject49 body);

        /// <summary>
        /// Create an incoming webhook
        /// </summary>
        /// <remarks>
        /// Create an incoming webhook for a channel. ##### Permissions &#x60;manage_webhooks&#x60; for the channel the webhook is in. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of IncomingWebhook</returns>
        ApiResponse<IncomingWebhook> HooksIncomingPostWithHttpInfo (InlineObject49 body);
        /// <summary>
        /// List outgoing webhooks
        /// </summary>
        /// <remarks>
        /// Get a page of a list of outgoing webhooks. Optionally filter for a specific team or channel using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team/channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of hooks per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="teamId">The ID of the team to get hooks for. (optional)</param>
        /// <param name="channelId">The ID of the channel to get hooks for. (optional)</param>
        /// <returns>List&lt;OutgoingWebhook&gt;</returns>
        List<OutgoingWebhook> HooksOutgoingGet (string page = null, string perPage = null, string teamId = null, string channelId = null);

        /// <summary>
        /// List outgoing webhooks
        /// </summary>
        /// <remarks>
        /// Get a page of a list of outgoing webhooks. Optionally filter for a specific team or channel using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team/channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of hooks per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="teamId">The ID of the team to get hooks for. (optional)</param>
        /// <param name="channelId">The ID of the channel to get hooks for. (optional)</param>
        /// <returns>ApiResponse of List&lt;OutgoingWebhook&gt;</returns>
        ApiResponse<List<OutgoingWebhook>> HooksOutgoingGetWithHttpInfo (string page = null, string perPage = null, string teamId = null, string channelId = null);
        /// <summary>
        /// Delete an outgoing webhook
        /// </summary>
        /// <remarks>
        /// Delete an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>StatusOK</returns>
        StatusOK HooksOutgoingHookIdDelete (string hookId);

        /// <summary>
        /// Delete an outgoing webhook
        /// </summary>
        /// <remarks>
        /// Delete an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> HooksOutgoingHookIdDeleteWithHttpInfo (string hookId);
        /// <summary>
        /// Get an outgoing webhook
        /// </summary>
        /// <remarks>
        /// Get an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>OutgoingWebhook</returns>
        OutgoingWebhook HooksOutgoingHookIdGet (string hookId);

        /// <summary>
        /// Get an outgoing webhook
        /// </summary>
        /// <remarks>
        /// Get an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>ApiResponse of OutgoingWebhook</returns>
        ApiResponse<OutgoingWebhook> HooksOutgoingHookIdGetWithHttpInfo (string hookId);
        /// <summary>
        /// Update an outgoing webhook
        /// </summary>
        /// <remarks>
        /// Update an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">outgoing Webhook GUID</param>
        /// <param name="body"></param>
        /// <returns>OutgoingWebhook</returns>
        OutgoingWebhook HooksOutgoingHookIdPut (string hookId, InlineObject52 body);

        /// <summary>
        /// Update an outgoing webhook
        /// </summary>
        /// <remarks>
        /// Update an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">outgoing Webhook GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of OutgoingWebhook</returns>
        ApiResponse<OutgoingWebhook> HooksOutgoingHookIdPutWithHttpInfo (string hookId, InlineObject52 body);
        /// <summary>
        /// Regenerate the token for the outgoing webhook.
        /// </summary>
        /// <remarks>
        /// Regenerate the token for the outgoing webhook. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>StatusOK</returns>
        StatusOK HooksOutgoingHookIdRegenTokenPost (string hookId);

        /// <summary>
        /// Regenerate the token for the outgoing webhook.
        /// </summary>
        /// <remarks>
        /// Regenerate the token for the outgoing webhook. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        ApiResponse<StatusOK> HooksOutgoingHookIdRegenTokenPostWithHttpInfo (string hookId);
        /// <summary>
        /// Create an outgoing webhook
        /// </summary>
        /// <remarks>
        /// Create an outgoing webhook for a team. ##### Permissions &#x60;manage_webhooks&#x60; for the team the webhook is in. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>OutgoingWebhook</returns>
        OutgoingWebhook HooksOutgoingPost (InlineObject51 body);

        /// <summary>
        /// Create an outgoing webhook
        /// </summary>
        /// <remarks>
        /// Create an outgoing webhook for a team. ##### Permissions &#x60;manage_webhooks&#x60; for the team the webhook is in. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of OutgoingWebhook</returns>
        ApiResponse<OutgoingWebhook> HooksOutgoingPostWithHttpInfo (InlineObject51 body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// List incoming webhooks
        /// </summary>
        /// <remarks>
        /// Get a page of a list of incoming webhooks. Optionally filter for a specific team using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of hooks per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="teamId">The ID of the team to get hooks for. (optional)</param>
        /// <returns>Task of List&lt;IncomingWebhook&gt;</returns>
        System.Threading.Tasks.Task<List<IncomingWebhook>> HooksIncomingGetAsync (string page = null, string perPage = null, string teamId = null);

        /// <summary>
        /// List incoming webhooks
        /// </summary>
        /// <remarks>
        /// Get a page of a list of incoming webhooks. Optionally filter for a specific team using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of hooks per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="teamId">The ID of the team to get hooks for. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IncomingWebhook&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<IncomingWebhook>>> HooksIncomingGetAsyncWithHttpInfo (string page = null, string perPage = null, string teamId = null);
        /// <summary>
        /// Get an incoming webhook
        /// </summary>
        /// <remarks>
        /// Get an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Incoming Webhook GUID</param>
        /// <returns>Task of IncomingWebhook</returns>
        System.Threading.Tasks.Task<IncomingWebhook> HooksIncomingHookIdGetAsync (string hookId);

        /// <summary>
        /// Get an incoming webhook
        /// </summary>
        /// <remarks>
        /// Get an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Incoming Webhook GUID</param>
        /// <returns>Task of ApiResponse (IncomingWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncomingWebhook>> HooksIncomingHookIdGetAsyncWithHttpInfo (string hookId);
        /// <summary>
        /// Update an incoming webhook
        /// </summary>
        /// <remarks>
        /// Update an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Incoming Webhook GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of IncomingWebhook</returns>
        System.Threading.Tasks.Task<IncomingWebhook> HooksIncomingHookIdPutAsync (string hookId, InlineObject50 body);

        /// <summary>
        /// Update an incoming webhook
        /// </summary>
        /// <remarks>
        /// Update an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Incoming Webhook GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (IncomingWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncomingWebhook>> HooksIncomingHookIdPutAsyncWithHttpInfo (string hookId, InlineObject50 body);
        /// <summary>
        /// Create an incoming webhook
        /// </summary>
        /// <remarks>
        /// Create an incoming webhook for a channel. ##### Permissions &#x60;manage_webhooks&#x60; for the channel the webhook is in. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of IncomingWebhook</returns>
        System.Threading.Tasks.Task<IncomingWebhook> HooksIncomingPostAsync (InlineObject49 body);

        /// <summary>
        /// Create an incoming webhook
        /// </summary>
        /// <remarks>
        /// Create an incoming webhook for a channel. ##### Permissions &#x60;manage_webhooks&#x60; for the channel the webhook is in. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (IncomingWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<IncomingWebhook>> HooksIncomingPostAsyncWithHttpInfo (InlineObject49 body);
        /// <summary>
        /// List outgoing webhooks
        /// </summary>
        /// <remarks>
        /// Get a page of a list of outgoing webhooks. Optionally filter for a specific team or channel using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team/channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of hooks per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="teamId">The ID of the team to get hooks for. (optional)</param>
        /// <param name="channelId">The ID of the channel to get hooks for. (optional)</param>
        /// <returns>Task of List&lt;OutgoingWebhook&gt;</returns>
        System.Threading.Tasks.Task<List<OutgoingWebhook>> HooksOutgoingGetAsync (string page = null, string perPage = null, string teamId = null, string channelId = null);

        /// <summary>
        /// List outgoing webhooks
        /// </summary>
        /// <remarks>
        /// Get a page of a list of outgoing webhooks. Optionally filter for a specific team or channel using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team/channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of hooks per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="teamId">The ID of the team to get hooks for. (optional)</param>
        /// <param name="channelId">The ID of the channel to get hooks for. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OutgoingWebhook&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OutgoingWebhook>>> HooksOutgoingGetAsyncWithHttpInfo (string page = null, string perPage = null, string teamId = null, string channelId = null);
        /// <summary>
        /// Delete an outgoing webhook
        /// </summary>
        /// <remarks>
        /// Delete an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> HooksOutgoingHookIdDeleteAsync (string hookId);

        /// <summary>
        /// Delete an outgoing webhook
        /// </summary>
        /// <remarks>
        /// Delete an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> HooksOutgoingHookIdDeleteAsyncWithHttpInfo (string hookId);
        /// <summary>
        /// Get an outgoing webhook
        /// </summary>
        /// <remarks>
        /// Get an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>Task of OutgoingWebhook</returns>
        System.Threading.Tasks.Task<OutgoingWebhook> HooksOutgoingHookIdGetAsync (string hookId);

        /// <summary>
        /// Get an outgoing webhook
        /// </summary>
        /// <remarks>
        /// Get an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>Task of ApiResponse (OutgoingWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutgoingWebhook>> HooksOutgoingHookIdGetAsyncWithHttpInfo (string hookId);
        /// <summary>
        /// Update an outgoing webhook
        /// </summary>
        /// <remarks>
        /// Update an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">outgoing Webhook GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of OutgoingWebhook</returns>
        System.Threading.Tasks.Task<OutgoingWebhook> HooksOutgoingHookIdPutAsync (string hookId, InlineObject52 body);

        /// <summary>
        /// Update an outgoing webhook
        /// </summary>
        /// <remarks>
        /// Update an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">outgoing Webhook GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (OutgoingWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutgoingWebhook>> HooksOutgoingHookIdPutAsyncWithHttpInfo (string hookId, InlineObject52 body);
        /// <summary>
        /// Regenerate the token for the outgoing webhook.
        /// </summary>
        /// <remarks>
        /// Regenerate the token for the outgoing webhook. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>Task of StatusOK</returns>
        System.Threading.Tasks.Task<StatusOK> HooksOutgoingHookIdRegenTokenPostAsync (string hookId);

        /// <summary>
        /// Regenerate the token for the outgoing webhook.
        /// </summary>
        /// <remarks>
        /// Regenerate the token for the outgoing webhook. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        System.Threading.Tasks.Task<ApiResponse<StatusOK>> HooksOutgoingHookIdRegenTokenPostAsyncWithHttpInfo (string hookId);
        /// <summary>
        /// Create an outgoing webhook
        /// </summary>
        /// <remarks>
        /// Create an outgoing webhook for a team. ##### Permissions &#x60;manage_webhooks&#x60; for the team the webhook is in. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of OutgoingWebhook</returns>
        System.Threading.Tasks.Task<OutgoingWebhook> HooksOutgoingPostAsync (InlineObject51 body);

        /// <summary>
        /// Create an outgoing webhook
        /// </summary>
        /// <remarks>
        /// Create an outgoing webhook for a team. ##### Permissions &#x60;manage_webhooks&#x60; for the team the webhook is in. 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (OutgoingWebhook)</returns>
        System.Threading.Tasks.Task<ApiResponse<OutgoingWebhook>> HooksOutgoingPostAsyncWithHttpInfo (InlineObject51 body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IWebhooksApi : IWebhooksApiSync, IWebhooksApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class WebhooksApi : IWebhooksApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class.
        /// </summary>
        /// <returns></returns>
        public WebhooksApi(string basePath)
        {
            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                new Configuration { BasePath = basePath }
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhooksApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public WebhooksApi(Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Sdcb.Mattermost.DotNetSdk.Client.Configuration.MergeConfigurations(
                Sdcb.Mattermost.DotNetSdk.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PetApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public WebhooksApi(ISynchronousClient client, IAsynchronousClient asyncClient, IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Sdcb.Mattermost.DotNetSdk.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// List incoming webhooks Get a page of a list of incoming webhooks. Optionally filter for a specific team using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of hooks per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="teamId">The ID of the team to get hooks for. (optional)</param>
        /// <returns>List&lt;IncomingWebhook&gt;</returns>
        public List<IncomingWebhook> HooksIncomingGet (string page = null, string perPage = null, string teamId = null)
        {
            ApiResponse<List<IncomingWebhook>> localVarResponse = HooksIncomingGetWithHttpInfo(page, perPage, teamId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List incoming webhooks Get a page of a list of incoming webhooks. Optionally filter for a specific team using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of hooks per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="teamId">The ID of the team to get hooks for. (optional)</param>
        /// <returns>ApiResponse of List&lt;IncomingWebhook&gt;</returns>
        public ApiResponse<List<IncomingWebhook>> HooksIncomingGetWithHttpInfo (string page = null, string perPage = null, string teamId = null)
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (teamId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "team_id", teamId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<IncomingWebhook> >("/hooks/incoming", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksIncomingGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List incoming webhooks Get a page of a list of incoming webhooks. Optionally filter for a specific team using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of hooks per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="teamId">The ID of the team to get hooks for. (optional)</param>
        /// <returns>Task of List&lt;IncomingWebhook&gt;</returns>
        public async System.Threading.Tasks.Task<List<IncomingWebhook>> HooksIncomingGetAsync (string page = null, string perPage = null, string teamId = null)
        {
            ApiResponse<List<IncomingWebhook>> localVarResponse = await HooksIncomingGetAsyncWithHttpInfo(page, perPage, teamId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List incoming webhooks Get a page of a list of incoming webhooks. Optionally filter for a specific team using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of hooks per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="teamId">The ID of the team to get hooks for. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;IncomingWebhook&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<IncomingWebhook>>> HooksIncomingGetAsyncWithHttpInfo (string page = null, string perPage = null, string teamId = null)
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (teamId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "team_id", teamId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<IncomingWebhook>>("/hooks/incoming", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksIncomingGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get an incoming webhook Get an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Incoming Webhook GUID</param>
        /// <returns>IncomingWebhook</returns>
        public IncomingWebhook HooksIncomingHookIdGet (string hookId)
        {
            ApiResponse<IncomingWebhook> localVarResponse = HooksIncomingHookIdGetWithHttpInfo(hookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an incoming webhook Get an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Incoming Webhook GUID</param>
        /// <returns>ApiResponse of IncomingWebhook</returns>
        public ApiResponse<IncomingWebhook> HooksIncomingHookIdGetWithHttpInfo (string hookId)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->HooksIncomingHookIdGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (hookId != null)
                requestOptions.PathParameters.Add("hook_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(hookId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< IncomingWebhook >("/hooks/incoming/{hook_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksIncomingHookIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get an incoming webhook Get an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Incoming Webhook GUID</param>
        /// <returns>Task of IncomingWebhook</returns>
        public async System.Threading.Tasks.Task<IncomingWebhook> HooksIncomingHookIdGetAsync (string hookId)
        {
            ApiResponse<IncomingWebhook> localVarResponse = await HooksIncomingHookIdGetAsyncWithHttpInfo(hookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an incoming webhook Get an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Incoming Webhook GUID</param>
        /// <returns>Task of ApiResponse (IncomingWebhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IncomingWebhook>> HooksIncomingHookIdGetAsyncWithHttpInfo (string hookId)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->HooksIncomingHookIdGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (hookId != null)
                requestOptions.PathParameters.Add("hook_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(hookId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<IncomingWebhook>("/hooks/incoming/{hook_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksIncomingHookIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update an incoming webhook Update an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Incoming Webhook GUID</param>
        /// <param name="body"></param>
        /// <returns>IncomingWebhook</returns>
        public IncomingWebhook HooksIncomingHookIdPut (string hookId, InlineObject50 body)
        {
            ApiResponse<IncomingWebhook> localVarResponse = HooksIncomingHookIdPutWithHttpInfo(hookId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an incoming webhook Update an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Incoming Webhook GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of IncomingWebhook</returns>
        public ApiResponse<IncomingWebhook> HooksIncomingHookIdPutWithHttpInfo (string hookId, InlineObject50 body)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->HooksIncomingHookIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WebhooksApi->HooksIncomingHookIdPut");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (hookId != null)
                requestOptions.PathParameters.Add("hook_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(hookId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< IncomingWebhook >("/hooks/incoming/{hook_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksIncomingHookIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update an incoming webhook Update an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Incoming Webhook GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of IncomingWebhook</returns>
        public async System.Threading.Tasks.Task<IncomingWebhook> HooksIncomingHookIdPutAsync (string hookId, InlineObject50 body)
        {
            ApiResponse<IncomingWebhook> localVarResponse = await HooksIncomingHookIdPutAsyncWithHttpInfo(hookId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an incoming webhook Update an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Incoming Webhook GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (IncomingWebhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IncomingWebhook>> HooksIncomingHookIdPutAsyncWithHttpInfo (string hookId, InlineObject50 body)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->HooksIncomingHookIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WebhooksApi->HooksIncomingHookIdPut");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (hookId != null)
                requestOptions.PathParameters.Add("hook_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(hookId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<IncomingWebhook>("/hooks/incoming/{hook_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksIncomingHookIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create an incoming webhook Create an incoming webhook for a channel. ##### Permissions &#x60;manage_webhooks&#x60; for the channel the webhook is in. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>IncomingWebhook</returns>
        public IncomingWebhook HooksIncomingPost (InlineObject49 body)
        {
            ApiResponse<IncomingWebhook> localVarResponse = HooksIncomingPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an incoming webhook Create an incoming webhook for a channel. ##### Permissions &#x60;manage_webhooks&#x60; for the channel the webhook is in. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of IncomingWebhook</returns>
        public ApiResponse<IncomingWebhook> HooksIncomingPostWithHttpInfo (InlineObject49 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WebhooksApi->HooksIncomingPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< IncomingWebhook >("/hooks/incoming", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksIncomingPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create an incoming webhook Create an incoming webhook for a channel. ##### Permissions &#x60;manage_webhooks&#x60; for the channel the webhook is in. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of IncomingWebhook</returns>
        public async System.Threading.Tasks.Task<IncomingWebhook> HooksIncomingPostAsync (InlineObject49 body)
        {
            ApiResponse<IncomingWebhook> localVarResponse = await HooksIncomingPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an incoming webhook Create an incoming webhook for a channel. ##### Permissions &#x60;manage_webhooks&#x60; for the channel the webhook is in. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (IncomingWebhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IncomingWebhook>> HooksIncomingPostAsyncWithHttpInfo (InlineObject49 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WebhooksApi->HooksIncomingPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<IncomingWebhook>("/hooks/incoming", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksIncomingPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List outgoing webhooks Get a page of a list of outgoing webhooks. Optionally filter for a specific team or channel using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team/channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of hooks per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="teamId">The ID of the team to get hooks for. (optional)</param>
        /// <param name="channelId">The ID of the channel to get hooks for. (optional)</param>
        /// <returns>List&lt;OutgoingWebhook&gt;</returns>
        public List<OutgoingWebhook> HooksOutgoingGet (string page = null, string perPage = null, string teamId = null, string channelId = null)
        {
            ApiResponse<List<OutgoingWebhook>> localVarResponse = HooksOutgoingGetWithHttpInfo(page, perPage, teamId, channelId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List outgoing webhooks Get a page of a list of outgoing webhooks. Optionally filter for a specific team or channel using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team/channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of hooks per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="teamId">The ID of the team to get hooks for. (optional)</param>
        /// <param name="channelId">The ID of the channel to get hooks for. (optional)</param>
        /// <returns>ApiResponse of List&lt;OutgoingWebhook&gt;</returns>
        public ApiResponse<List<OutgoingWebhook>> HooksOutgoingGetWithHttpInfo (string page = null, string perPage = null, string teamId = null, string channelId = null)
        {
            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (teamId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "team_id", teamId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (channelId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "channel_id", channelId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = this.Client.Get< List<OutgoingWebhook> >("/hooks/outgoing", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksOutgoingGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// List outgoing webhooks Get a page of a list of outgoing webhooks. Optionally filter for a specific team or channel using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team/channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of hooks per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="teamId">The ID of the team to get hooks for. (optional)</param>
        /// <param name="channelId">The ID of the channel to get hooks for. (optional)</param>
        /// <returns>Task of List&lt;OutgoingWebhook&gt;</returns>
        public async System.Threading.Tasks.Task<List<OutgoingWebhook>> HooksOutgoingGetAsync (string page = null, string perPage = null, string teamId = null, string channelId = null)
        {
            ApiResponse<List<OutgoingWebhook>> localVarResponse = await HooksOutgoingGetAsyncWithHttpInfo(page, perPage, teamId, channelId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List outgoing webhooks Get a page of a list of outgoing webhooks. Optionally filter for a specific team or channel using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team/channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="page">The page to select. (optional, default to &quot;0&quot;)</param>
        /// <param name="perPage">The number of hooks per page. (optional, default to &quot;60&quot;)</param>
        /// <param name="teamId">The ID of the team to get hooks for. (optional)</param>
        /// <param name="channelId">The ID of the channel to get hooks for. (optional)</param>
        /// <returns>Task of ApiResponse (List&lt;OutgoingWebhook&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<OutgoingWebhook>>> HooksOutgoingGetAsyncWithHttpInfo (string page = null, string perPage = null, string teamId = null, string channelId = null)
        {

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (page != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "page", page))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (perPage != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "per_page", perPage))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (teamId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "team_id", teamId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }
            if (channelId != null)
            {
                foreach (var kvp in Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToMultiMap("", "channel_id", channelId))
                {
                    foreach (var value in kvp.Value)
                    {
                        requestOptions.QueryParameters.Add(kvp.Key, value);
                    }
                }
            }


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<List<OutgoingWebhook>>("/hooks/outgoing", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksOutgoingGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete an outgoing webhook Delete an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>StatusOK</returns>
        public StatusOK HooksOutgoingHookIdDelete (string hookId)
        {
            ApiResponse<StatusOK> localVarResponse = HooksOutgoingHookIdDeleteWithHttpInfo(hookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Delete an outgoing webhook Delete an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> HooksOutgoingHookIdDeleteWithHttpInfo (string hookId)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->HooksOutgoingHookIdDelete");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (hookId != null)
                requestOptions.PathParameters.Add("hook_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(hookId)); // path parameter


            // make the HTTP request

            var response = this.Client.Delete< StatusOK >("/hooks/outgoing/{hook_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksOutgoingHookIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Delete an outgoing webhook Delete an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> HooksOutgoingHookIdDeleteAsync (string hookId)
        {
            ApiResponse<StatusOK> localVarResponse = await HooksOutgoingHookIdDeleteAsyncWithHttpInfo(hookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Delete an outgoing webhook Delete an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> HooksOutgoingHookIdDeleteAsyncWithHttpInfo (string hookId)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->HooksOutgoingHookIdDelete");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (hookId != null)
                requestOptions.PathParameters.Add("hook_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(hookId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.DeleteAsync<StatusOK>("/hooks/outgoing/{hook_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksOutgoingHookIdDelete", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get an outgoing webhook Get an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>OutgoingWebhook</returns>
        public OutgoingWebhook HooksOutgoingHookIdGet (string hookId)
        {
            ApiResponse<OutgoingWebhook> localVarResponse = HooksOutgoingHookIdGetWithHttpInfo(hookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get an outgoing webhook Get an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>ApiResponse of OutgoingWebhook</returns>
        public ApiResponse<OutgoingWebhook> HooksOutgoingHookIdGetWithHttpInfo (string hookId)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->HooksOutgoingHookIdGet");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (hookId != null)
                requestOptions.PathParameters.Add("hook_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(hookId)); // path parameter


            // make the HTTP request

            var response = this.Client.Get< OutgoingWebhook >("/hooks/outgoing/{hook_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksOutgoingHookIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Get an outgoing webhook Get an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>Task of OutgoingWebhook</returns>
        public async System.Threading.Tasks.Task<OutgoingWebhook> HooksOutgoingHookIdGetAsync (string hookId)
        {
            ApiResponse<OutgoingWebhook> localVarResponse = await HooksOutgoingHookIdGetAsyncWithHttpInfo(hookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get an outgoing webhook Get an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>Task of ApiResponse (OutgoingWebhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutgoingWebhook>> HooksOutgoingHookIdGetAsyncWithHttpInfo (string hookId)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->HooksOutgoingHookIdGet");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (hookId != null)
                requestOptions.PathParameters.Add("hook_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(hookId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.GetAsync<OutgoingWebhook>("/hooks/outgoing/{hook_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksOutgoingHookIdGet", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update an outgoing webhook Update an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">outgoing Webhook GUID</param>
        /// <param name="body"></param>
        /// <returns>OutgoingWebhook</returns>
        public OutgoingWebhook HooksOutgoingHookIdPut (string hookId, InlineObject52 body)
        {
            ApiResponse<OutgoingWebhook> localVarResponse = HooksOutgoingHookIdPutWithHttpInfo(hookId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update an outgoing webhook Update an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">outgoing Webhook GUID</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of OutgoingWebhook</returns>
        public ApiResponse<OutgoingWebhook> HooksOutgoingHookIdPutWithHttpInfo (string hookId, InlineObject52 body)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->HooksOutgoingHookIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WebhooksApi->HooksOutgoingHookIdPut");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (hookId != null)
                requestOptions.PathParameters.Add("hook_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(hookId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Put< OutgoingWebhook >("/hooks/outgoing/{hook_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksOutgoingHookIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Update an outgoing webhook Update an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">outgoing Webhook GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of OutgoingWebhook</returns>
        public async System.Threading.Tasks.Task<OutgoingWebhook> HooksOutgoingHookIdPutAsync (string hookId, InlineObject52 body)
        {
            ApiResponse<OutgoingWebhook> localVarResponse = await HooksOutgoingHookIdPutAsyncWithHttpInfo(hookId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update an outgoing webhook Update an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">outgoing Webhook GUID</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (OutgoingWebhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutgoingWebhook>> HooksOutgoingHookIdPutAsyncWithHttpInfo (string hookId, InlineObject52 body)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->HooksOutgoingHookIdPut");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WebhooksApi->HooksOutgoingHookIdPut");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (hookId != null)
                requestOptions.PathParameters.Add("hook_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(hookId)); // path parameter
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PutAsync<OutgoingWebhook>("/hooks/outgoing/{hook_id}", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksOutgoingHookIdPut", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Regenerate the token for the outgoing webhook. Regenerate the token for the outgoing webhook. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>StatusOK</returns>
        public StatusOK HooksOutgoingHookIdRegenTokenPost (string hookId)
        {
            ApiResponse<StatusOK> localVarResponse = HooksOutgoingHookIdRegenTokenPostWithHttpInfo(hookId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Regenerate the token for the outgoing webhook. Regenerate the token for the outgoing webhook. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>ApiResponse of StatusOK</returns>
        public ApiResponse<StatusOK> HooksOutgoingHookIdRegenTokenPostWithHttpInfo (string hookId)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->HooksOutgoingHookIdRegenTokenPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (hookId != null)
                requestOptions.PathParameters.Add("hook_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(hookId)); // path parameter


            // make the HTTP request

            var response = this.Client.Post< StatusOK >("/hooks/outgoing/{hook_id}/regen_token", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksOutgoingHookIdRegenTokenPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Regenerate the token for the outgoing webhook. Regenerate the token for the outgoing webhook. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>Task of StatusOK</returns>
        public async System.Threading.Tasks.Task<StatusOK> HooksOutgoingHookIdRegenTokenPostAsync (string hookId)
        {
            ApiResponse<StatusOK> localVarResponse = await HooksOutgoingHookIdRegenTokenPostAsyncWithHttpInfo(hookId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Regenerate the token for the outgoing webhook. Regenerate the token for the outgoing webhook. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="hookId">Outgoing webhook GUID</param>
        /// <returns>Task of ApiResponse (StatusOK)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StatusOK>> HooksOutgoingHookIdRegenTokenPostAsyncWithHttpInfo (string hookId)
        {
            // verify the required parameter 'hookId' is set
            if (hookId == null)
                throw new ApiException(400, "Missing required parameter 'hookId' when calling WebhooksApi->HooksOutgoingHookIdRegenTokenPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            if (hookId != null)
                requestOptions.PathParameters.Add("hook_id", Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.ParameterToString(hookId)); // path parameter


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<StatusOK>("/hooks/outgoing/{hook_id}/regen_token", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksOutgoingHookIdRegenTokenPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create an outgoing webhook Create an outgoing webhook for a team. ##### Permissions &#x60;manage_webhooks&#x60; for the team the webhook is in. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>OutgoingWebhook</returns>
        public OutgoingWebhook HooksOutgoingPost (InlineObject51 body)
        {
            ApiResponse<OutgoingWebhook> localVarResponse = HooksOutgoingPostWithHttpInfo(body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create an outgoing webhook Create an outgoing webhook for a team. ##### Permissions &#x60;manage_webhooks&#x60; for the team the webhook is in. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>ApiResponse of OutgoingWebhook</returns>
        public ApiResponse<OutgoingWebhook> HooksOutgoingPostWithHttpInfo (InlineObject51 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WebhooksApi->HooksOutgoingPost");

            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderContentType(@contentTypes);
            if (localVarContentType != null) requestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Sdcb.Mattermost.DotNetSdk.Client.ClientUtils.SelectHeaderAccept(@accepts);
            if (localVarAccept != null) requestOptions.HeaderParameters.Add("Accept", localVarAccept);

            requestOptions.Data = body;


            // make the HTTP request

            var response = this.Client.Post< OutgoingWebhook >("/hooks/outgoing", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksOutgoingPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

        /// <summary>
        /// Create an outgoing webhook Create an outgoing webhook for a team. ##### Permissions &#x60;manage_webhooks&#x60; for the team the webhook is in. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of OutgoingWebhook</returns>
        public async System.Threading.Tasks.Task<OutgoingWebhook> HooksOutgoingPostAsync (InlineObject51 body)
        {
            ApiResponse<OutgoingWebhook> localVarResponse = await HooksOutgoingPostAsyncWithHttpInfo(body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create an outgoing webhook Create an outgoing webhook for a team. ##### Permissions &#x60;manage_webhooks&#x60; for the team the webhook is in. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (OutgoingWebhook)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OutgoingWebhook>> HooksOutgoingPostAsyncWithHttpInfo (InlineObject51 body)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling WebhooksApi->HooksOutgoingPost");


            var requestOptions = new RequestOptions();

            string[] @contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] @accepts = new string[] {
                "application/json"
            };
            
            foreach (var contentType in @contentTypes)
                requestOptions.HeaderParameters.Add("Content-Type", contentType);
            
            foreach (var accept in @accepts)
                requestOptions.HeaderParameters.Add("Accept", accept);
            
            requestOptions.Data = body;


            // make the HTTP request

            var response = await this.AsynchronousClient.PostAsync<OutgoingWebhook>("/hooks/outgoing", requestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception exception = this.ExceptionFactory("HooksOutgoingPost", response);
                if (exception != null) throw exception;
            }

            return response;
        }

    }
}
