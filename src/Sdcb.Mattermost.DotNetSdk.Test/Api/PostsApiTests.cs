/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Api;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Test
{
    /// <summary>
    ///  Class for testing PostsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class PostsApiTests : IDisposable
    {
        private PostsApi instance;

        public PostsApiTests()
        {
            instance = new PostsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of PostsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' PostsApi
            //Assert.IsType(typeof(PostsApi), instance, "instance is a PostsApi");
        }

        
        /// <summary>
        /// Test ChannelsChannelIdPostsGet
        /// </summary>
        [Fact]
        public void ChannelsChannelIdPostsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string channelId = null;
            //string page = null;
            //string perPage = null;
            //int? since = null;
            //string before = null;
            //string after = null;
            //var response = instance.ChannelsChannelIdPostsGet(channelId, page, perPage, since, before, after);
            //Assert.IsType<PostList> (response, "response is PostList");
        }
        
        /// <summary>
        /// Test PostsEphemeralPost
        /// </summary>
        [Fact]
        public void PostsEphemeralPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject42 ephemeralPost = null;
            //var response = instance.PostsEphemeralPost(ephemeralPost);
            //Assert.IsType<Post> (response, "response is Post");
        }
        
        /// <summary>
        /// Test PostsPost
        /// </summary>
        [Fact]
        public void PostsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject41 post = null;
            //var response = instance.PostsPost(post);
            //Assert.IsType<Post> (response, "response is Post");
        }
        
        /// <summary>
        /// Test PostsPostIdActionsActionIdPost
        /// </summary>
        [Fact]
        public void PostsPostIdActionsActionIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string postId = null;
            //string actionId = null;
            //var response = instance.PostsPostIdActionsActionIdPost(postId, actionId);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test PostsPostIdDelete
        /// </summary>
        [Fact]
        public void PostsPostIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string postId = null;
            //var response = instance.PostsPostIdDelete(postId);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test PostsPostIdFilesInfoGet
        /// </summary>
        [Fact]
        public void PostsPostIdFilesInfoGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string postId = null;
            //var response = instance.PostsPostIdFilesInfoGet(postId);
            //Assert.IsType<List<FileInfo>> (response, "response is List<FileInfo>");
        }
        
        /// <summary>
        /// Test PostsPostIdGet
        /// </summary>
        [Fact]
        public void PostsPostIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string postId = null;
            //var response = instance.PostsPostIdGet(postId);
            //Assert.IsType<Post> (response, "response is Post");
        }
        
        /// <summary>
        /// Test PostsPostIdPatchPut
        /// </summary>
        [Fact]
        public void PostsPostIdPatchPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string postId = null;
            //InlineObject44 body = null;
            //var response = instance.PostsPostIdPatchPut(postId, body);
            //Assert.IsType<Post> (response, "response is Post");
        }
        
        /// <summary>
        /// Test PostsPostIdPinPost
        /// </summary>
        [Fact]
        public void PostsPostIdPinPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string postId = null;
            //var response = instance.PostsPostIdPinPost(postId);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test PostsPostIdPut
        /// </summary>
        [Fact]
        public void PostsPostIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string postId = null;
            //InlineObject43 body = null;
            //var response = instance.PostsPostIdPut(postId, body);
            //Assert.IsType<Post> (response, "response is Post");
        }
        
        /// <summary>
        /// Test PostsPostIdThreadGet
        /// </summary>
        [Fact]
        public void PostsPostIdThreadGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string postId = null;
            //var response = instance.PostsPostIdThreadGet(postId);
            //Assert.IsType<PostList> (response, "response is PostList");
        }
        
        /// <summary>
        /// Test PostsPostIdUnpinPost
        /// </summary>
        [Fact]
        public void PostsPostIdUnpinPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string postId = null;
            //var response = instance.PostsPostIdUnpinPost(postId);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test TeamsTeamIdPostsSearchPost
        /// </summary>
        [Fact]
        public void TeamsTeamIdPostsSearchPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamId = null;
            //InlineObject45 body = null;
            //var response = instance.TeamsTeamIdPostsSearchPost(teamId, body);
            //Assert.IsType<PostListWithSearchMatches> (response, "response is PostListWithSearchMatches");
        }
        
        /// <summary>
        /// Test UsersUserIdChannelsChannelIdPostsUnreadGet
        /// </summary>
        [Fact]
        public void UsersUserIdChannelsChannelIdPostsUnreadGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string channelId = null;
            //string limitBefore = null;
            //string limitAfter = null;
            //var response = instance.UsersUserIdChannelsChannelIdPostsUnreadGet(userId, channelId, limitBefore, limitAfter);
            //Assert.IsType<PostList> (response, "response is PostList");
        }
        
        /// <summary>
        /// Test UsersUserIdPostsFlaggedGet
        /// </summary>
        [Fact]
        public void UsersUserIdPostsFlaggedGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string teamId = null;
            //string channelId = null;
            //string page = null;
            //string perPage = null;
            //var response = instance.UsersUserIdPostsFlaggedGet(userId, teamId, channelId, page, perPage);
            //Assert.IsType<List<PostList>> (response, "response is List<PostList>");
        }
        
    }

}
