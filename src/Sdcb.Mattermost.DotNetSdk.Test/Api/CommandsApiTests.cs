/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Api;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Test
{
    /// <summary>
    ///  Class for testing CommandsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class CommandsApiTests : IDisposable
    {
        private CommandsApi instance;

        public CommandsApiTests()
        {
            instance = new CommandsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of CommandsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' CommandsApi
            //Assert.IsType(typeof(CommandsApi), instance, "instance is a CommandsApi");
        }

        
        /// <summary>
        /// Test CommandsCommandIdDelete
        /// </summary>
        [Fact]
        public void CommandsCommandIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string commandId = null;
            //var response = instance.CommandsCommandIdDelete(commandId);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test CommandsCommandIdPut
        /// </summary>
        [Fact]
        public void CommandsCommandIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string commandId = null;
            //Command body = null;
            //var response = instance.CommandsCommandIdPut(commandId, body);
            //Assert.IsType<Command> (response, "response is Command");
        }
        
        /// <summary>
        /// Test CommandsCommandIdRegenTokenPut
        /// </summary>
        [Fact]
        public void CommandsCommandIdRegenTokenPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string commandId = null;
            //var response = instance.CommandsCommandIdRegenTokenPut(commandId);
            //Assert.IsType<InlineResponse2008> (response, "response is InlineResponse2008");
        }
        
        /// <summary>
        /// Test CommandsExecutePost
        /// </summary>
        [Fact]
        public void CommandsExecutePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject54 body = null;
            //var response = instance.CommandsExecutePost(body);
            //Assert.IsType<CommandResponse> (response, "response is CommandResponse");
        }
        
        /// <summary>
        /// Test CommandsGet
        /// </summary>
        [Fact]
        public void CommandsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamId = null;
            //string customOnly = null;
            //var response = instance.CommandsGet(teamId, customOnly);
            //Assert.IsType<List<Command>> (response, "response is List<Command>");
        }
        
        /// <summary>
        /// Test CommandsPost
        /// </summary>
        [Fact]
        public void CommandsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject53 body = null;
            //var response = instance.CommandsPost(body);
            //Assert.IsType<Command> (response, "response is Command");
        }
        
        /// <summary>
        /// Test TeamsTeamIdCommandsAutocompleteGet
        /// </summary>
        [Fact]
        public void TeamsTeamIdCommandsAutocompleteGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string teamId = null;
            //var response = instance.TeamsTeamIdCommandsAutocompleteGet(teamId);
            //Assert.IsType<List<Command>> (response, "response is List<Command>");
        }
        
    }

}
