/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Api;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Test
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UsersApiTests : IDisposable
    {
        private UsersApi instance;

        public UsersApiTests()
        {
            instance = new UsersApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersApi
            //Assert.IsType(typeof(UsersApi), instance, "instance is a UsersApi");
        }

        
        /// <summary>
        /// Test UsersAutocompleteGet
        /// </summary>
        [Fact]
        public void UsersAutocompleteGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string teamId = null;
            //string channelId = null;
            //int? limit = null;
            //var response = instance.UsersAutocompleteGet(name, teamId, channelId, limit);
            //Assert.IsType<UserAutocomplete> (response, "response is UserAutocomplete");
        }
        
        /// <summary>
        /// Test UsersEmailEmailGet
        /// </summary>
        [Fact]
        public void UsersEmailEmailGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string email = null;
            //var response = instance.UsersEmailEmailGet(email);
            //Assert.IsType<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test UsersEmailVerifyPost
        /// </summary>
        [Fact]
        public void UsersEmailVerifyPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject13 body = null;
            //var response = instance.UsersEmailVerifyPost(body);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersEmailVerifySendPost
        /// </summary>
        [Fact]
        public void UsersEmailVerifySendPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject14 body = null;
            //var response = instance.UsersEmailVerifySendPost(body);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersGet
        /// </summary>
        [Fact]
        public void UsersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string page = null;
            //string perPage = null;
            //string inTeam = null;
            //string notInTeam = null;
            //string inChannel = null;
            //string notInChannel = null;
            //bool? groupConstrained = null;
            //bool? withoutTeam = null;
            //string sort = null;
            //var response = instance.UsersGet(page, perPage, inTeam, notInTeam, inChannel, notInChannel, groupConstrained, withoutTeam, sort);
            //Assert.IsType<List<User>> (response, "response is List<User>");
        }
        
        /// <summary>
        /// Test UsersGroupChannelsPost
        /// </summary>
        [Fact]
        public void UsersGroupChannelsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //var response = instance.UsersGroupChannelsPost(body);
            //Assert.IsType<InlineResponse200> (response, "response is InlineResponse200");
        }
        
        /// <summary>
        /// Test UsersIdsPost
        /// </summary>
        [Fact]
        public void UsersIdsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //int? since = null;
            //var response = instance.UsersIdsPost(body, since);
            //Assert.IsType<List<User>> (response, "response is List<User>");
        }
        
        /// <summary>
        /// Test UsersLoginSwitchPost
        /// </summary>
        [Fact]
        public void UsersLoginSwitchPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject15 body = null;
            //var response = instance.UsersLoginSwitchPost(body);
            //Assert.IsType<InlineResponse2003> (response, "response is InlineResponse2003");
        }
        
        /// <summary>
        /// Test UsersMfaPost
        /// </summary>
        [Fact]
        public void UsersMfaPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject8 body = null;
            //var response = instance.UsersMfaPost(body);
            //Assert.IsType<InlineResponse2002> (response, "response is InlineResponse2002");
        }
        
        /// <summary>
        /// Test UsersPasswordResetPost
        /// </summary>
        [Fact]
        public void UsersPasswordResetPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject6 body = null;
            //var response = instance.UsersPasswordResetPost(body);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersPasswordResetSendPost
        /// </summary>
        [Fact]
        public void UsersPasswordResetSendPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject10 body = null;
            //var response = instance.UsersPasswordResetSendPost(body);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersPost
        /// </summary>
        [Fact]
        public void UsersPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject body = null;
            //string t = null;
            //string iid = null;
            //var response = instance.UsersPost(body, t, iid);
            //Assert.IsType<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test UsersSearchPost
        /// </summary>
        [Fact]
        public void UsersSearchPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject1 body = null;
            //var response = instance.UsersSearchPost(body);
            //Assert.IsType<List<User>> (response, "response is List<User>");
        }
        
        /// <summary>
        /// Test UsersSessionsDevicePut
        /// </summary>
        [Fact]
        public void UsersSessionsDevicePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject12 body = null;
            //var response = instance.UsersSessionsDevicePut(body);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersStatsGet
        /// </summary>
        [Fact]
        public void UsersStatsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UsersStatsGet();
            //Assert.IsType<UsersStats> (response, "response is UsersStats");
        }
        
        /// <summary>
        /// Test UsersTokensDisablePost
        /// </summary>
        [Fact]
        public void UsersTokensDisablePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject18 tokenId = null;
            //var response = instance.UsersTokensDisablePost(tokenId);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersTokensEnablePost
        /// </summary>
        [Fact]
        public void UsersTokensEnablePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject19 tokenId = null;
            //var response = instance.UsersTokensEnablePost(tokenId);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersTokensGet
        /// </summary>
        [Fact]
        public void UsersTokensGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string page = null;
            //string perPage = null;
            //var response = instance.UsersTokensGet(page, perPage);
            //Assert.IsType<List<UserAccessTokenSanitized>> (response, "response is List<UserAccessTokenSanitized>");
        }
        
        /// <summary>
        /// Test UsersTokensRevokePost
        /// </summary>
        [Fact]
        public void UsersTokensRevokePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject17 tokenId = null;
            //var response = instance.UsersTokensRevokePost(tokenId);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersTokensSearchPost
        /// </summary>
        [Fact]
        public void UsersTokensSearchPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject20 body = null;
            //var response = instance.UsersTokensSearchPost(body);
            //Assert.IsType<List<UserAccessTokenSanitized>> (response, "response is List<UserAccessTokenSanitized>");
        }
        
        /// <summary>
        /// Test UsersTokensTokenIdGet
        /// </summary>
        [Fact]
        public void UsersTokensTokenIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string tokenId = null;
            //var response = instance.UsersTokensTokenIdGet(tokenId);
            //Assert.IsType<UserAccessTokenSanitized> (response, "response is UserAccessTokenSanitized");
        }
        
        /// <summary>
        /// Test UsersUserIdActivePut
        /// </summary>
        [Fact]
        public void UsersUserIdActivePutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //InlineObject5 body = null;
            //var response = instance.UsersUserIdActivePut(userId, body);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersUserIdAuditsGet
        /// </summary>
        [Fact]
        public void UsersUserIdAuditsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.UsersUserIdAuditsGet(userId);
            //Assert.IsType<List<Audit>> (response, "response is List<Audit>");
        }
        
        /// <summary>
        /// Test UsersUserIdAuthPut
        /// </summary>
        [Fact]
        public void UsersUserIdAuthPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //UserAuthData body = null;
            //var response = instance.UsersUserIdAuthPut(userId, body);
            //Assert.IsType<UserAuthData> (response, "response is UserAuthData");
        }
        
        /// <summary>
        /// Test UsersUserIdDelete
        /// </summary>
        [Fact]
        public void UsersUserIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.UsersUserIdDelete(userId);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersUserIdGet
        /// </summary>
        [Fact]
        public void UsersUserIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.UsersUserIdGet(userId);
            //Assert.IsType<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test UsersUserIdImageDefaultGet
        /// </summary>
        [Fact]
        public void UsersUserIdImageDefaultGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //instance.UsersUserIdImageDefaultGet(userId);
            
        }
        
        /// <summary>
        /// Test UsersUserIdImageDelete
        /// </summary>
        [Fact]
        public void UsersUserIdImageDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.UsersUserIdImageDelete(userId);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersUserIdImageGet
        /// </summary>
        [Fact]
        public void UsersUserIdImageGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //instance.UsersUserIdImageGet(userId);
            
        }
        
        /// <summary>
        /// Test UsersUserIdImagePost
        /// </summary>
        [Fact]
        public void UsersUserIdImagePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //System.IO.Stream image = null;
            //var response = instance.UsersUserIdImagePost(userId, image);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersUserIdMfaGeneratePost
        /// </summary>
        [Fact]
        public void UsersUserIdMfaGeneratePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.UsersUserIdMfaGeneratePost(userId);
            //Assert.IsType<InlineResponse2001> (response, "response is InlineResponse2001");
        }
        
        /// <summary>
        /// Test UsersUserIdMfaPut
        /// </summary>
        [Fact]
        public void UsersUserIdMfaPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //InlineObject7 body = null;
            //var response = instance.UsersUserIdMfaPut(userId, body);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersUserIdPasswordPut
        /// </summary>
        [Fact]
        public void UsersUserIdPasswordPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //InlineObject9 body = null;
            //var response = instance.UsersUserIdPasswordPut(userId, body);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersUserIdPatchPut
        /// </summary>
        [Fact]
        public void UsersUserIdPatchPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //InlineObject3 body = null;
            //var response = instance.UsersUserIdPatchPut(userId, body);
            //Assert.IsType<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test UsersUserIdPut
        /// </summary>
        [Fact]
        public void UsersUserIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //InlineObject2 body = null;
            //var response = instance.UsersUserIdPut(userId, body);
            //Assert.IsType<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test UsersUserIdRolesPut
        /// </summary>
        [Fact]
        public void UsersUserIdRolesPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //InlineObject4 roles = null;
            //var response = instance.UsersUserIdRolesPut(userId, roles);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersUserIdSessionsGet
        /// </summary>
        [Fact]
        public void UsersUserIdSessionsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.UsersUserIdSessionsGet(userId);
            //Assert.IsType<List<Session>> (response, "response is List<Session>");
        }
        
        /// <summary>
        /// Test UsersUserIdSessionsRevokeAllPost
        /// </summary>
        [Fact]
        public void UsersUserIdSessionsRevokeAllPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.UsersUserIdSessionsRevokeAllPost(userId);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersUserIdSessionsRevokePost
        /// </summary>
        [Fact]
        public void UsersUserIdSessionsRevokePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //InlineObject11 body = null;
            //var response = instance.UsersUserIdSessionsRevokePost(userId, body);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersUserIdTermsOfServiceGet
        /// </summary>
        [Fact]
        public void UsersUserIdTermsOfServiceGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //var response = instance.UsersUserIdTermsOfServiceGet(userId);
            //Assert.IsType<UserTermsOfService> (response, "response is UserTermsOfService");
        }
        
        /// <summary>
        /// Test UsersUserIdTermsOfServicePost
        /// </summary>
        [Fact]
        public void UsersUserIdTermsOfServicePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //InlineObject21 body = null;
            //var response = instance.UsersUserIdTermsOfServicePost(userId, body);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test UsersUserIdTokensGet
        /// </summary>
        [Fact]
        public void UsersUserIdTokensGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string page = null;
            //string perPage = null;
            //var response = instance.UsersUserIdTokensGet(userId, page, perPage);
            //Assert.IsType<List<UserAccessTokenSanitized>> (response, "response is List<UserAccessTokenSanitized>");
        }
        
        /// <summary>
        /// Test UsersUserIdTokensPost
        /// </summary>
        [Fact]
        public void UsersUserIdTokensPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //InlineObject16 token = null;
            //var response = instance.UsersUserIdTokensPost(userId, token);
            //Assert.IsType<UserAccessToken> (response, "response is UserAccessToken");
        }
        
        /// <summary>
        /// Test UsersUsernameUsernameGet
        /// </summary>
        [Fact]
        public void UsersUsernameUsernameGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string username = null;
            //var response = instance.UsersUsernameUsernameGet(username);
            //Assert.IsType<User> (response, "response is User");
        }
        
        /// <summary>
        /// Test UsersUsernamesPost
        /// </summary>
        [Fact]
        public void UsersUsernamesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> body = null;
            //var response = instance.UsersUsernamesPost(body);
            //Assert.IsType<List<User>> (response, "response is List<User>");
        }
        
    }

}
