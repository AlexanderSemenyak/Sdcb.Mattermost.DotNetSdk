/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Api;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Test
{
    /// <summary>
    ///  Class for testing WebhooksApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class WebhooksApiTests : IDisposable
    {
        private WebhooksApi instance;

        public WebhooksApiTests()
        {
            instance = new WebhooksApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of WebhooksApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' WebhooksApi
            //Assert.IsType(typeof(WebhooksApi), instance, "instance is a WebhooksApi");
        }

        
        /// <summary>
        /// Test HooksIncomingGet
        /// </summary>
        [Fact]
        public void HooksIncomingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string page = null;
            //string perPage = null;
            //string teamId = null;
            //var response = instance.HooksIncomingGet(page, perPage, teamId);
            //Assert.IsType<List<IncomingWebhook>> (response, "response is List<IncomingWebhook>");
        }
        
        /// <summary>
        /// Test HooksIncomingHookIdGet
        /// </summary>
        [Fact]
        public void HooksIncomingHookIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string hookId = null;
            //var response = instance.HooksIncomingHookIdGet(hookId);
            //Assert.IsType<IncomingWebhook> (response, "response is IncomingWebhook");
        }
        
        /// <summary>
        /// Test HooksIncomingHookIdPut
        /// </summary>
        [Fact]
        public void HooksIncomingHookIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string hookId = null;
            //InlineObject50 body = null;
            //var response = instance.HooksIncomingHookIdPut(hookId, body);
            //Assert.IsType<IncomingWebhook> (response, "response is IncomingWebhook");
        }
        
        /// <summary>
        /// Test HooksIncomingPost
        /// </summary>
        [Fact]
        public void HooksIncomingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject49 body = null;
            //var response = instance.HooksIncomingPost(body);
            //Assert.IsType<IncomingWebhook> (response, "response is IncomingWebhook");
        }
        
        /// <summary>
        /// Test HooksOutgoingGet
        /// </summary>
        [Fact]
        public void HooksOutgoingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string page = null;
            //string perPage = null;
            //string teamId = null;
            //string channelId = null;
            //var response = instance.HooksOutgoingGet(page, perPage, teamId, channelId);
            //Assert.IsType<List<OutgoingWebhook>> (response, "response is List<OutgoingWebhook>");
        }
        
        /// <summary>
        /// Test HooksOutgoingHookIdDelete
        /// </summary>
        [Fact]
        public void HooksOutgoingHookIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string hookId = null;
            //var response = instance.HooksOutgoingHookIdDelete(hookId);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test HooksOutgoingHookIdGet
        /// </summary>
        [Fact]
        public void HooksOutgoingHookIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string hookId = null;
            //var response = instance.HooksOutgoingHookIdGet(hookId);
            //Assert.IsType<OutgoingWebhook> (response, "response is OutgoingWebhook");
        }
        
        /// <summary>
        /// Test HooksOutgoingHookIdPut
        /// </summary>
        [Fact]
        public void HooksOutgoingHookIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string hookId = null;
            //InlineObject52 body = null;
            //var response = instance.HooksOutgoingHookIdPut(hookId, body);
            //Assert.IsType<OutgoingWebhook> (response, "response is OutgoingWebhook");
        }
        
        /// <summary>
        /// Test HooksOutgoingHookIdRegenTokenPost
        /// </summary>
        [Fact]
        public void HooksOutgoingHookIdRegenTokenPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string hookId = null;
            //var response = instance.HooksOutgoingHookIdRegenTokenPost(hookId);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test HooksOutgoingPost
        /// </summary>
        [Fact]
        public void HooksOutgoingPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject51 body = null;
            //var response = instance.HooksOutgoingPost(body);
            //Assert.IsType<OutgoingWebhook> (response, "response is OutgoingWebhook");
        }
        
    }

}
