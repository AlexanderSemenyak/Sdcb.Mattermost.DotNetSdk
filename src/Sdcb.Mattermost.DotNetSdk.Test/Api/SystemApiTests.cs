/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Api;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Test
{
    /// <summary>
    ///  Class for testing SystemApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class SystemApiTests : IDisposable
    {
        private SystemApi instance;

        public SystemApiTests()
        {
            instance = new SystemApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of SystemApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' SystemApi
            //Assert.IsType(typeof(SystemApi), instance, "instance is a SystemApi");
        }

        
        /// <summary>
        /// Test AnalyticsOldGet
        /// </summary>
        [Fact]
        public void AnalyticsOldGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string teamId = null;
            //instance.AnalyticsOldGet(name, teamId);
            
        }
        
        /// <summary>
        /// Test AuditsGet
        /// </summary>
        [Fact]
        public void AuditsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string page = null;
            //string perPage = null;
            //var response = instance.AuditsGet(page, perPage);
            //Assert.IsType<List<Audit>> (response, "response is List<Audit>");
        }
        
        /// <summary>
        /// Test CachesInvalidatePost
        /// </summary>
        [Fact]
        public void CachesInvalidatePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.CachesInvalidatePost();
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test ConfigClientGet
        /// </summary>
        [Fact]
        public void ConfigClientGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string format = null;
            //instance.ConfigClientGet(format);
            
        }
        
        /// <summary>
        /// Test ConfigEnvironmentGet
        /// </summary>
        [Fact]
        public void ConfigEnvironmentGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ConfigEnvironmentGet();
            //Assert.IsType<EnvironmentConfig> (response, "response is EnvironmentConfig");
        }
        
        /// <summary>
        /// Test ConfigGet
        /// </summary>
        [Fact]
        public void ConfigGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ConfigGet();
            //Assert.IsType<Config> (response, "response is Config");
        }
        
        /// <summary>
        /// Test ConfigPut
        /// </summary>
        [Fact]
        public void ConfigPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Config body = null;
            //var response = instance.ConfigPut(body);
            //Assert.IsType<Config> (response, "response is Config");
        }
        
        /// <summary>
        /// Test ConfigReloadPost
        /// </summary>
        [Fact]
        public void ConfigReloadPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ConfigReloadPost();
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test DatabaseRecyclePost
        /// </summary>
        [Fact]
        public void DatabaseRecyclePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DatabaseRecyclePost();
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test EmailTestPost
        /// </summary>
        [Fact]
        public void EmailTestPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Config body = null;
            //var response = instance.EmailTestPost(body);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test FileS3TestPost
        /// </summary>
        [Fact]
        public void FileS3TestPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Config body = null;
            //var response = instance.FileS3TestPost(body);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test LicenseClientGet
        /// </summary>
        [Fact]
        public void LicenseClientGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string format = null;
            //instance.LicenseClientGet(format);
            
        }
        
        /// <summary>
        /// Test LicenseDelete
        /// </summary>
        [Fact]
        public void LicenseDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.LicenseDelete();
            
        }
        
        /// <summary>
        /// Test LicensePost
        /// </summary>
        [Fact]
        public void LicensePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //System.IO.Stream license = null;
            //var response = instance.LicensePost(license);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test LogsGet
        /// </summary>
        [Fact]
        public void LogsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string page = null;
            //string logsPerPage = null;
            //var response = instance.LogsGet(page, logsPerPage);
            //Assert.IsType<List<string>> (response, "response is List<string>");
        }
        
        /// <summary>
        /// Test LogsPost
        /// </summary>
        [Fact]
        public void LogsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject47 body = null;
            //var response = instance.LogsPost(body);
            //Assert.IsType<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test SystemPingGet
        /// </summary>
        [Fact]
        public void SystemPingGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.SystemPingGet();
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
    }

}
