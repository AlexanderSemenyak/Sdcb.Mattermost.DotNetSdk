/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Api;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Test
{
    /// <summary>
    ///  Class for testing OAuthApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class OAuthApiTests : IDisposable
    {
        private OAuthApi instance;

        public OAuthApiTests()
        {
            instance = new OAuthApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of OAuthApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' OAuthApi
            //Assert.IsType(typeof(OAuthApi), instance, "instance is a OAuthApi");
        }

        
        /// <summary>
        /// Test OauthAppsAppIdDelete
        /// </summary>
        [Fact]
        public void OauthAppsAppIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //var response = instance.OauthAppsAppIdDelete(appId);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test OauthAppsAppIdGet
        /// </summary>
        [Fact]
        public void OauthAppsAppIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //var response = instance.OauthAppsAppIdGet(appId);
            //Assert.IsType<OAuthApp> (response, "response is OAuthApp");
        }
        
        /// <summary>
        /// Test OauthAppsAppIdInfoGet
        /// </summary>
        [Fact]
        public void OauthAppsAppIdInfoGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //var response = instance.OauthAppsAppIdInfoGet(appId);
            //Assert.IsType<OAuthApp> (response, "response is OAuthApp");
        }
        
        /// <summary>
        /// Test OauthAppsAppIdPut
        /// </summary>
        [Fact]
        public void OauthAppsAppIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //InlineObject56 body = null;
            //var response = instance.OauthAppsAppIdPut(appId, body);
            //Assert.IsType<OAuthApp> (response, "response is OAuthApp");
        }
        
        /// <summary>
        /// Test OauthAppsAppIdRegenSecretPost
        /// </summary>
        [Fact]
        public void OauthAppsAppIdRegenSecretPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string appId = null;
            //var response = instance.OauthAppsAppIdRegenSecretPost(appId);
            //Assert.IsType<OAuthApp> (response, "response is OAuthApp");
        }
        
        /// <summary>
        /// Test OauthAppsGet
        /// </summary>
        [Fact]
        public void OauthAppsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string page = null;
            //string perPage = null;
            //var response = instance.OauthAppsGet(page, perPage);
            //Assert.IsType<List<OAuthApp>> (response, "response is List<OAuthApp>");
        }
        
        /// <summary>
        /// Test OauthAppsPost
        /// </summary>
        [Fact]
        public void OauthAppsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject55 body = null;
            //var response = instance.OauthAppsPost(body);
            //Assert.IsType<OAuthApp> (response, "response is OAuthApp");
        }
        
        /// <summary>
        /// Test UsersUserIdOauthAppsAuthorizedGet
        /// </summary>
        [Fact]
        public void UsersUserIdOauthAppsAuthorizedGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string page = null;
            //string perPage = null;
            //var response = instance.UsersUserIdOauthAppsAuthorizedGet(userId, page, perPage);
            //Assert.IsType<List<OAuthApp>> (response, "response is List<OAuthApp>");
        }
        
    }

}
