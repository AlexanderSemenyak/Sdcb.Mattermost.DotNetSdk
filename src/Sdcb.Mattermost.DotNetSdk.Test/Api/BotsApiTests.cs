/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using Xunit;

using Sdcb.Mattermost.DotNetSdk.Client;
using Sdcb.Mattermost.DotNetSdk.Api;
using Sdcb.Mattermost.DotNetSdk.Model;

namespace Sdcb.Mattermost.DotNetSdk.Test
{
    /// <summary>
    ///  Class for testing BotsApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class BotsApiTests : IDisposable
    {
        private BotsApi instance;

        public BotsApiTests()
        {
            instance = new BotsApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of BotsApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' BotsApi
            //Assert.IsType(typeof(BotsApi), instance, "instance is a BotsApi");
        }

        
        /// <summary>
        /// Test BotsBotUserIdAssignUserIdPost
        /// </summary>
        [Fact]
        public void BotsBotUserIdAssignUserIdPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string botUserId = null;
            //string userId = null;
            //var response = instance.BotsBotUserIdAssignUserIdPost(botUserId, userId);
            //Assert.IsType<Bot> (response, "response is Bot");
        }
        
        /// <summary>
        /// Test BotsBotUserIdDisablePost
        /// </summary>
        [Fact]
        public void BotsBotUserIdDisablePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string botUserId = null;
            //var response = instance.BotsBotUserIdDisablePost(botUserId);
            //Assert.IsType<Bot> (response, "response is Bot");
        }
        
        /// <summary>
        /// Test BotsBotUserIdEnablePost
        /// </summary>
        [Fact]
        public void BotsBotUserIdEnablePostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string botUserId = null;
            //var response = instance.BotsBotUserIdEnablePost(botUserId);
            //Assert.IsType<Bot> (response, "response is Bot");
        }
        
        /// <summary>
        /// Test BotsBotUserIdGet
        /// </summary>
        [Fact]
        public void BotsBotUserIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string botUserId = null;
            //bool? includeDeleted = null;
            //var response = instance.BotsBotUserIdGet(botUserId, includeDeleted);
            //Assert.IsType<Bot> (response, "response is Bot");
        }
        
        /// <summary>
        /// Test BotsBotUserIdIconDelete
        /// </summary>
        [Fact]
        public void BotsBotUserIdIconDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string botUserId = null;
            //var response = instance.BotsBotUserIdIconDelete(botUserId);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test BotsBotUserIdIconGet
        /// </summary>
        [Fact]
        public void BotsBotUserIdIconGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string botUserId = null;
            //instance.BotsBotUserIdIconGet(botUserId);
            
        }
        
        /// <summary>
        /// Test BotsBotUserIdIconPost
        /// </summary>
        [Fact]
        public void BotsBotUserIdIconPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string botUserId = null;
            //System.IO.Stream image = null;
            //var response = instance.BotsBotUserIdIconPost(botUserId, image);
            //Assert.IsType<StatusOK> (response, "response is StatusOK");
        }
        
        /// <summary>
        /// Test BotsBotUserIdPut
        /// </summary>
        [Fact]
        public void BotsBotUserIdPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string botUserId = null;
            //InlineObject64 body = null;
            //var response = instance.BotsBotUserIdPut(botUserId, body);
            //Assert.IsType<Bot> (response, "response is Bot");
        }
        
        /// <summary>
        /// Test BotsGet
        /// </summary>
        [Fact]
        public void BotsGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string page = null;
            //string perPage = null;
            //bool? includeDeleted = null;
            //bool? onlyOrphaned = null;
            //var response = instance.BotsGet(page, perPage, includeDeleted, onlyOrphaned);
            //Assert.IsType<List<Bot>> (response, "response is List<Bot>");
        }
        
        /// <summary>
        /// Test BotsPost
        /// </summary>
        [Fact]
        public void BotsPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //InlineObject63 body = null;
            //var response = instance.BotsPost(body);
            //Assert.IsType<Bot> (response, "response is Bot");
        }
        
    }

}
