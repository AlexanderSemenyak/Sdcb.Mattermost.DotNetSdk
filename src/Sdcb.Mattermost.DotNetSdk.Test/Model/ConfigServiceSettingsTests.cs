/* 
 * Mattermost API Reference
 *
 * There is also a work-in-progress [Postman API reference](https://documenter.getpostman.com/view/4508214/RW8FERUn). 
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: feedback@mattermost.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Sdcb.Mattermost.DotNetSdk.Api;
using Sdcb.Mattermost.DotNetSdk.Model;
using Sdcb.Mattermost.DotNetSdk.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Sdcb.Mattermost.DotNetSdk.Test
{
    /// <summary>
    ///  Class for testing ConfigServiceSettings
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class ConfigServiceSettingsTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for ConfigServiceSettings
        //private ConfigServiceSettings instance;

        public ConfigServiceSettingsTests()
        {
            // TODO uncomment below to create an instance of ConfigServiceSettings
            //instance = new ConfigServiceSettings();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of ConfigServiceSettings
        /// </summary>
        [Fact]
        public void ConfigServiceSettingsInstanceTest()
        {
            // TODO uncomment below to test "IsInstanceOfType" ConfigServiceSettings
            //Assert.IsInstanceOfType<ConfigServiceSettings> (instance, "variable 'instance' is a ConfigServiceSettings");
        }


        /// <summary>
        /// Test the property 'SiteURL'
        /// </summary>
        [Fact]
        public void SiteURLTest()
        {
            // TODO unit test for the property 'SiteURL'
        }
        /// <summary>
        /// Test the property 'ListenAddress'
        /// </summary>
        [Fact]
        public void ListenAddressTest()
        {
            // TODO unit test for the property 'ListenAddress'
        }
        /// <summary>
        /// Test the property 'ConnectionSecurity'
        /// </summary>
        [Fact]
        public void ConnectionSecurityTest()
        {
            // TODO unit test for the property 'ConnectionSecurity'
        }
        /// <summary>
        /// Test the property 'TLSCertFile'
        /// </summary>
        [Fact]
        public void TLSCertFileTest()
        {
            // TODO unit test for the property 'TLSCertFile'
        }
        /// <summary>
        /// Test the property 'TLSKeyFile'
        /// </summary>
        [Fact]
        public void TLSKeyFileTest()
        {
            // TODO unit test for the property 'TLSKeyFile'
        }
        /// <summary>
        /// Test the property 'UseLetsEncrypt'
        /// </summary>
        [Fact]
        public void UseLetsEncryptTest()
        {
            // TODO unit test for the property 'UseLetsEncrypt'
        }
        /// <summary>
        /// Test the property 'LetsEncryptCertificateCacheFile'
        /// </summary>
        [Fact]
        public void LetsEncryptCertificateCacheFileTest()
        {
            // TODO unit test for the property 'LetsEncryptCertificateCacheFile'
        }
        /// <summary>
        /// Test the property 'Forward80To443'
        /// </summary>
        [Fact]
        public void Forward80To443Test()
        {
            // TODO unit test for the property 'Forward80To443'
        }
        /// <summary>
        /// Test the property 'ReadTimeout'
        /// </summary>
        [Fact]
        public void ReadTimeoutTest()
        {
            // TODO unit test for the property 'ReadTimeout'
        }
        /// <summary>
        /// Test the property 'WriteTimeout'
        /// </summary>
        [Fact]
        public void WriteTimeoutTest()
        {
            // TODO unit test for the property 'WriteTimeout'
        }
        /// <summary>
        /// Test the property 'MaximumLoginAttempts'
        /// </summary>
        [Fact]
        public void MaximumLoginAttemptsTest()
        {
            // TODO unit test for the property 'MaximumLoginAttempts'
        }
        /// <summary>
        /// Test the property 'SegmentDeveloperKey'
        /// </summary>
        [Fact]
        public void SegmentDeveloperKeyTest()
        {
            // TODO unit test for the property 'SegmentDeveloperKey'
        }
        /// <summary>
        /// Test the property 'GoogleDeveloperKey'
        /// </summary>
        [Fact]
        public void GoogleDeveloperKeyTest()
        {
            // TODO unit test for the property 'GoogleDeveloperKey'
        }
        /// <summary>
        /// Test the property 'EnableOAuthServiceProvider'
        /// </summary>
        [Fact]
        public void EnableOAuthServiceProviderTest()
        {
            // TODO unit test for the property 'EnableOAuthServiceProvider'
        }
        /// <summary>
        /// Test the property 'EnableIncomingWebhooks'
        /// </summary>
        [Fact]
        public void EnableIncomingWebhooksTest()
        {
            // TODO unit test for the property 'EnableIncomingWebhooks'
        }
        /// <summary>
        /// Test the property 'EnableOutgoingWebhooks'
        /// </summary>
        [Fact]
        public void EnableOutgoingWebhooksTest()
        {
            // TODO unit test for the property 'EnableOutgoingWebhooks'
        }
        /// <summary>
        /// Test the property 'EnableCommands'
        /// </summary>
        [Fact]
        public void EnableCommandsTest()
        {
            // TODO unit test for the property 'EnableCommands'
        }
        /// <summary>
        /// Test the property 'EnableOnlyAdminIntegrations'
        /// </summary>
        [Fact]
        public void EnableOnlyAdminIntegrationsTest()
        {
            // TODO unit test for the property 'EnableOnlyAdminIntegrations'
        }
        /// <summary>
        /// Test the property 'EnablePostUsernameOverride'
        /// </summary>
        [Fact]
        public void EnablePostUsernameOverrideTest()
        {
            // TODO unit test for the property 'EnablePostUsernameOverride'
        }
        /// <summary>
        /// Test the property 'EnablePostIconOverride'
        /// </summary>
        [Fact]
        public void EnablePostIconOverrideTest()
        {
            // TODO unit test for the property 'EnablePostIconOverride'
        }
        /// <summary>
        /// Test the property 'EnableTesting'
        /// </summary>
        [Fact]
        public void EnableTestingTest()
        {
            // TODO unit test for the property 'EnableTesting'
        }
        /// <summary>
        /// Test the property 'EnableDeveloper'
        /// </summary>
        [Fact]
        public void EnableDeveloperTest()
        {
            // TODO unit test for the property 'EnableDeveloper'
        }
        /// <summary>
        /// Test the property 'EnableSecurityFixAlert'
        /// </summary>
        [Fact]
        public void EnableSecurityFixAlertTest()
        {
            // TODO unit test for the property 'EnableSecurityFixAlert'
        }
        /// <summary>
        /// Test the property 'EnableInsecureOutgoingConnections'
        /// </summary>
        [Fact]
        public void EnableInsecureOutgoingConnectionsTest()
        {
            // TODO unit test for the property 'EnableInsecureOutgoingConnections'
        }
        /// <summary>
        /// Test the property 'EnableMultifactorAuthentication'
        /// </summary>
        [Fact]
        public void EnableMultifactorAuthenticationTest()
        {
            // TODO unit test for the property 'EnableMultifactorAuthentication'
        }
        /// <summary>
        /// Test the property 'EnforceMultifactorAuthentication'
        /// </summary>
        [Fact]
        public void EnforceMultifactorAuthenticationTest()
        {
            // TODO unit test for the property 'EnforceMultifactorAuthentication'
        }
        /// <summary>
        /// Test the property 'AllowCorsFrom'
        /// </summary>
        [Fact]
        public void AllowCorsFromTest()
        {
            // TODO unit test for the property 'AllowCorsFrom'
        }
        /// <summary>
        /// Test the property 'SessionLengthWebInDays'
        /// </summary>
        [Fact]
        public void SessionLengthWebInDaysTest()
        {
            // TODO unit test for the property 'SessionLengthWebInDays'
        }
        /// <summary>
        /// Test the property 'SessionLengthMobileInDays'
        /// </summary>
        [Fact]
        public void SessionLengthMobileInDaysTest()
        {
            // TODO unit test for the property 'SessionLengthMobileInDays'
        }
        /// <summary>
        /// Test the property 'SessionLengthSSOInDays'
        /// </summary>
        [Fact]
        public void SessionLengthSSOInDaysTest()
        {
            // TODO unit test for the property 'SessionLengthSSOInDays'
        }
        /// <summary>
        /// Test the property 'SessionCacheInMinutes'
        /// </summary>
        [Fact]
        public void SessionCacheInMinutesTest()
        {
            // TODO unit test for the property 'SessionCacheInMinutes'
        }
        /// <summary>
        /// Test the property 'WebsocketSecurePort'
        /// </summary>
        [Fact]
        public void WebsocketSecurePortTest()
        {
            // TODO unit test for the property 'WebsocketSecurePort'
        }
        /// <summary>
        /// Test the property 'WebsocketPort'
        /// </summary>
        [Fact]
        public void WebsocketPortTest()
        {
            // TODO unit test for the property 'WebsocketPort'
        }
        /// <summary>
        /// Test the property 'WebserverMode'
        /// </summary>
        [Fact]
        public void WebserverModeTest()
        {
            // TODO unit test for the property 'WebserverMode'
        }
        /// <summary>
        /// Test the property 'EnableCustomEmoji'
        /// </summary>
        [Fact]
        public void EnableCustomEmojiTest()
        {
            // TODO unit test for the property 'EnableCustomEmoji'
        }
        /// <summary>
        /// Test the property 'RestrictCustomEmojiCreation'
        /// </summary>
        [Fact]
        public void RestrictCustomEmojiCreationTest()
        {
            // TODO unit test for the property 'RestrictCustomEmojiCreation'
        }

    }

}
